/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{var e={1446:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AwsCrc32=void 0;var n=r(2717),i=r(7658),o=r(4079),a=function(){function e(){this.crc32=new o.Crc32}return e.prototype.update=function(e){(0,i.isEmptyData)(e)||this.crc32.update((0,i.convertToBuffer)(e))},e.prototype.digest=function(){return n.__awaiter(this,void 0,void 0,(function(){return n.__generator(this,(function(e){return[2,(0,i.numToUint8)(this.crc32.digest())]}))}))},e.prototype.reset=function(){this.crc32=new o.Crc32},e}();t.AwsCrc32=a},4079:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AwsCrc32=t.Crc32=t.crc32=void 0;var n=r(2717),i=r(7658);t.crc32=function(e){return(new o).update(e).digest()};var o=function(){function e(){this.checksum=4294967295}return e.prototype.update=function(e){var t,r;try{for(var i=n.__values(e),o=i.next();!o.done;o=i.next()){var s=o.value;this.checksum=this.checksum>>>8^a[255&(this.checksum^s)]}}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}return this},e.prototype.digest=function(){return(4294967295^this.checksum)>>>0},e}();t.Crc32=o;var a=(0,i.uint32ArrayFrom)([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117]),s=r(1446);Object.defineProperty(t,"AwsCrc32",{enumerable:!0,get:function(){return s.AwsCrc32}})},2717:(e,t,r)=>{"use strict";r.r(t),r.d(t,{__assign:()=>o,__asyncDelegator:()=>w,__asyncGenerator:()=>b,__asyncValues:()=>_,__await:()=>m,__awaiter:()=>f,__classPrivateFieldGet:()=>x,__classPrivateFieldSet:()=>R,__createBinding:()=>d,__decorate:()=>s,__exportStar:()=>h,__extends:()=>i,__generator:()=>l,__importDefault:()=>A,__importStar:()=>E,__makeTemplateObject:()=>S,__metadata:()=>c,__param:()=>u,__read:()=>y,__rest:()=>a,__spread:()=>g,__spreadArrays:()=>v,__values:()=>p});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)};function i(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};function a(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function s(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a}function u(e,t){return function(r,n){t(r,n,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function f(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{u(n.next(e))}catch(e){o(e)}}function s(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))}function l(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function d(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}function h(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||(t[r]=e[r])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(y(arguments[t]));return e}function v(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}function m(e){return this instanceof m?(this.v=e,this):new m(e)}function b(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),o=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||s(e,t)}))})}function s(e,t){try{(r=i[e](t)).value instanceof m?Promise.resolve(r.value.v).then(u,c):f(o[0][2],r)}catch(e){f(o[0][3],e)}var r}function u(e){s("next",e)}function c(e){s("throw",e)}function f(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function w(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){t[n]=e[n]?function(t){return(r=!r)?{value:m(e[n](t)),done:"return"===n}:i?i(t):t}:i}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=p(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}}function S(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function A(e){return e&&e.__esModule?e:{default:e}}function x(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function R(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}},8260:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6665:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5470:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},969:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5287:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isMsWindow=void 0;var r=["decrypt","digest","encrypt","exportKey","generateKey","importKey","sign","verify"];t.isMsWindow=function(e){if(function(e){return"MSInputMethodContext"in e&&"msCrypto"in e}(e)&&void 0!==e.msCrypto.subtle){var t=e.msCrypto,n=t.getRandomValues,i=t.subtle;return r.map((function(e){return i[e]})).concat(n).every((function(e){return"function"==typeof e}))}return!1}},87:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1980);n.__exportStar(r(8260),t),n.__exportStar(r(6665),t),n.__exportStar(r(5470),t),n.__exportStar(r(969),t),n.__exportStar(r(5287),t)},1980:(e,t,r)=>{"use strict";r.r(t),r.d(t,{__assign:()=>o,__asyncDelegator:()=>w,__asyncGenerator:()=>b,__asyncValues:()=>_,__await:()=>m,__awaiter:()=>f,__classPrivateFieldGet:()=>x,__classPrivateFieldSet:()=>R,__createBinding:()=>d,__decorate:()=>s,__exportStar:()=>h,__extends:()=>i,__generator:()=>l,__importDefault:()=>A,__importStar:()=>E,__makeTemplateObject:()=>S,__metadata:()=>c,__param:()=>u,__read:()=>y,__rest:()=>a,__spread:()=>g,__spreadArrays:()=>v,__values:()=>p});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)};function i(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};function a(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function s(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a}function u(e,t){return function(r,n){t(r,n,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function f(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{u(n.next(e))}catch(e){o(e)}}function s(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))}function l(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function d(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}function h(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||(t[r]=e[r])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(y(arguments[t]));return e}function v(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}function m(e){return this instanceof m?(this.v=e,this):new m(e)}function b(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),o=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||s(e,t)}))})}function s(e,t){try{(r=i[e](t)).value instanceof m?Promise.resolve(r.value.v).then(u,c):f(o[0][2],r)}catch(e){f(o[0][3],e)}var r}function u(e){s("next",e)}function c(e){s("throw",e)}function f(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function w(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){t[n]=e[n]?function(t){return(r=!r)?{value:m(e[n](t)),done:"return"===n}:i?i(t):t}:i}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=p(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}}function S(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function A(e){return e&&e.__esModule?e:{default:e}}function x(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function R(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}},7333:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EMPTY_DATA_SHA_256=t.SHA_256_HMAC_ALGO=t.SHA_256_HASH=void 0,t.SHA_256_HASH={name:"SHA-256"},t.SHA_256_HMAC_ALGO={name:"HMAC",hash:t.SHA_256_HASH},t.EMPTY_DATA_SHA_256=new Uint8Array([227,176,196,66,152,252,28,20,154,251,244,200,153,111,185,36,39,174,65,228,100,155,147,76,164,149,153,27,120,82,184,85])},2769:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sha256=void 0;var n=r(3479),i=r(8889),o=r(1938),a=r(21),s=r(87),u=r(6495),c=r(7658),f=function(){function e(e){(0,a.supportsWebCrypto)((0,u.locateWindow)())?this.hash=new i.Sha256(e):(0,s.isMsWindow)((0,u.locateWindow)())?this.hash=new n.Sha256(e):this.hash=new o.Sha256(e)}return e.prototype.update=function(e,t){this.hash.update((0,c.convertToBuffer)(e))},e.prototype.digest=function(){return this.hash.digest()},e.prototype.reset=function(){this.hash.reset()},e}();t.Sha256=f},3479:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sha256=void 0;var n=r(8036),i=r(7333),o=r(2084),a=r(6495),s=function(){function e(e){this.secret=e,this.reset()}return e.prototype.update=function(e){var t=this;(0,n.isEmptyData)(e)||(this.operation=this.operation.then((function(r){return r.onerror=function(){t.operation=Promise.reject(new Error("Error encountered updating hash"))},r.process(u(e)),r})),this.operation.catch((function(){})))},e.prototype.digest=function(){return this.operation.then((function(e){return new Promise((function(t,r){e.onerror=function(){r(new Error("Error encountered finalizing hash"))},e.oncomplete=function(){e.result&&t(new Uint8Array(e.result)),r(new Error("Error encountered finalizing hash"))},e.finish()}))}))},e.prototype.reset=function(){var e;this.secret?(this.operation=(e=this.secret,new Promise((function(t,r){var n=(0,a.locateWindow)().msCrypto.subtle.importKey("raw",u(e),i.SHA_256_HMAC_ALGO,!1,["sign"]);n.oncomplete=function(){n.result&&t(n.result),r(new Error("ImportKey completed without importing key."))},n.onerror=function(){r(new Error("ImportKey failed to import key."))}}))).then((function(e){return(0,a.locateWindow)().msCrypto.subtle.sign(i.SHA_256_HMAC_ALGO,e)})),this.operation.catch((function(){}))):this.operation=Promise.resolve((0,a.locateWindow)().msCrypto.subtle.digest("SHA-256"))},e}();function u(e){return"string"==typeof e?(0,o.fromUtf8)(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}t.Sha256=s},7643:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebCryptoSha256=t.Ie11Sha256=void 0,r(5789).__exportStar(r(2769),t);var n=r(3479);Object.defineProperty(t,"Ie11Sha256",{enumerable:!0,get:function(){return n.Sha256}});var i=r(8889);Object.defineProperty(t,"WebCryptoSha256",{enumerable:!0,get:function(){return i.Sha256}})},8036:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEmptyData=void 0,t.isEmptyData=function(e){return"string"==typeof e?0===e.length:0===e.byteLength}},8889:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sha256=void 0;var n=r(7658),i=r(7333),o=r(6495),a=function(){function e(e){this.toHash=new Uint8Array(0),this.secret=e,this.reset()}return e.prototype.update=function(e){if(!(0,n.isEmptyData)(e)){var t=(0,n.convertToBuffer)(e),r=new Uint8Array(this.toHash.byteLength+t.byteLength);r.set(this.toHash,0),r.set(t,this.toHash.byteLength),this.toHash=r}},e.prototype.digest=function(){var e=this;return this.key?this.key.then((function(t){return(0,o.locateWindow)().crypto.subtle.sign(i.SHA_256_HMAC_ALGO,t,e.toHash).then((function(e){return new Uint8Array(e)}))})):(0,n.isEmptyData)(this.toHash)?Promise.resolve(i.EMPTY_DATA_SHA_256):Promise.resolve().then((function(){return(0,o.locateWindow)().crypto.subtle.digest(i.SHA_256_HASH,e.toHash)})).then((function(e){return Promise.resolve(new Uint8Array(e))}))},e.prototype.reset=function(){var e=this;this.toHash=new Uint8Array(0),this.secret&&void 0!==this.secret&&(this.key=new Promise((function(t,r){(0,o.locateWindow)().crypto.subtle.importKey("raw",(0,n.convertToBuffer)(e.secret),i.SHA_256_HMAC_ALGO,!1,["sign"]).then(t,r)})),this.key.catch((function(){})))},e}();t.Sha256=a},5789:(e,t,r)=>{"use strict";r.r(t),r.d(t,{__assign:()=>o,__asyncDelegator:()=>w,__asyncGenerator:()=>b,__asyncValues:()=>_,__await:()=>m,__awaiter:()=>f,__classPrivateFieldGet:()=>x,__classPrivateFieldSet:()=>R,__createBinding:()=>d,__decorate:()=>s,__exportStar:()=>h,__extends:()=>i,__generator:()=>l,__importDefault:()=>A,__importStar:()=>E,__makeTemplateObject:()=>S,__metadata:()=>c,__param:()=>u,__read:()=>y,__rest:()=>a,__spread:()=>g,__spreadArrays:()=>v,__values:()=>p});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)};function i(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};function a(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function s(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a}function u(e,t){return function(r,n){t(r,n,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function f(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{u(n.next(e))}catch(e){o(e)}}function s(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))}function l(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function d(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}function h(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||(t[r]=e[r])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(y(arguments[t]));return e}function v(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}function m(e){return this instanceof m?(this.v=e,this):new m(e)}function b(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),o=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||s(e,t)}))})}function s(e,t){try{(r=i[e](t)).value instanceof m?Promise.resolve(r.value.v).then(u,c):f(o[0][2],r)}catch(e){f(o[0][3],e)}var r}function u(e){s("next",e)}function c(e){s("throw",e)}function f(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function w(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){t[n]=e[n]?function(t){return(r=!r)?{value:m(e[n](t)),done:"return"===n}:i?i(t):t}:i}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=p(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}}function S(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function A(e){return e&&e.__esModule?e:{default:e}}function x(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function R(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}},914:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RawSha256=void 0;var n=r(9945),i=function(){function e(){this.state=Int32Array.from(n.INIT),this.temp=new Int32Array(64),this.buffer=new Uint8Array(64),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}return e.prototype.update=function(e){if(this.finished)throw new Error("Attempted to update an already finished hash.");var t=0,r=e.byteLength;if(this.bytesHashed+=r,8*this.bytesHashed>n.MAX_HASHABLE_LENGTH)throw new Error("Cannot hash more than 2^53 - 1 bits");for(;r>0;)this.buffer[this.bufferLength++]=e[t++],r--,this.bufferLength===n.BLOCK_SIZE&&(this.hashBuffer(),this.bufferLength=0)},e.prototype.digest=function(){if(!this.finished){var e=8*this.bytesHashed,t=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),r=this.bufferLength;if(t.setUint8(this.bufferLength++,128),r%n.BLOCK_SIZE>=n.BLOCK_SIZE-8){for(var i=this.bufferLength;i<n.BLOCK_SIZE;i++)t.setUint8(i,0);this.hashBuffer(),this.bufferLength=0}for(i=this.bufferLength;i<n.BLOCK_SIZE-8;i++)t.setUint8(i,0);t.setUint32(n.BLOCK_SIZE-8,Math.floor(e/4294967296),!0),t.setUint32(n.BLOCK_SIZE-4,e),this.hashBuffer(),this.finished=!0}var o=new Uint8Array(n.DIGEST_LENGTH);for(i=0;i<8;i++)o[4*i]=this.state[i]>>>24&255,o[4*i+1]=this.state[i]>>>16&255,o[4*i+2]=this.state[i]>>>8&255,o[4*i+3]=this.state[i]>>>0&255;return o},e.prototype.hashBuffer=function(){for(var e=this.buffer,t=this.state,r=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],c=t[6],f=t[7],l=0;l<n.BLOCK_SIZE;l++){if(l<16)this.temp[l]=(255&e[4*l])<<24|(255&e[4*l+1])<<16|(255&e[4*l+2])<<8|255&e[4*l+3];else{var d=this.temp[l-2],h=(d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10,p=((d=this.temp[l-15])>>>7|d<<25)^(d>>>18|d<<14)^d>>>3;this.temp[l]=(h+this.temp[l-7]|0)+(p+this.temp[l-16]|0)}var y=(((s>>>6|s<<26)^(s>>>11|s<<21)^(s>>>25|s<<7))+(s&u^~s&c)|0)+(f+(n.KEY[l]+this.temp[l]|0)|0)|0,g=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&o^i&o)|0;f=c,c=u,u=s,s=a+y|0,a=o,o=i,i=r,r=y+g|0}t[0]+=r,t[1]+=i,t[2]+=o,t[3]+=a,t[4]+=s,t[5]+=u,t[6]+=c,t[7]+=f},e}();t.RawSha256=i},9945:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MAX_HASHABLE_LENGTH=t.INIT=t.KEY=t.DIGEST_LENGTH=t.BLOCK_SIZE=void 0,t.BLOCK_SIZE=64,t.DIGEST_LENGTH=32,t.KEY=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),t.INIT=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],t.MAX_HASHABLE_LENGTH=Math.pow(2,53)-1},1938:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(3541).__exportStar(r(5430),t)},5430:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sha256=void 0;var n=r(3541),i=r(9945),o=r(914),a=r(7658),s=function(){function e(e){this.secret=e,this.hash=new o.RawSha256,this.reset()}return e.prototype.update=function(e){if(!(0,a.isEmptyData)(e)&&!this.error)try{this.hash.update((0,a.convertToBuffer)(e))}catch(e){this.error=e}},e.prototype.digestSync=function(){if(this.error)throw this.error;return this.outer?(this.outer.finished||this.outer.update(this.hash.digest()),this.outer.digest()):this.hash.digest()},e.prototype.digest=function(){return n.__awaiter(this,void 0,void 0,(function(){return n.__generator(this,(function(e){return[2,this.digestSync()]}))}))},e.prototype.reset=function(){if(this.hash=new o.RawSha256,this.secret){this.outer=new o.RawSha256;var e=function(e){var t=(0,a.convertToBuffer)(e);if(t.byteLength>i.BLOCK_SIZE){var r=new o.RawSha256;r.update(t),t=r.digest()}var n=new Uint8Array(i.BLOCK_SIZE);return n.set(t),n}(this.secret),t=new Uint8Array(i.BLOCK_SIZE);t.set(e);for(var r=0;r<i.BLOCK_SIZE;r++)e[r]^=54,t[r]^=92;for(this.hash.update(e),this.outer.update(t),r=0;r<e.byteLength;r++)e[r]=0}},e}();t.Sha256=s},3541:(e,t,r)=>{"use strict";r.r(t),r.d(t,{__assign:()=>o,__asyncDelegator:()=>w,__asyncGenerator:()=>b,__asyncValues:()=>_,__await:()=>m,__awaiter:()=>f,__classPrivateFieldGet:()=>x,__classPrivateFieldSet:()=>R,__createBinding:()=>d,__decorate:()=>s,__exportStar:()=>h,__extends:()=>i,__generator:()=>l,__importDefault:()=>A,__importStar:()=>E,__makeTemplateObject:()=>S,__metadata:()=>c,__param:()=>u,__read:()=>y,__rest:()=>a,__spread:()=>g,__spreadArrays:()=>v,__values:()=>p});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)};function i(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};function a(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function s(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a}function u(e,t){return function(r,n){t(r,n,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function f(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{u(n.next(e))}catch(e){o(e)}}function s(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))}function l(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function d(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}function h(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||(t[r]=e[r])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(y(arguments[t]));return e}function v(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}function m(e){return this instanceof m?(this.v=e,this):new m(e)}function b(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),o=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||s(e,t)}))})}function s(e,t){try{(r=i[e](t)).value instanceof m?Promise.resolve(r.value.v).then(u,c):f(o[0][2],r)}catch(e){f(o[0][3],e)}var r}function u(e){s("next",e)}function c(e){s("throw",e)}function f(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function w(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){t[n]=e[n]?function(t){return(r=!r)?{value:m(e[n](t)),done:"return"===n}:i?i(t):t}:i}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=p(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}}function S(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function A(e){return e&&e.__esModule?e:{default:e}}function x(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function R(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}},21:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(7840).__exportStar(r(7787),t)},7787:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.supportsZeroByteGCM=t.supportsSubtleCrypto=t.supportsSecureRandom=t.supportsWebCrypto=void 0;var n=r(7840),i=["decrypt","digest","encrypt","exportKey","generateKey","importKey","sign","verify"];function o(e){return"object"==typeof e&&"object"==typeof e.crypto&&"function"==typeof e.crypto.getRandomValues}function a(e){return e&&i.every((function(t){return"function"==typeof e[t]}))}t.supportsWebCrypto=function(e){return!(!o(e)||"object"!=typeof e.crypto.subtle)&&a(e.crypto.subtle)},t.supportsSecureRandom=o,t.supportsSubtleCrypto=a,t.supportsZeroByteGCM=function(e){return n.__awaiter(this,void 0,void 0,(function(){var t;return n.__generator(this,(function(r){switch(r.label){case 0:if(!a(e))return[2,!1];r.label=1;case 1:return r.trys.push([1,4,,5]),[4,e.generateKey({name:"AES-GCM",length:128},!1,["encrypt"])];case 2:return t=r.sent(),[4,e.encrypt({name:"AES-GCM",iv:new Uint8Array(Array(12)),additionalData:new Uint8Array(Array(16)),tagLength:128},t,new Uint8Array(0))];case 3:return[2,16===r.sent().byteLength];case 4:return r.sent(),[2,!1];case 5:return[2]}}))}))}},7840:(e,t,r)=>{"use strict";r.r(t),r.d(t,{__assign:()=>o,__asyncDelegator:()=>w,__asyncGenerator:()=>b,__asyncValues:()=>_,__await:()=>m,__awaiter:()=>f,__classPrivateFieldGet:()=>x,__classPrivateFieldSet:()=>R,__createBinding:()=>d,__decorate:()=>s,__exportStar:()=>h,__extends:()=>i,__generator:()=>l,__importDefault:()=>A,__importStar:()=>E,__makeTemplateObject:()=>S,__metadata:()=>c,__param:()=>u,__read:()=>y,__rest:()=>a,__spread:()=>g,__spreadArrays:()=>v,__values:()=>p});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)};function i(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};function a(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function s(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a}function u(e,t){return function(r,n){t(r,n,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function f(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{u(n.next(e))}catch(e){o(e)}}function s(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))}function l(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function d(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}function h(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||(t[r]=e[r])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(y(arguments[t]));return e}function v(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}function m(e){return this instanceof m?(this.v=e,this):new m(e)}function b(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),o=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||s(e,t)}))})}function s(e,t){try{(r=i[e](t)).value instanceof m?Promise.resolve(r.value.v).then(u,c):f(o[0][2],r)}catch(e){f(o[0][3],e)}var r}function u(e){s("next",e)}function c(e){s("throw",e)}function f(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function w(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){t[n]=e[n]?function(t){return(r=!r)?{value:m(e[n](t)),done:"return"===n}:i?i(t):t}:i}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=p(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}}function S(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function A(e){return e&&e.__esModule?e:{default:e}}function x(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function R(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}},1106:(e,t,r)=>{"use strict";var n=r(8764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.convertToBuffer=void 0;var i=r(2084),o=void 0!==n&&n.from?function(e){return n.from(e,"utf8")}:i.fromUtf8;t.convertToBuffer=function(e){return e instanceof Uint8Array?e:"string"==typeof e?o(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}},7658:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=t.numToUint8=t.isEmptyData=t.convertToBuffer=void 0;var n=r(1106);Object.defineProperty(t,"convertToBuffer",{enumerable:!0,get:function(){return n.convertToBuffer}});var i=r(4304);Object.defineProperty(t,"isEmptyData",{enumerable:!0,get:function(){return i.isEmptyData}});var o=r(2174);Object.defineProperty(t,"numToUint8",{enumerable:!0,get:function(){return o.numToUint8}});var a=r(1558);Object.defineProperty(t,"uint32ArrayFrom",{enumerable:!0,get:function(){return a.uint32ArrayFrom}})},4304:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEmptyData=void 0,t.isEmptyData=function(e){return"string"==typeof e?0===e.length:0===e.byteLength}},2174:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numToUint8=void 0,t.numToUint8=function(e){return new Uint8Array([(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255&e])}},1558:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=void 0,t.uint32ArrayFrom=function(e){if(!Uint32Array.from){for(var t=new Uint32Array(e.length),r=0;r<e.length;)t[r]=e[r],r+=1;return t}return Uint32Array.from(e)}},6495:(e,t,r)=>{"use strict";r.r(t),r.d(t,{locateWindow:()=>i});const n={};function i(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:n}},2084:(e,t,r)=>{"use strict";r.r(t),r.d(t,{fromUtf8:()=>n,toUtf8:()=>i});const n=e=>"function"==typeof TextEncoder?function(e){return(new TextEncoder).encode(e)}(e):(e=>{const t=[];for(let r=0,n=e.length;r<n;r++){const n=e.charCodeAt(r);if(n<128)t.push(n);else if(n<2048)t.push(n>>6|192,63&n|128);else if(r+1<e.length&&55296==(64512&n)&&56320==(64512&e.charCodeAt(r+1))){const i=65536+((1023&n)<<10)+(1023&e.charCodeAt(++r));t.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}else t.push(n>>12|224,n>>6&63|128,63&n|128)}return Uint8Array.from(t)})(e),i=e=>"function"==typeof TextDecoder?function(e){return new TextDecoder("utf-8").decode(e)}(e):(e=>{let t="";for(let r=0,n=e.length;r<n;r++){const n=e[r];if(n<128)t+=String.fromCharCode(n);else if(192<=n&&n<224){const i=e[++r];t+=String.fromCharCode((31&n)<<6|63&i)}else if(240<=n&&n<365){const i="%"+[n,e[++r],e[++r],e[++r]].map((e=>e.toString(16))).join("%");t+=decodeURIComponent(i)}else t+=String.fromCharCode((15&n)<<12|(63&e[++r])<<6|63&e[++r])}return t})(e)},9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=s(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,o=s(e),a=o[0],u=o[1],c=new i(function(e,t,r){return 3*(t+r)/4-r}(0,a,u)),f=0,l=u>0?a-4:a;for(r=0;r<l;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],c[f++]=t>>16&255,c[f++]=t>>8&255,c[f++]=255&t;return 2===u&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,c[f++]=255&t),1===u&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,c[f++]=t>>8&255,c[f++]=255&t),c},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],a=16383,s=0,c=n-i;s<c;s+=a)o.push(u(e,s,s+a>c?c:s+a));return 1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0;a<64;++a)r[a]=o[a],n[o.charCodeAt(a)]=a;function s(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,n){for(var i,o,a=[],s=t;s<n;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},1206:function(e){e.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return"NT";case"XP":case"NT 5.1":return"XP";case"NT 5.0":return"2000";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),o=e.getVersionPrecision(r),a=Math.max(i,o),s=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(s=a-Math.min(i,o)),a-=1;a>=s;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===s)return 0;a-=1}else if(u[0][a]<u[1][a])return-1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,o=new Array(i>1?i-1:0),a=1;a<i;a++)o[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(o));var s=function(){var e=o[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t]}))};for(t=0,r=o.length;t<r;t+=1)s();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default},18:function(e,t,r){"use strict";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0,t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"},t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"},t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"},t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"},t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"}},90:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},o=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(){}var t,r;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,r=[{key:"BROWSER_MAP",get:function(){return o.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return o.ENGINE_MAP}},{key:"OS_MAP",get:function(){return o.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return o.PLATFORMS_MAP}}],null&&a(t.prototype,null),r&&a(t,r),e}();t.default=s,e.exports=t.default},91:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),o=u(r(94)),a=u(r(95)),s=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=s.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=s.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find(o.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=s.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return s.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},o=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,o+=1):"object"==typeof a&&(r[t]=a,n+=1)})),n>0){var a=Object.keys(r),u=s.default.find(a,(function(e){return t.isOS(e)}));if(u){var c=this.satisfies(r[u]);if(void 0!==c)return c}var f=s.default.find(a,(function(e){return t.isPlatform(e)}));if(f){var l=this.satisfies(r[f]);if(void 0!==l)return l}}if(o>0){var d=Object.keys(i),h=s.default.find(d,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=s.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(s.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=c,e.exports=t.default},92:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},o=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(o,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(o,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return{name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default},93:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},o=r(18),a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return{name:o.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return{name:o.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return{name:o.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:o.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:o.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return{name:o.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:o.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:o.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return{name:o.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return{name:o.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return{name:o.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:o.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:o.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return{name:o.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default},94:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},o=r(18),a=[{test:[/googlebot/i],describe:function(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:o.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return{type:o.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return{type:o.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return{type:o.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return{type:o.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return{type:o.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:o.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:o.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:o.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return{type:o.PLATFORMS_MAP.mobile}}},{test:function(e){return"blackberry"===e.getBrowserName(!0)},describe:function(){return{type:o.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return"bada"===e.getBrowserName(!0)},describe:function(){return{type:o.PLATFORMS_MAP.mobile}}},{test:function(e){return"windows phone"===e.getBrowserName()},describe:function(){return{type:o.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return"android"===e.getOSName(!0)&&t>=3},describe:function(){return{type:o.PLATFORMS_MAP.tablet}}},{test:function(e){return"android"===e.getOSName(!0)},describe:function(){return{type:o.PLATFORMS_MAP.mobile}}},{test:function(e){return"macos"===e.getOSName(!0)},describe:function(){return{type:o.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return"windows"===e.getOSName(!0)},describe:function(){return{type:o.PLATFORMS_MAP.desktop}}},{test:function(e){return"linux"===e.getOSName(!0)},describe:function(){return{type:o.PLATFORMS_MAP.desktop}}},{test:function(e){return"playstation 4"===e.getOSName(!0)},describe:function(){return{type:o.PLATFORMS_MAP.tv}}},{test:function(e){return"roku"===e.getOSName(!0)},describe:function(){return{type:o.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default},95:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},o=r(18),a=[{test:function(e){return"microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return{name:o.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return{name:o.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:o.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:o.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:o.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return{name:o.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:o.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default}})},5420:(e,t,r)=>{var n=r(8764).Buffer,i=Object.prototype.toString,o=void 0!==n&&"function"==typeof n.alloc&&"function"==typeof n.allocUnsafe&&"function"==typeof n.from;e.exports=function(e,t,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return a=e,"ArrayBuffer"===i.call(a).slice(8,-1)?function(e,t,r){t>>>=0;var i=e.byteLength-t;if(i<0)throw new RangeError("'offset' is out of bounds");if(void 0===r)r=i;else if((r>>>=0)>i)throw new RangeError("'length' is out of bounds");return o?n.from(e.slice(t,t+r)):new n(new Uint8Array(e.slice(t,t+r)))}(e,t,r):"string"==typeof e?function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!n.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');return o?n.from(e,t):new n(e,t)}(e,t):o?n.from(e):new n(e);var a}},8764:(e,t,r)=>{"use strict";const n=r(9742),i=r(645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=u,t.SlowBuffer=function(e){return+e!=e&&(e=0),u.alloc(+e)},t.INSPECT_MAX_BYTES=50;const a=2147483647;function s(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,u.prototype),t}function u(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return l(e)}return c(e,t,r)}function c(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!u.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|y(e,t);let n=s(r);const i=n.write(e,t);return i!==r&&(n=n.slice(0,i)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(Z(e,Uint8Array)){const t=new Uint8Array(e);return h(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(Z(e,ArrayBuffer)||e&&Z(e.buffer,ArrayBuffer))return h(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(Z(e,SharedArrayBuffer)||e&&Z(e.buffer,SharedArrayBuffer)))return h(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return u.from(n,t,r);const i=function(e){if(u.isBuffer(e)){const t=0|p(e.length),r=s(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||Y(e.length)?s(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return u.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function l(e){return f(e),s(e<0?0:0|p(e))}function d(e){const t=e.length<0?0:0|p(e.length),r=s(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function h(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,u.prototype),n}function p(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function y(e,t){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Z(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return G(e).length;default:if(i)return n?-1:V(e).length;t=(""+t).toLowerCase(),i=!0}}function g(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return P(this,t,r);case"utf8":case"utf-8":return R(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return M(this,t,r);case"base64":return x(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function v(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function m(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),Y(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:b(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function b(e,t,r,n,i){let o,a=1,s=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,r/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){let n=-1;for(o=r;o<s;o++)if(c(e,o)===c(t,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===u)return n*a}else-1!==n&&(o-=o-n),n=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){let r=!0;for(let n=0;n<u;n++)if(c(e,o+n)!==c(t,n)){r=!1;break}if(r)return o}return-1}function w(e,t,r,n){r=Number(r)||0;const i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=t.length;let a;for(n>o/2&&(n=o/2),a=0;a<n;++a){const n=parseInt(t.substr(2*a,2),16);if(Y(n))return a;e[r+a]=n}return a}function _(e,t,r,n){return K(V(t,e.length-r),e,r,n)}function S(e,t,r,n){return K(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function E(e,t,r,n){return K(G(t),e,r,n)}function A(e,t,r,n){return K(function(e,t){let r,n,i;const o=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function x(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function R(e,t,r){r=Math.min(e.length,r);const n=[];let i=t;for(;i<r;){const t=e[i];let o=null,a=t>239?4:t>223?3:t>191?2:1;if(i+a<=r){let r,n,s,u;switch(a){case 1:t<128&&(o=t);break;case 2:r=e[i+1],128==(192&r)&&(u=(31&t)<<6|63&r,u>127&&(o=u));break;case 3:r=e[i+1],n=e[i+2],128==(192&r)&&128==(192&n)&&(u=(15&t)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(o=u));break;case 4:r=e[i+1],n=e[i+2],s=e[i+3],128==(192&r)&&128==(192&n)&&128==(192&s)&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&s,u>65535&&u<1114112&&(o=u))}}null===o?(o=65533,a=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=a}return function(e){const t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=O));return r}(n)}t.kMaxLength=a,u.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(e,t,r){return c(e,t,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(e,t,r){return function(e,t,r){return f(e),e<=0?s(e):void 0!==t?"string"==typeof r?s(e).fill(t,r):s(e).fill(t):s(e)}(e,t,r)},u.allocUnsafe=function(e){return l(e)},u.allocUnsafeSlow=function(e){return l(e)},u.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==u.prototype},u.compare=function(e,t){if(Z(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),Z(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=u.allocUnsafe(t);let i=0;for(r=0;r<e.length;++r){let t=e[r];if(Z(t,Uint8Array))i+t.length>n.length?(u.isBuffer(t)||(t=u.from(t)),t.copy(n,i)):Uint8Array.prototype.set.call(n,t,i);else{if(!u.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,i)}i+=t.length}return n},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)v(this,t,t+1);return this},u.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)v(this,t,t+3),v(this,t+1,t+2);return this},u.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)v(this,t,t+7),v(this,t+1,t+6),v(this,t+2,t+5),v(this,t+3,t+4);return this},u.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?R(this,0,e):g.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){let e="";const r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},o&&(u.prototype[o]=u.prototype.inspect),u.prototype.compare=function(e,t,r,n,i){if(Z(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;let o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0);const s=Math.min(o,a),c=this.slice(n,i),f=e.slice(t,r);for(let e=0;e<s;++e)if(c[e]!==f[e]){o=c[e],a=f[e];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return m(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return m(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return w(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":case"latin1":case"binary":return S(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const O=4096;function T(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function M(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function P(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=t;n<r;++n)i+=Q[e[n]];return i}function k(e,t,r){const n=e.slice(t,r);let i="";for(let e=0;e<n.length-1;e+=2)i+=String.fromCharCode(n[e]+256*n[e+1]);return i}function I(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function C(e,t,r,n,i,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function j(e,t,r,n,i){z(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=a,a>>=8,e[r++]=a,a>>=8,e[r++]=a,a>>=8,e[r++]=a,r}function L(e,t,r,n,i){z(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r+7]=o,o>>=8,e[r+6]=o,o>>=8,e[r+5]=o,o>>=8,e[r+4]=o;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=a,a>>=8,e[r+2]=a,a>>=8,e[r+1]=a,a>>=8,e[r]=a,r+8}function B(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function U(e,t,r,n,o){return t=+t,r>>>=0,o||B(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function N(e,t,r,n,o){return t=+t,r>>>=0,o||B(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);let n=this[e+--t],i=1;for(;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e>>>=0,t||I(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e>>>=0,t||I(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e>>>=0,t||I(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e>>>=0,t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e>>>=0,t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readBigUInt64LE=X((function(e){q(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),u.prototype.readBigUInt64BE=X((function(e){q(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),u.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);let n=t,i=1,o=this[e+--n];for(;n>0&&(i*=256);)o+=this[e+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return e>>>=0,t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){e>>>=0,t||I(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){e>>>=0,t||I(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return e>>>=0,t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e>>>=0,t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readBigInt64LE=X((function(e){q(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),u.prototype.readBigInt64BE=X((function(e){q(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),u.prototype.readFloatLE=function(e,t){return e>>>=0,t||I(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e>>>=0,t||I(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e>>>=0,t||I(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e>>>=0,t||I(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||C(this,e,t,r,Math.pow(2,8*r)-1,0);let i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||C(this,e,t,r,Math.pow(2,8*r)-1,0);let i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,1,255,0),this[t]=255&e,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigUInt64LE=X((function(e,t=0){return j(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=X((function(e,t=0){return L(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);C(this,e,t,r,n-1,-n)}let i=0,o=1,a=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/o>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);C(this,e,t,r,n-1,-n)}let i=r-1,o=1,a=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/o>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigInt64LE=X((function(e,t=0){return j(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=X((function(e,t=0){return L(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(e,t,r){return U(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return U(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return N(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return N(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(!u.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const i=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{const o=u.isBuffer(e)?e:u.from(e,n),a=o.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=o[i%a]}return this};const $={};function D(e,t,r){$[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function F(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function z(e,t,r,n,i,o){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let i;throw i=o>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new $.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,r){q(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||H(t,e.length-(r+1))}(n,i,o)}function q(e,t){if("number"!=typeof e)throw new $.ERR_INVALID_ARG_TYPE(t,"number",e)}function H(e,t,r){if(Math.floor(e)!==e)throw q(e,r),new $.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new $.ERR_BUFFER_OUT_OF_BOUNDS;throw new $.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}D("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),D("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),D("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=F(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=F(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n}),RangeError);const W=/[^+/0-9A-Za-z-_]/g;function V(e,t){let r;t=t||1/0;const n=e.length;let i=null;const o=[];for(let a=0;a<n;++a){if(r=e.charCodeAt(a),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function G(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(W,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function K(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function Z(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Y(e){return e!=e}const Q=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function X(e){return"undefined"==typeof BigInt?J:e}function J(){throw new Error("BigInt not supported")}},7187:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}y(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&y(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function c(e,t,r,n){var i,o,a,c;if(s(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=u(e))>0&&a.length>i&&!a.warned){a.warned=!0;var f=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");f.name="MaxListenersExceededWarning",f.emitter=e,f.type=t,f.count=a.length,c=f,console&&console.warn&&console.warn(c)}return e}function f(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=f.bind(n);return i.listener=r,n.wrapFn=i,i}function d(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):p(i,i.length)}function h(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function p(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function y(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),r(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=o[e];if(void 0===u)return!1;if("function"==typeof u)n(u,this,t);else{var c=u.length,f=p(u,c);for(r=0;r<c;++r)n(f[r],this,t)}return!0},o.prototype.addListener=function(e,t){return c(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return c(this,e,t,!0)},o.prototype.once=function(e,t){return s(t),this.on(e,l(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,l(this,e,t)),this},o.prototype.removeListener=function(e,t){var r,n,i,o,a;if(s(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return d(this,e,!0)},o.prototype.rawListeners=function(e){return d(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},o.prototype.listenerCount=h,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},645:(e,t)=>{t.read=function(e,t,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,c=u>>1,f=-7,l=r?i-1:0,d=r?-1:1,h=e[t+l];for(l+=d,o=h&(1<<-f)-1,h>>=-f,f+=s;f>0;o=256*o+e[t+l],l+=d,f-=8);for(a=o&(1<<-f)-1,o>>=-f,f+=n;f>0;a=256*a+e[t+l],l+=d,f-=8);if(0===o)o=1-c;else{if(o===u)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,n),o-=c}return(h?-1:1)*a*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var a,s,u,c=8*o-i-1,f=(1<<c)-1,l=f>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:o-1,p=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=f):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+l>=1?d/u:d*Math.pow(2,1-l))*u>=2&&(a++,u/=2),a+l>=f?(s=0,a=f):a+l>=1?(s=(t*u-1)*Math.pow(2,i),a+=l):(s=t*Math.pow(2,l-1)*Math.pow(2,i),a=0));i>=8;e[r+h]=255&s,h+=p,s/=256,i-=8);for(a=a<<i|s,c+=i;c>0;e[r+h]=255&a,h+=p,a/=256,c-=8);e[r+h-p]|=128*y}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},6486:function(e,t,r){var n;e=r.nmd(e),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",u=32,c=128,f=1/0,l=9007199254740991,d=NaN,h=4294967295,p=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",u],["partialRight",64],["rearg",256]],y="[object Arguments]",g="[object Array]",v="[object Boolean]",m="[object Date]",b="[object Error]",w="[object Function]",_="[object GeneratorFunction]",S="[object Map]",E="[object Number]",A="[object Object]",x="[object Promise]",R="[object RegExp]",O="[object Set]",T="[object String]",M="[object Symbol]",P="[object WeakMap]",k="[object ArrayBuffer]",I="[object DataView]",C="[object Float32Array]",j="[object Float64Array]",L="[object Int8Array]",B="[object Int16Array]",U="[object Int32Array]",N="[object Uint8Array]",$="[object Uint8ClampedArray]",D="[object Uint16Array]",F="[object Uint32Array]",z=/\b__p \+= '';/g,q=/\b(__p \+=) '' \+/g,H=/(__e\(.*?\)|\b__t\)) \+\n'';/g,W=/&(?:amp|lt|gt|quot|#39);/g,V=/[&<>"']/g,G=RegExp(W.source),K=RegExp(V.source),Z=/<%-([\s\S]+?)%>/g,Y=/<%([\s\S]+?)%>/g,Q=/<%=([\s\S]+?)%>/g,X=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,J=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,te=/[\\^$.*+?()[\]{}|]/g,re=RegExp(te.source),ne=/^\s+/,ie=/\s/,oe=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ae=/\{\n\/\* \[wrapped with (.+)\] \*/,se=/,? & /,ue=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ce=/[()=,{}\[\]\/\s]/,fe=/\\(\\)?/g,le=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,de=/\w*$/,he=/^[-+]0x[0-9a-f]+$/i,pe=/^0b[01]+$/i,ye=/^\[object .+?Constructor\]$/,ge=/^0o[0-7]+$/i,ve=/^(?:0|[1-9]\d*)$/,me=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,be=/($^)/,we=/['\n\r\u2028\u2029\\]/g,_e="\\ud800-\\udfff",Se="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ee="\\u2700-\\u27bf",Ae="a-z\\xdf-\\xf6\\xf8-\\xff",xe="A-Z\\xc0-\\xd6\\xd8-\\xde",Re="\\ufe0e\\ufe0f",Oe="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Te="["+_e+"]",Me="["+Oe+"]",Pe="["+Se+"]",ke="\\d+",Ie="["+Ee+"]",Ce="["+Ae+"]",je="[^"+_e+Oe+ke+Ee+Ae+xe+"]",Le="\\ud83c[\\udffb-\\udfff]",Be="[^"+_e+"]",Ue="(?:\\ud83c[\\udde6-\\uddff]){2}",Ne="[\\ud800-\\udbff][\\udc00-\\udfff]",$e="["+xe+"]",De="\\u200d",Fe="(?:"+Ce+"|"+je+")",ze="(?:"+$e+"|"+je+")",qe="(?:['’](?:d|ll|m|re|s|t|ve))?",He="(?:['’](?:D|LL|M|RE|S|T|VE))?",We="(?:"+Pe+"|"+Le+")?",Ve="["+Re+"]?",Ge=Ve+We+"(?:"+De+"(?:"+[Be,Ue,Ne].join("|")+")"+Ve+We+")*",Ke="(?:"+[Ie,Ue,Ne].join("|")+")"+Ge,Ze="(?:"+[Be+Pe+"?",Pe,Ue,Ne,Te].join("|")+")",Ye=RegExp("['’]","g"),Qe=RegExp(Pe,"g"),Xe=RegExp(Le+"(?="+Le+")|"+Ze+Ge,"g"),Je=RegExp([$e+"?"+Ce+"+"+qe+"(?="+[Me,$e,"$"].join("|")+")",ze+"+"+He+"(?="+[Me,$e+Fe,"$"].join("|")+")",$e+"?"+Fe+"+"+qe,$e+"+"+He,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ke,Ke].join("|"),"g"),et=RegExp("["+De+_e+Se+Re+"]"),tt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,rt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],nt=-1,it={};it[C]=it[j]=it[L]=it[B]=it[U]=it[N]=it[$]=it[D]=it[F]=!0,it[y]=it[g]=it[k]=it[v]=it[I]=it[m]=it[b]=it[w]=it[S]=it[E]=it[A]=it[R]=it[O]=it[T]=it[P]=!1;var ot={};ot[y]=ot[g]=ot[k]=ot[I]=ot[v]=ot[m]=ot[C]=ot[j]=ot[L]=ot[B]=ot[U]=ot[S]=ot[E]=ot[A]=ot[R]=ot[O]=ot[T]=ot[M]=ot[N]=ot[$]=ot[D]=ot[F]=!0,ot[b]=ot[w]=ot[P]=!1;var at={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},st=parseFloat,ut=parseInt,ct="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,ft="object"==typeof self&&self&&self.Object===Object&&self,lt=ct||ft||Function("return this")(),dt=t&&!t.nodeType&&t,ht=dt&&e&&!e.nodeType&&e,pt=ht&&ht.exports===dt,yt=pt&&ct.process,gt=function(){try{return ht&&ht.require&&ht.require("util").types||yt&&yt.binding&&yt.binding("util")}catch(e){}}(),vt=gt&&gt.isArrayBuffer,mt=gt&&gt.isDate,bt=gt&&gt.isMap,wt=gt&&gt.isRegExp,_t=gt&&gt.isSet,St=gt&&gt.isTypedArray;function Et(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}function At(e,t,r,n){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(n,a,r(a),e)}return n}function xt(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}function Rt(e,t){for(var r=null==e?0:e.length;r--&&!1!==t(e[r],r,e););return e}function Ot(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(!t(e[r],r,e))return!1;return!0}function Tt(e,t){for(var r=-1,n=null==e?0:e.length,i=0,o=[];++r<n;){var a=e[r];t(a,r,e)&&(o[i++]=a)}return o}function Mt(e,t){return!(null==e||!e.length)&&$t(e,t,0)>-1}function Pt(e,t,r){for(var n=-1,i=null==e?0:e.length;++n<i;)if(r(t,e[n]))return!0;return!1}function kt(e,t){for(var r=-1,n=null==e?0:e.length,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i}function It(e,t){for(var r=-1,n=t.length,i=e.length;++r<n;)e[i+r]=t[r];return e}function Ct(e,t,r,n){var i=-1,o=null==e?0:e.length;for(n&&o&&(r=e[++i]);++i<o;)r=t(r,e[i],i,e);return r}function jt(e,t,r,n){var i=null==e?0:e.length;for(n&&i&&(r=e[--i]);i--;)r=t(r,e[i],i,e);return r}function Lt(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}var Bt=qt("length");function Ut(e,t,r){var n;return r(e,(function(e,r,i){if(t(e,r,i))return n=r,!1})),n}function Nt(e,t,r,n){for(var i=e.length,o=r+(n?1:-1);n?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function $t(e,t,r){return t==t?function(e,t,r){for(var n=r-1,i=e.length;++n<i;)if(e[n]===t)return n;return-1}(e,t,r):Nt(e,Ft,r)}function Dt(e,t,r,n){for(var i=r-1,o=e.length;++i<o;)if(n(e[i],t))return i;return-1}function Ft(e){return e!=e}function zt(e,t){var r=null==e?0:e.length;return r?Vt(e,t)/r:d}function qt(e){return function(t){return null==t?i:t[e]}}function Ht(e){return function(t){return null==e?i:e[t]}}function Wt(e,t,r,n,i){return i(e,(function(e,i,o){r=n?(n=!1,e):t(r,e,i,o)})),r}function Vt(e,t){for(var r,n=-1,o=e.length;++n<o;){var a=t(e[n]);a!==i&&(r=r===i?a:r+a)}return r}function Gt(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}function Kt(e){return e?e.slice(0,lr(e)+1).replace(ne,""):e}function Zt(e){return function(t){return e(t)}}function Yt(e,t){return kt(t,(function(t){return e[t]}))}function Qt(e,t){return e.has(t)}function Xt(e,t){for(var r=-1,n=e.length;++r<n&&$t(t,e[r],0)>-1;);return r}function Jt(e,t){for(var r=e.length;r--&&$t(t,e[r],0)>-1;);return r}var er=Ht({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),tr=Ht({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function rr(e){return"\\"+at[e]}function nr(e){return et.test(e)}function ir(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}function or(e,t){return function(r){return e(t(r))}}function ar(e,t){for(var r=-1,n=e.length,i=0,o=[];++r<n;){var a=e[r];a!==t&&a!==s||(e[r]=s,o[i++]=r)}return o}function sr(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}function ur(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=[e,e]})),r}function cr(e){return nr(e)?function(e){for(var t=Xe.lastIndex=0;Xe.test(e);)++t;return t}(e):Bt(e)}function fr(e){return nr(e)?function(e){return e.match(Xe)||[]}(e):function(e){return e.split("")}(e)}function lr(e){for(var t=e.length;t--&&ie.test(e.charAt(t)););return t}var dr=Ht({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),hr=function e(t){var r,n=(t=null==t?lt:hr.defaults(lt.Object(),t,hr.pick(lt,rt))).Array,ie=t.Date,_e=t.Error,Se=t.Function,Ee=t.Math,Ae=t.Object,xe=t.RegExp,Re=t.String,Oe=t.TypeError,Te=n.prototype,Me=Se.prototype,Pe=Ae.prototype,ke=t["__core-js_shared__"],Ie=Me.toString,Ce=Pe.hasOwnProperty,je=0,Le=(r=/[^.]+$/.exec(ke&&ke.keys&&ke.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",Be=Pe.toString,Ue=Ie.call(Ae),Ne=lt._,$e=xe("^"+Ie.call(Ce).replace(te,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),De=pt?t.Buffer:i,Fe=t.Symbol,ze=t.Uint8Array,qe=De?De.allocUnsafe:i,He=or(Ae.getPrototypeOf,Ae),We=Ae.create,Ve=Pe.propertyIsEnumerable,Ge=Te.splice,Ke=Fe?Fe.isConcatSpreadable:i,Ze=Fe?Fe.iterator:i,Xe=Fe?Fe.toStringTag:i,et=function(){try{var e=uo(Ae,"defineProperty");return e({},"",{}),e}catch(e){}}(),at=t.clearTimeout!==lt.clearTimeout&&t.clearTimeout,ct=ie&&ie.now!==lt.Date.now&&ie.now,ft=t.setTimeout!==lt.setTimeout&&t.setTimeout,dt=Ee.ceil,ht=Ee.floor,yt=Ae.getOwnPropertySymbols,gt=De?De.isBuffer:i,Bt=t.isFinite,Ht=Te.join,pr=or(Ae.keys,Ae),yr=Ee.max,gr=Ee.min,vr=ie.now,mr=t.parseInt,br=Ee.random,wr=Te.reverse,_r=uo(t,"DataView"),Sr=uo(t,"Map"),Er=uo(t,"Promise"),Ar=uo(t,"Set"),xr=uo(t,"WeakMap"),Rr=uo(Ae,"create"),Or=xr&&new xr,Tr={},Mr=Uo(_r),Pr=Uo(Sr),kr=Uo(Er),Ir=Uo(Ar),Cr=Uo(xr),jr=Fe?Fe.prototype:i,Lr=jr?jr.valueOf:i,Br=jr?jr.toString:i;function Ur(e){if(es(e)&&!qa(e)&&!(e instanceof Fr)){if(e instanceof Dr)return e;if(Ce.call(e,"__wrapped__"))return No(e)}return new Dr(e)}var Nr=function(){function e(){}return function(t){if(!Ja(t))return{};if(We)return We(t);e.prototype=t;var r=new e;return e.prototype=i,r}}();function $r(){}function Dr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function Fr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=h,this.__views__=[]}function zr(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function qr(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Hr(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Wr(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new Hr;++t<r;)this.add(e[t])}function Vr(e){var t=this.__data__=new qr(e);this.size=t.size}function Gr(e,t){var r=qa(e),n=!r&&za(e),i=!r&&!n&&Ga(e),o=!r&&!n&&!i&&us(e),a=r||n||i||o,s=a?Gt(e.length,Re):[],u=s.length;for(var c in e)!t&&!Ce.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||go(c,u))||s.push(c);return s}function Kr(e){var t=e.length;return t?e[Wn(0,t-1)]:i}function Zr(e,t){return Io(Ri(e),on(t,0,e.length))}function Yr(e){return Io(Ri(e))}function Qr(e,t,r){(r!==i&&!$a(e[t],r)||r===i&&!(t in e))&&rn(e,t,r)}function Xr(e,t,r){var n=e[t];Ce.call(e,t)&&$a(n,r)&&(r!==i||t in e)||rn(e,t,r)}function Jr(e,t){for(var r=e.length;r--;)if($a(e[r][0],t))return r;return-1}function en(e,t,r,n){return fn(e,(function(e,i,o){t(n,e,r(e),o)})),n}function tn(e,t){return e&&Oi(t,Ps(t),e)}function rn(e,t,r){"__proto__"==t&&et?et(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}function nn(e,t){for(var r=-1,o=t.length,a=n(o),s=null==e;++r<o;)a[r]=s?i:xs(e,t[r]);return a}function on(e,t,r){return e==e&&(r!==i&&(e=e<=r?e:r),t!==i&&(e=e>=t?e:t)),e}function an(e,t,r,n,o,a){var s,u=1&t,c=2&t,f=4&t;if(r&&(s=o?r(e,n,o,a):r(e)),s!==i)return s;if(!Ja(e))return e;var l=qa(e);if(l){if(s=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&Ce.call(e,"index")&&(r.index=e.index,r.input=e.input),r}(e),!u)return Ri(e,s)}else{var d=lo(e),h=d==w||d==_;if(Ga(e))return wi(e,u);if(d==A||d==y||h&&!o){if(s=c||h?{}:po(e),!u)return c?function(e,t){return Oi(e,fo(e),t)}(e,function(e,t){return e&&Oi(t,ks(t),e)}(s,e)):function(e,t){return Oi(e,co(e),t)}(e,tn(s,e))}else{if(!ot[d])return o?e:{};s=function(e,t,r){var n,i=e.constructor;switch(t){case k:return _i(e);case v:case m:return new i(+e);case I:return function(e,t){var r=t?_i(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.byteLength)}(e,r);case C:case j:case L:case B:case U:case N:case $:case D:case F:return Si(e,r);case S:return new i;case E:case T:return new i(e);case R:return function(e){var t=new e.constructor(e.source,de.exec(e));return t.lastIndex=e.lastIndex,t}(e);case O:return new i;case M:return n=e,Lr?Ae(Lr.call(n)):{}}}(e,d,u)}}a||(a=new Vr);var p=a.get(e);if(p)return p;a.set(e,s),os(e)?e.forEach((function(n){s.add(an(n,t,r,n,e,a))})):ts(e)&&e.forEach((function(n,i){s.set(i,an(n,t,r,i,e,a))}));var g=l?i:(f?c?to:eo:c?ks:Ps)(e);return xt(g||e,(function(n,i){g&&(n=e[i=n]),Xr(s,i,an(n,t,r,i,e,a))})),s}function sn(e,t,r){var n=r.length;if(null==e)return!n;for(e=Ae(e);n--;){var o=r[n],a=t[o],s=e[o];if(s===i&&!(o in e)||!a(s))return!1}return!0}function un(e,t,r){if("function"!=typeof e)throw new Oe(o);return To((function(){e.apply(i,r)}),t)}function cn(e,t,r,n){var i=-1,o=Mt,a=!0,s=e.length,u=[],c=t.length;if(!s)return u;r&&(t=kt(t,Zt(r))),n?(o=Pt,a=!1):t.length>=200&&(o=Qt,a=!1,t=new Wr(t));e:for(;++i<s;){var f=e[i],l=null==r?f:r(f);if(f=n||0!==f?f:0,a&&l==l){for(var d=c;d--;)if(t[d]===l)continue e;u.push(f)}else o(t,l,n)||u.push(f)}return u}Ur.templateSettings={escape:Z,evaluate:Y,interpolate:Q,variable:"",imports:{_:Ur}},Ur.prototype=$r.prototype,Ur.prototype.constructor=Ur,Dr.prototype=Nr($r.prototype),Dr.prototype.constructor=Dr,Fr.prototype=Nr($r.prototype),Fr.prototype.constructor=Fr,zr.prototype.clear=function(){this.__data__=Rr?Rr(null):{},this.size=0},zr.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},zr.prototype.get=function(e){var t=this.__data__;if(Rr){var r=t[e];return r===a?i:r}return Ce.call(t,e)?t[e]:i},zr.prototype.has=function(e){var t=this.__data__;return Rr?t[e]!==i:Ce.call(t,e)},zr.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=Rr&&t===i?a:t,this},qr.prototype.clear=function(){this.__data__=[],this.size=0},qr.prototype.delete=function(e){var t=this.__data__,r=Jr(t,e);return!(r<0||(r==t.length-1?t.pop():Ge.call(t,r,1),--this.size,0))},qr.prototype.get=function(e){var t=this.__data__,r=Jr(t,e);return r<0?i:t[r][1]},qr.prototype.has=function(e){return Jr(this.__data__,e)>-1},qr.prototype.set=function(e,t){var r=this.__data__,n=Jr(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this},Hr.prototype.clear=function(){this.size=0,this.__data__={hash:new zr,map:new(Sr||qr),string:new zr}},Hr.prototype.delete=function(e){var t=ao(this,e).delete(e);return this.size-=t?1:0,t},Hr.prototype.get=function(e){return ao(this,e).get(e)},Hr.prototype.has=function(e){return ao(this,e).has(e)},Hr.prototype.set=function(e,t){var r=ao(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this},Wr.prototype.add=Wr.prototype.push=function(e){return this.__data__.set(e,a),this},Wr.prototype.has=function(e){return this.__data__.has(e)},Vr.prototype.clear=function(){this.__data__=new qr,this.size=0},Vr.prototype.delete=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r},Vr.prototype.get=function(e){return this.__data__.get(e)},Vr.prototype.has=function(e){return this.__data__.has(e)},Vr.prototype.set=function(e,t){var r=this.__data__;if(r instanceof qr){var n=r.__data__;if(!Sr||n.length<199)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new Hr(n)}return r.set(e,t),this.size=r.size,this};var fn=Pi(mn),ln=Pi(bn,!0);function dn(e,t){var r=!0;return fn(e,(function(e,n,i){return r=!!t(e,n,i)})),r}function hn(e,t,r){for(var n=-1,o=e.length;++n<o;){var a=e[n],s=t(a);if(null!=s&&(u===i?s==s&&!ss(s):r(s,u)))var u=s,c=a}return c}function pn(e,t){var r=[];return fn(e,(function(e,n,i){t(e,n,i)&&r.push(e)})),r}function yn(e,t,r,n,i){var o=-1,a=e.length;for(r||(r=yo),i||(i=[]);++o<a;){var s=e[o];t>0&&r(s)?t>1?yn(s,t-1,r,n,i):It(i,s):n||(i[i.length]=s)}return i}var gn=ki(),vn=ki(!0);function mn(e,t){return e&&gn(e,t,Ps)}function bn(e,t){return e&&vn(e,t,Ps)}function wn(e,t){return Tt(t,(function(t){return Ya(e[t])}))}function _n(e,t){for(var r=0,n=(t=gi(t,e)).length;null!=e&&r<n;)e=e[Bo(t[r++])];return r&&r==n?e:i}function Sn(e,t,r){var n=t(e);return qa(e)?n:It(n,r(e))}function En(e){return null==e?e===i?"[object Undefined]":"[object Null]":Xe&&Xe in Ae(e)?function(e){var t=Ce.call(e,Xe),r=e[Xe];try{e[Xe]=i;var n=!0}catch(e){}var o=Be.call(e);return n&&(t?e[Xe]=r:delete e[Xe]),o}(e):function(e){return Be.call(e)}(e)}function An(e,t){return e>t}function xn(e,t){return null!=e&&Ce.call(e,t)}function Rn(e,t){return null!=e&&t in Ae(e)}function On(e,t,r){for(var o=r?Pt:Mt,a=e[0].length,s=e.length,u=s,c=n(s),f=1/0,l=[];u--;){var d=e[u];u&&t&&(d=kt(d,Zt(t))),f=gr(d.length,f),c[u]=!r&&(t||a>=120&&d.length>=120)?new Wr(u&&d):i}d=e[0];var h=-1,p=c[0];e:for(;++h<a&&l.length<f;){var y=d[h],g=t?t(y):y;if(y=r||0!==y?y:0,!(p?Qt(p,g):o(l,g,r))){for(u=s;--u;){var v=c[u];if(!(v?Qt(v,g):o(e[u],g,r)))continue e}p&&p.push(g),l.push(y)}}return l}function Tn(e,t,r){var n=null==(e=xo(e,t=gi(t,e)))?e:e[Bo(Zo(t))];return null==n?i:Et(n,e,r)}function Mn(e){return es(e)&&En(e)==y}function Pn(e,t,r,n,o){return e===t||(null==e||null==t||!es(e)&&!es(t)?e!=e&&t!=t:function(e,t,r,n,o,a){var s=qa(e),u=qa(t),c=s?g:lo(e),f=u?g:lo(t),l=(c=c==y?A:c)==A,d=(f=f==y?A:f)==A,h=c==f;if(h&&Ga(e)){if(!Ga(t))return!1;s=!0,l=!1}if(h&&!l)return a||(a=new Vr),s||us(e)?Xi(e,t,r,n,o,a):function(e,t,r,n,i,o,a){switch(r){case I:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case k:return!(e.byteLength!=t.byteLength||!o(new ze(e),new ze(t)));case v:case m:case E:return $a(+e,+t);case b:return e.name==t.name&&e.message==t.message;case R:case T:return e==t+"";case S:var s=ir;case O:var u=1&n;if(s||(s=sr),e.size!=t.size&&!u)return!1;var c=a.get(e);if(c)return c==t;n|=2,a.set(e,t);var f=Xi(s(e),s(t),n,i,o,a);return a.delete(e),f;case M:if(Lr)return Lr.call(e)==Lr.call(t)}return!1}(e,t,c,r,n,o,a);if(!(1&r)){var p=l&&Ce.call(e,"__wrapped__"),w=d&&Ce.call(t,"__wrapped__");if(p||w){var _=p?e.value():e,x=w?t.value():t;return a||(a=new Vr),o(_,x,r,n,a)}}return!!h&&(a||(a=new Vr),function(e,t,r,n,o,a){var s=1&r,u=eo(e),c=u.length;if(c!=eo(t).length&&!s)return!1;for(var f=c;f--;){var l=u[f];if(!(s?l in t:Ce.call(t,l)))return!1}var d=a.get(e),h=a.get(t);if(d&&h)return d==t&&h==e;var p=!0;a.set(e,t),a.set(t,e);for(var y=s;++f<c;){var g=e[l=u[f]],v=t[l];if(n)var m=s?n(v,g,l,t,e,a):n(g,v,l,e,t,a);if(!(m===i?g===v||o(g,v,r,n,a):m)){p=!1;break}y||(y="constructor"==l)}if(p&&!y){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(p=!1)}return a.delete(e),a.delete(t),p}(e,t,r,n,o,a))}(e,t,r,n,Pn,o))}function kn(e,t,r,n){var o=r.length,a=o,s=!n;if(null==e)return!a;for(e=Ae(e);o--;){var u=r[o];if(s&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var c=(u=r[o])[0],f=e[c],l=u[1];if(s&&u[2]){if(f===i&&!(c in e))return!1}else{var d=new Vr;if(n)var h=n(f,l,c,e,t,d);if(!(h===i?Pn(l,f,3,n,d):h))return!1}}return!0}function In(e){return!(!Ja(e)||(t=e,Le&&Le in t))&&(Ya(e)?$e:ye).test(Uo(e));var t}function Cn(e){return"function"==typeof e?e:null==e?ru:"object"==typeof e?qa(e)?Nn(e[0],e[1]):Un(e):lu(e)}function jn(e){if(!_o(e))return pr(e);var t=[];for(var r in Ae(e))Ce.call(e,r)&&"constructor"!=r&&t.push(r);return t}function Ln(e,t){return e<t}function Bn(e,t){var r=-1,i=Wa(e)?n(e.length):[];return fn(e,(function(e,n,o){i[++r]=t(e,n,o)})),i}function Un(e){var t=so(e);return 1==t.length&&t[0][2]?Eo(t[0][0],t[0][1]):function(r){return r===e||kn(r,e,t)}}function Nn(e,t){return mo(e)&&So(t)?Eo(Bo(e),t):function(r){var n=xs(r,e);return n===i&&n===t?Rs(r,e):Pn(t,n,3)}}function $n(e,t,r,n,o){e!==t&&gn(t,(function(a,s){if(o||(o=new Vr),Ja(a))!function(e,t,r,n,o,a,s){var u=Ro(e,r),c=Ro(t,r),f=s.get(c);if(f)Qr(e,r,f);else{var l=a?a(u,c,r+"",e,t,s):i,d=l===i;if(d){var h=qa(c),p=!h&&Ga(c),y=!h&&!p&&us(c);l=c,h||p||y?qa(u)?l=u:Va(u)?l=Ri(u):p?(d=!1,l=wi(c,!0)):y?(d=!1,l=Si(c,!0)):l=[]:ns(c)||za(c)?(l=u,za(u)?l=gs(u):Ja(u)&&!Ya(u)||(l=po(c))):d=!1}d&&(s.set(c,l),o(l,c,n,a,s),s.delete(c)),Qr(e,r,l)}}(e,t,s,r,$n,n,o);else{var u=n?n(Ro(e,s),a,s+"",e,t,o):i;u===i&&(u=a),Qr(e,s,u)}}),ks)}function Dn(e,t){var r=e.length;if(r)return go(t+=t<0?r:0,r)?e[t]:i}function Fn(e,t,r){t=t.length?kt(t,(function(e){return qa(e)?function(t){return _n(t,1===e.length?e[0]:e)}:e})):[ru];var n=-1;t=kt(t,Zt(oo()));var i=Bn(e,(function(e,r,i){var o=kt(t,(function(t){return t(e)}));return{criteria:o,index:++n,value:e}}));return function(e,t){var n=e.length;for(e.sort((function(e,t){return function(e,t,r){for(var n=-1,i=e.criteria,o=t.criteria,a=i.length,s=r.length;++n<a;){var u=Ei(i[n],o[n]);if(u)return n>=s?u:u*("desc"==r[n]?-1:1)}return e.index-t.index}(e,t,r)}));n--;)e[n]=e[n].value;return e}(i)}function zn(e,t,r){for(var n=-1,i=t.length,o={};++n<i;){var a=t[n],s=_n(e,a);r(s,a)&&Yn(o,gi(a,e),s)}return o}function qn(e,t,r,n){var i=n?Dt:$t,o=-1,a=t.length,s=e;for(e===t&&(t=Ri(t)),r&&(s=kt(e,Zt(r)));++o<a;)for(var u=0,c=t[o],f=r?r(c):c;(u=i(s,f,u,n))>-1;)s!==e&&Ge.call(s,u,1),Ge.call(e,u,1);return e}function Hn(e,t){for(var r=e?t.length:0,n=r-1;r--;){var i=t[r];if(r==n||i!==o){var o=i;go(i)?Ge.call(e,i,1):ui(e,i)}}return e}function Wn(e,t){return e+ht(br()*(t-e+1))}function Vn(e,t){var r="";if(!e||t<1||t>l)return r;do{t%2&&(r+=e),(t=ht(t/2))&&(e+=e)}while(t);return r}function Gn(e,t){return Mo(Ao(e,t,ru),e+"")}function Kn(e){return Kr($s(e))}function Zn(e,t){var r=$s(e);return Io(r,on(t,0,r.length))}function Yn(e,t,r,n){if(!Ja(e))return e;for(var o=-1,a=(t=gi(t,e)).length,s=a-1,u=e;null!=u&&++o<a;){var c=Bo(t[o]),f=r;if("__proto__"===c||"constructor"===c||"prototype"===c)return e;if(o!=s){var l=u[c];(f=n?n(l,c,u):i)===i&&(f=Ja(l)?l:go(t[o+1])?[]:{})}Xr(u,c,f),u=u[c]}return e}var Qn=Or?function(e,t){return Or.set(e,t),e}:ru,Xn=et?function(e,t){return et(e,"toString",{configurable:!0,enumerable:!1,value:Js(t),writable:!0})}:ru;function Jn(e){return Io($s(e))}function ei(e,t,r){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(r=r>o?o:r)<0&&(r+=o),o=t>r?0:r-t>>>0,t>>>=0;for(var a=n(o);++i<o;)a[i]=e[i+t];return a}function ti(e,t){var r;return fn(e,(function(e,n,i){return!(r=t(e,n,i))})),!!r}function ri(e,t,r){var n=0,i=null==e?n:e.length;if("number"==typeof t&&t==t&&i<=2147483647){for(;n<i;){var o=n+i>>>1,a=e[o];null!==a&&!ss(a)&&(r?a<=t:a<t)?n=o+1:i=o}return i}return ni(e,t,ru,r)}function ni(e,t,r,n){var o=0,a=null==e?0:e.length;if(0===a)return 0;for(var s=(t=r(t))!=t,u=null===t,c=ss(t),f=t===i;o<a;){var l=ht((o+a)/2),d=r(e[l]),h=d!==i,p=null===d,y=d==d,g=ss(d);if(s)var v=n||y;else v=f?y&&(n||h):u?y&&h&&(n||!p):c?y&&h&&!p&&(n||!g):!p&&!g&&(n?d<=t:d<t);v?o=l+1:a=l}return gr(a,4294967294)}function ii(e,t){for(var r=-1,n=e.length,i=0,o=[];++r<n;){var a=e[r],s=t?t(a):a;if(!r||!$a(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function oi(e){return"number"==typeof e?e:ss(e)?d:+e}function ai(e){if("string"==typeof e)return e;if(qa(e))return kt(e,ai)+"";if(ss(e))return Br?Br.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function si(e,t,r){var n=-1,i=Mt,o=e.length,a=!0,s=[],u=s;if(r)a=!1,i=Pt;else if(o>=200){var c=t?null:Vi(e);if(c)return sr(c);a=!1,i=Qt,u=new Wr}else u=t?[]:s;e:for(;++n<o;){var f=e[n],l=t?t(f):f;if(f=r||0!==f?f:0,a&&l==l){for(var d=u.length;d--;)if(u[d]===l)continue e;t&&u.push(l),s.push(f)}else i(u,l,r)||(u!==s&&u.push(l),s.push(f))}return s}function ui(e,t){return null==(e=xo(e,t=gi(t,e)))||delete e[Bo(Zo(t))]}function ci(e,t,r,n){return Yn(e,t,r(_n(e,t)),n)}function fi(e,t,r,n){for(var i=e.length,o=n?i:-1;(n?o--:++o<i)&&t(e[o],o,e););return r?ei(e,n?0:o,n?o+1:i):ei(e,n?o+1:0,n?i:o)}function li(e,t){var r=e;return r instanceof Fr&&(r=r.value()),Ct(t,(function(e,t){return t.func.apply(t.thisArg,It([e],t.args))}),r)}function di(e,t,r){var i=e.length;if(i<2)return i?si(e[0]):[];for(var o=-1,a=n(i);++o<i;)for(var s=e[o],u=-1;++u<i;)u!=o&&(a[o]=cn(a[o]||s,e[u],t,r));return si(yn(a,1),t,r)}function hi(e,t,r){for(var n=-1,o=e.length,a=t.length,s={};++n<o;){var u=n<a?t[n]:i;r(s,e[n],u)}return s}function pi(e){return Va(e)?e:[]}function yi(e){return"function"==typeof e?e:ru}function gi(e,t){return qa(e)?e:mo(e,t)?[e]:Lo(vs(e))}var vi=Gn;function mi(e,t,r){var n=e.length;return r=r===i?n:r,!t&&r>=n?e:ei(e,t,r)}var bi=at||function(e){return lt.clearTimeout(e)};function wi(e,t){if(t)return e.slice();var r=e.length,n=qe?qe(r):new e.constructor(r);return e.copy(n),n}function _i(e){var t=new e.constructor(e.byteLength);return new ze(t).set(new ze(e)),t}function Si(e,t){var r=t?_i(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)}function Ei(e,t){if(e!==t){var r=e!==i,n=null===e,o=e==e,a=ss(e),s=t!==i,u=null===t,c=t==t,f=ss(t);if(!u&&!f&&!a&&e>t||a&&s&&c&&!u&&!f||n&&s&&c||!r&&c||!o)return 1;if(!n&&!a&&!f&&e<t||f&&r&&o&&!n&&!a||u&&r&&o||!s&&o||!c)return-1}return 0}function Ai(e,t,r,i){for(var o=-1,a=e.length,s=r.length,u=-1,c=t.length,f=yr(a-s,0),l=n(c+f),d=!i;++u<c;)l[u]=t[u];for(;++o<s;)(d||o<a)&&(l[r[o]]=e[o]);for(;f--;)l[u++]=e[o++];return l}function xi(e,t,r,i){for(var o=-1,a=e.length,s=-1,u=r.length,c=-1,f=t.length,l=yr(a-u,0),d=n(l+f),h=!i;++o<l;)d[o]=e[o];for(var p=o;++c<f;)d[p+c]=t[c];for(;++s<u;)(h||o<a)&&(d[p+r[s]]=e[o++]);return d}function Ri(e,t){var r=-1,i=e.length;for(t||(t=n(i));++r<i;)t[r]=e[r];return t}function Oi(e,t,r,n){var o=!r;r||(r={});for(var a=-1,s=t.length;++a<s;){var u=t[a],c=n?n(r[u],e[u],u,r,e):i;c===i&&(c=e[u]),o?rn(r,u,c):Xr(r,u,c)}return r}function Ti(e,t){return function(r,n){var i=qa(r)?At:en,o=t?t():{};return i(r,e,oo(n,2),o)}}function Mi(e){return Gn((function(t,r){var n=-1,o=r.length,a=o>1?r[o-1]:i,s=o>2?r[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,s&&vo(r[0],r[1],s)&&(a=o<3?i:a,o=1),t=Ae(t);++n<o;){var u=r[n];u&&e(t,u,n,a)}return t}))}function Pi(e,t){return function(r,n){if(null==r)return r;if(!Wa(r))return e(r,n);for(var i=r.length,o=t?i:-1,a=Ae(r);(t?o--:++o<i)&&!1!==n(a[o],o,a););return r}}function ki(e){return function(t,r,n){for(var i=-1,o=Ae(t),a=n(t),s=a.length;s--;){var u=a[e?s:++i];if(!1===r(o[u],u,o))break}return t}}function Ii(e){return function(t){var r=nr(t=vs(t))?fr(t):i,n=r?r[0]:t.charAt(0),o=r?mi(r,1).join(""):t.slice(1);return n[e]()+o}}function Ci(e){return function(t){return Ct(Ys(zs(t).replace(Ye,"")),e,"")}}function ji(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var r=Nr(e.prototype),n=e.apply(r,t);return Ja(n)?n:r}}function Li(e){return function(t,r,n){var o=Ae(t);if(!Wa(t)){var a=oo(r,3);t=Ps(t),r=function(e){return a(o[e],e,o)}}var s=e(t,r,n);return s>-1?o[a?t[s]:s]:i}}function Bi(e){return Ji((function(t){var r=t.length,n=r,a=Dr.prototype.thru;for(e&&t.reverse();n--;){var s=t[n];if("function"!=typeof s)throw new Oe(o);if(a&&!u&&"wrapper"==no(s))var u=new Dr([],!0)}for(n=u?n:r;++n<r;){var c=no(s=t[n]),f="wrapper"==c?ro(s):i;u=f&&bo(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?u[no(f[0])].apply(u,f[3]):1==s.length&&bo(s)?u[c]():u.thru(s)}return function(){var e=arguments,n=e[0];if(u&&1==e.length&&qa(n))return u.plant(n).value();for(var i=0,o=r?t[i].apply(this,e):n;++i<r;)o=t[i].call(this,o);return o}}))}function Ui(e,t,r,o,a,s,u,f,l,d){var h=t&c,p=1&t,y=2&t,g=24&t,v=512&t,m=y?i:ji(e);return function c(){for(var b=arguments.length,w=n(b),_=b;_--;)w[_]=arguments[_];if(g)var S=io(c),E=function(e,t){for(var r=e.length,n=0;r--;)e[r]===t&&++n;return n}(w,S);if(o&&(w=Ai(w,o,a,g)),s&&(w=xi(w,s,u,g)),b-=E,g&&b<d){var A=ar(w,S);return Hi(e,t,Ui,c.placeholder,r,w,A,f,l,d-b)}var x=p?r:this,R=y?x[e]:e;return b=w.length,f?w=function(e,t){for(var r=e.length,n=gr(t.length,r),o=Ri(e);n--;){var a=t[n];e[n]=go(a,r)?o[a]:i}return e}(w,f):v&&b>1&&w.reverse(),h&&l<b&&(w.length=l),this&&this!==lt&&this instanceof c&&(R=m||ji(R)),R.apply(x,w)}}function Ni(e,t){return function(r,n){return function(e,t,r,n){return mn(e,(function(e,i,o){t(n,r(e),i,o)})),n}(r,e,t(n),{})}}function $i(e,t){return function(r,n){var o;if(r===i&&n===i)return t;if(r!==i&&(o=r),n!==i){if(o===i)return n;"string"==typeof r||"string"==typeof n?(r=ai(r),n=ai(n)):(r=oi(r),n=oi(n)),o=e(r,n)}return o}}function Di(e){return Ji((function(t){return t=kt(t,Zt(oo())),Gn((function(r){var n=this;return e(t,(function(e){return Et(e,n,r)}))}))}))}function Fi(e,t){var r=(t=t===i?" ":ai(t)).length;if(r<2)return r?Vn(t,e):t;var n=Vn(t,dt(e/cr(t)));return nr(t)?mi(fr(n),0,e).join(""):n.slice(0,e)}function zi(e){return function(t,r,o){return o&&"number"!=typeof o&&vo(t,r,o)&&(r=o=i),t=ds(t),r===i?(r=t,t=0):r=ds(r),function(e,t,r,i){for(var o=-1,a=yr(dt((t-e)/(r||1)),0),s=n(a);a--;)s[i?a:++o]=e,e+=r;return s}(t,r,o=o===i?t<r?1:-1:ds(o),e)}}function qi(e){return function(t,r){return"string"==typeof t&&"string"==typeof r||(t=ys(t),r=ys(r)),e(t,r)}}function Hi(e,t,r,n,o,a,s,c,f,l){var d=8&t;t|=d?u:64,4&(t&=~(d?64:u))||(t&=-4);var h=[e,t,o,d?a:i,d?s:i,d?i:a,d?i:s,c,f,l],p=r.apply(i,h);return bo(e)&&Oo(p,h),p.placeholder=n,Po(p,e,t)}function Wi(e){var t=Ee[e];return function(e,r){if(e=ys(e),(r=null==r?0:gr(hs(r),292))&&Bt(e)){var n=(vs(e)+"e").split("e");return+((n=(vs(t(n[0]+"e"+(+n[1]+r)))+"e").split("e"))[0]+"e"+(+n[1]-r))}return t(e)}}var Vi=Ar&&1/sr(new Ar([,-0]))[1]==f?function(e){return new Ar(e)}:su;function Gi(e){return function(t){var r=lo(t);return r==S?ir(t):r==O?ur(t):function(e,t){return kt(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function Ki(e,t,r,a,f,l,d,h){var p=2&t;if(!p&&"function"!=typeof e)throw new Oe(o);var y=a?a.length:0;if(y||(t&=-97,a=f=i),d=d===i?d:yr(hs(d),0),h=h===i?h:hs(h),y-=f?f.length:0,64&t){var g=a,v=f;a=f=i}var m=p?i:ro(e),b=[e,t,r,a,f,g,v,l,d,h];if(m&&function(e,t){var r=e[1],n=t[1],i=r|n,o=i<131,a=n==c&&8==r||n==c&&256==r&&e[7].length<=t[8]||384==n&&t[7].length<=t[8]&&8==r;if(!o&&!a)return e;1&n&&(e[2]=t[2],i|=1&r?0:4);var u=t[3];if(u){var f=e[3];e[3]=f?Ai(f,u,t[4]):u,e[4]=f?ar(e[3],s):t[4]}(u=t[5])&&(f=e[5],e[5]=f?xi(f,u,t[6]):u,e[6]=f?ar(e[5],s):t[6]),(u=t[7])&&(e[7]=u),n&c&&(e[8]=null==e[8]?t[8]:gr(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=i}(b,m),e=b[0],t=b[1],r=b[2],a=b[3],f=b[4],!(h=b[9]=b[9]===i?p?0:e.length:yr(b[9]-y,0))&&24&t&&(t&=-25),t&&1!=t)w=8==t||16==t?function(e,t,r){var o=ji(e);return function a(){for(var s=arguments.length,u=n(s),c=s,f=io(a);c--;)u[c]=arguments[c];var l=s<3&&u[0]!==f&&u[s-1]!==f?[]:ar(u,f);return(s-=l.length)<r?Hi(e,t,Ui,a.placeholder,i,u,l,i,i,r-s):Et(this&&this!==lt&&this instanceof a?o:e,this,u)}}(e,t,h):t!=u&&33!=t||f.length?Ui.apply(i,b):function(e,t,r,i){var o=1&t,a=ji(e);return function t(){for(var s=-1,u=arguments.length,c=-1,f=i.length,l=n(f+u),d=this&&this!==lt&&this instanceof t?a:e;++c<f;)l[c]=i[c];for(;u--;)l[c++]=arguments[++s];return Et(d,o?r:this,l)}}(e,t,r,a);else var w=function(e,t,r){var n=1&t,i=ji(e);return function t(){return(this&&this!==lt&&this instanceof t?i:e).apply(n?r:this,arguments)}}(e,t,r);return Po((m?Qn:Oo)(w,b),e,t)}function Zi(e,t,r,n){return e===i||$a(e,Pe[r])&&!Ce.call(n,r)?t:e}function Yi(e,t,r,n,o,a){return Ja(e)&&Ja(t)&&(a.set(t,e),$n(e,t,i,Yi,a),a.delete(t)),e}function Qi(e){return ns(e)?i:e}function Xi(e,t,r,n,o,a){var s=1&r,u=e.length,c=t.length;if(u!=c&&!(s&&c>u))return!1;var f=a.get(e),l=a.get(t);if(f&&l)return f==t&&l==e;var d=-1,h=!0,p=2&r?new Wr:i;for(a.set(e,t),a.set(t,e);++d<u;){var y=e[d],g=t[d];if(n)var v=s?n(g,y,d,t,e,a):n(y,g,d,e,t,a);if(v!==i){if(v)continue;h=!1;break}if(p){if(!Lt(t,(function(e,t){if(!Qt(p,t)&&(y===e||o(y,e,r,n,a)))return p.push(t)}))){h=!1;break}}else if(y!==g&&!o(y,g,r,n,a)){h=!1;break}}return a.delete(e),a.delete(t),h}function Ji(e){return Mo(Ao(e,i,Ho),e+"")}function eo(e){return Sn(e,Ps,co)}function to(e){return Sn(e,ks,fo)}var ro=Or?function(e){return Or.get(e)}:su;function no(e){for(var t=e.name+"",r=Tr[t],n=Ce.call(Tr,t)?r.length:0;n--;){var i=r[n],o=i.func;if(null==o||o==e)return i.name}return t}function io(e){return(Ce.call(Ur,"placeholder")?Ur:e).placeholder}function oo(){var e=Ur.iteratee||nu;return e=e===nu?Cn:e,arguments.length?e(arguments[0],arguments[1]):e}function ao(e,t){var r,n,i=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof t?"string":"hash"]:i.map}function so(e){for(var t=Ps(e),r=t.length;r--;){var n=t[r],i=e[n];t[r]=[n,i,So(i)]}return t}function uo(e,t){var r=function(e,t){return null==e?i:e[t]}(e,t);return In(r)?r:i}var co=yt?function(e){return null==e?[]:(e=Ae(e),Tt(yt(e),(function(t){return Ve.call(e,t)})))}:pu,fo=yt?function(e){for(var t=[];e;)It(t,co(e)),e=He(e);return t}:pu,lo=En;function ho(e,t,r){for(var n=-1,i=(t=gi(t,e)).length,o=!1;++n<i;){var a=Bo(t[n]);if(!(o=null!=e&&r(e,a)))break;e=e[a]}return o||++n!=i?o:!!(i=null==e?0:e.length)&&Xa(i)&&go(a,i)&&(qa(e)||za(e))}function po(e){return"function"!=typeof e.constructor||_o(e)?{}:Nr(He(e))}function yo(e){return qa(e)||za(e)||!!(Ke&&e&&e[Ke])}function go(e,t){var r=typeof e;return!!(t=null==t?l:t)&&("number"==r||"symbol"!=r&&ve.test(e))&&e>-1&&e%1==0&&e<t}function vo(e,t,r){if(!Ja(r))return!1;var n=typeof t;return!!("number"==n?Wa(r)&&go(t,r.length):"string"==n&&t in r)&&$a(r[t],e)}function mo(e,t){if(qa(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!ss(e))||J.test(e)||!X.test(e)||null!=t&&e in Ae(t)}function bo(e){var t=no(e),r=Ur[t];if("function"!=typeof r||!(t in Fr.prototype))return!1;if(e===r)return!0;var n=ro(r);return!!n&&e===n[0]}(_r&&lo(new _r(new ArrayBuffer(1)))!=I||Sr&&lo(new Sr)!=S||Er&&lo(Er.resolve())!=x||Ar&&lo(new Ar)!=O||xr&&lo(new xr)!=P)&&(lo=function(e){var t=En(e),r=t==A?e.constructor:i,n=r?Uo(r):"";if(n)switch(n){case Mr:return I;case Pr:return S;case kr:return x;case Ir:return O;case Cr:return P}return t});var wo=ke?Ya:yu;function _o(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Pe)}function So(e){return e==e&&!Ja(e)}function Eo(e,t){return function(r){return null!=r&&r[e]===t&&(t!==i||e in Ae(r))}}function Ao(e,t,r){return t=yr(t===i?e.length-1:t,0),function(){for(var i=arguments,o=-1,a=yr(i.length-t,0),s=n(a);++o<a;)s[o]=i[t+o];o=-1;for(var u=n(t+1);++o<t;)u[o]=i[o];return u[t]=r(s),Et(e,this,u)}}function xo(e,t){return t.length<2?e:_n(e,ei(t,0,-1))}function Ro(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var Oo=ko(Qn),To=ft||function(e,t){return lt.setTimeout(e,t)},Mo=ko(Xn);function Po(e,t,r){var n=t+"";return Mo(e,function(e,t){var r=t.length;if(!r)return e;var n=r-1;return t[n]=(r>1?"& ":"")+t[n],t=t.join(r>2?", ":" "),e.replace(oe,"{\n/* [wrapped with "+t+"] */\n")}(n,function(e,t){return xt(p,(function(r){var n="_."+r[0];t&r[1]&&!Mt(e,n)&&e.push(n)})),e.sort()}(function(e){var t=e.match(ae);return t?t[1].split(se):[]}(n),r)))}function ko(e){var t=0,r=0;return function(){var n=vr(),o=16-(n-r);if(r=n,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(i,arguments)}}function Io(e,t){var r=-1,n=e.length,o=n-1;for(t=t===i?n:t;++r<t;){var a=Wn(r,o),s=e[a];e[a]=e[r],e[r]=s}return e.length=t,e}var Co,jo,Lo=(Co=Ca((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ee,(function(e,r,n,i){t.push(n?i.replace(fe,"$1"):r||e)})),t}),(function(e){return 500===jo.size&&jo.clear(),e})),jo=Co.cache,Co);function Bo(e){if("string"==typeof e||ss(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Uo(e){if(null!=e){try{return Ie.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function No(e){if(e instanceof Fr)return e.clone();var t=new Dr(e.__wrapped__,e.__chain__);return t.__actions__=Ri(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var $o=Gn((function(e,t){return Va(e)?cn(e,yn(t,1,Va,!0)):[]})),Do=Gn((function(e,t){var r=Zo(t);return Va(r)&&(r=i),Va(e)?cn(e,yn(t,1,Va,!0),oo(r,2)):[]})),Fo=Gn((function(e,t){var r=Zo(t);return Va(r)&&(r=i),Va(e)?cn(e,yn(t,1,Va,!0),i,r):[]}));function zo(e,t,r){var n=null==e?0:e.length;if(!n)return-1;var i=null==r?0:hs(r);return i<0&&(i=yr(n+i,0)),Nt(e,oo(t,3),i)}function qo(e,t,r){var n=null==e?0:e.length;if(!n)return-1;var o=n-1;return r!==i&&(o=hs(r),o=r<0?yr(n+o,0):gr(o,n-1)),Nt(e,oo(t,3),o,!0)}function Ho(e){return null!=e&&e.length?yn(e,1):[]}function Wo(e){return e&&e.length?e[0]:i}var Vo=Gn((function(e){var t=kt(e,pi);return t.length&&t[0]===e[0]?On(t):[]})),Go=Gn((function(e){var t=Zo(e),r=kt(e,pi);return t===Zo(r)?t=i:r.pop(),r.length&&r[0]===e[0]?On(r,oo(t,2)):[]})),Ko=Gn((function(e){var t=Zo(e),r=kt(e,pi);return(t="function"==typeof t?t:i)&&r.pop(),r.length&&r[0]===e[0]?On(r,i,t):[]}));function Zo(e){var t=null==e?0:e.length;return t?e[t-1]:i}var Yo=Gn(Qo);function Qo(e,t){return e&&e.length&&t&&t.length?qn(e,t):e}var Xo=Ji((function(e,t){var r=null==e?0:e.length,n=nn(e,t);return Hn(e,kt(t,(function(e){return go(e,r)?+e:e})).sort(Ei)),n}));function Jo(e){return null==e?e:wr.call(e)}var ea=Gn((function(e){return si(yn(e,1,Va,!0))})),ta=Gn((function(e){var t=Zo(e);return Va(t)&&(t=i),si(yn(e,1,Va,!0),oo(t,2))})),ra=Gn((function(e){var t=Zo(e);return t="function"==typeof t?t:i,si(yn(e,1,Va,!0),i,t)}));function na(e){if(!e||!e.length)return[];var t=0;return e=Tt(e,(function(e){if(Va(e))return t=yr(e.length,t),!0})),Gt(t,(function(t){return kt(e,qt(t))}))}function ia(e,t){if(!e||!e.length)return[];var r=na(e);return null==t?r:kt(r,(function(e){return Et(t,i,e)}))}var oa=Gn((function(e,t){return Va(e)?cn(e,t):[]})),aa=Gn((function(e){return di(Tt(e,Va))})),sa=Gn((function(e){var t=Zo(e);return Va(t)&&(t=i),di(Tt(e,Va),oo(t,2))})),ua=Gn((function(e){var t=Zo(e);return t="function"==typeof t?t:i,di(Tt(e,Va),i,t)})),ca=Gn(na),fa=Gn((function(e){var t=e.length,r=t>1?e[t-1]:i;return r="function"==typeof r?(e.pop(),r):i,ia(e,r)}));function la(e){var t=Ur(e);return t.__chain__=!0,t}function da(e,t){return t(e)}var ha=Ji((function(e){var t=e.length,r=t?e[0]:0,n=this.__wrapped__,o=function(t){return nn(t,e)};return!(t>1||this.__actions__.length)&&n instanceof Fr&&go(r)?((n=n.slice(r,+r+(t?1:0))).__actions__.push({func:da,args:[o],thisArg:i}),new Dr(n,this.__chain__).thru((function(e){return t&&!e.length&&e.push(i),e}))):this.thru(o)})),pa=Ti((function(e,t,r){Ce.call(e,r)?++e[r]:rn(e,r,1)})),ya=Li(zo),ga=Li(qo);function va(e,t){return(qa(e)?xt:fn)(e,oo(t,3))}function ma(e,t){return(qa(e)?Rt:ln)(e,oo(t,3))}var ba=Ti((function(e,t,r){Ce.call(e,r)?e[r].push(t):rn(e,r,[t])})),wa=Gn((function(e,t,r){var i=-1,o="function"==typeof t,a=Wa(e)?n(e.length):[];return fn(e,(function(e){a[++i]=o?Et(t,e,r):Tn(e,t,r)})),a})),_a=Ti((function(e,t,r){rn(e,r,t)}));function Sa(e,t){return(qa(e)?kt:Bn)(e,oo(t,3))}var Ea=Ti((function(e,t,r){e[r?0:1].push(t)}),(function(){return[[],[]]})),Aa=Gn((function(e,t){if(null==e)return[];var r=t.length;return r>1&&vo(e,t[0],t[1])?t=[]:r>2&&vo(t[0],t[1],t[2])&&(t=[t[0]]),Fn(e,yn(t,1),[])})),xa=ct||function(){return lt.Date.now()};function Ra(e,t,r){return t=r?i:t,t=e&&null==t?e.length:t,Ki(e,c,i,i,i,i,t)}function Oa(e,t){var r;if("function"!=typeof t)throw new Oe(o);return e=hs(e),function(){return--e>0&&(r=t.apply(this,arguments)),e<=1&&(t=i),r}}var Ta=Gn((function(e,t,r){var n=1;if(r.length){var i=ar(r,io(Ta));n|=u}return Ki(e,n,t,r,i)})),Ma=Gn((function(e,t,r){var n=3;if(r.length){var i=ar(r,io(Ma));n|=u}return Ki(t,n,e,r,i)}));function Pa(e,t,r){var n,a,s,u,c,f,l=0,d=!1,h=!1,p=!0;if("function"!=typeof e)throw new Oe(o);function y(t){var r=n,o=a;return n=a=i,l=t,u=e.apply(o,r)}function g(e){var r=e-f;return f===i||r>=t||r<0||h&&e-l>=s}function v(){var e=xa();if(g(e))return m(e);c=To(v,function(e){var r=t-(e-f);return h?gr(r,s-(e-l)):r}(e))}function m(e){return c=i,p&&n?y(e):(n=a=i,u)}function b(){var e=xa(),r=g(e);if(n=arguments,a=this,f=e,r){if(c===i)return function(e){return l=e,c=To(v,t),d?y(e):u}(f);if(h)return bi(c),c=To(v,t),y(f)}return c===i&&(c=To(v,t)),u}return t=ys(t)||0,Ja(r)&&(d=!!r.leading,s=(h="maxWait"in r)?yr(ys(r.maxWait)||0,t):s,p="trailing"in r?!!r.trailing:p),b.cancel=function(){c!==i&&bi(c),l=0,n=f=a=c=i},b.flush=function(){return c===i?u:m(xa())},b}var ka=Gn((function(e,t){return un(e,1,t)})),Ia=Gn((function(e,t,r){return un(e,ys(t)||0,r)}));function Ca(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new Oe(o);var r=function(){var n=arguments,i=t?t.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var a=e.apply(this,n);return r.cache=o.set(i,a)||o,a};return r.cache=new(Ca.Cache||Hr),r}function ja(e){if("function"!=typeof e)throw new Oe(o);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}Ca.Cache=Hr;var La=vi((function(e,t){var r=(t=1==t.length&&qa(t[0])?kt(t[0],Zt(oo())):kt(yn(t,1),Zt(oo()))).length;return Gn((function(n){for(var i=-1,o=gr(n.length,r);++i<o;)n[i]=t[i].call(this,n[i]);return Et(e,this,n)}))})),Ba=Gn((function(e,t){var r=ar(t,io(Ba));return Ki(e,u,i,t,r)})),Ua=Gn((function(e,t){var r=ar(t,io(Ua));return Ki(e,64,i,t,r)})),Na=Ji((function(e,t){return Ki(e,256,i,i,i,t)}));function $a(e,t){return e===t||e!=e&&t!=t}var Da=qi(An),Fa=qi((function(e,t){return e>=t})),za=Mn(function(){return arguments}())?Mn:function(e){return es(e)&&Ce.call(e,"callee")&&!Ve.call(e,"callee")},qa=n.isArray,Ha=vt?Zt(vt):function(e){return es(e)&&En(e)==k};function Wa(e){return null!=e&&Xa(e.length)&&!Ya(e)}function Va(e){return es(e)&&Wa(e)}var Ga=gt||yu,Ka=mt?Zt(mt):function(e){return es(e)&&En(e)==m};function Za(e){if(!es(e))return!1;var t=En(e);return t==b||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!ns(e)}function Ya(e){if(!Ja(e))return!1;var t=En(e);return t==w||t==_||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Qa(e){return"number"==typeof e&&e==hs(e)}function Xa(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=l}function Ja(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function es(e){return null!=e&&"object"==typeof e}var ts=bt?Zt(bt):function(e){return es(e)&&lo(e)==S};function rs(e){return"number"==typeof e||es(e)&&En(e)==E}function ns(e){if(!es(e)||En(e)!=A)return!1;var t=He(e);if(null===t)return!0;var r=Ce.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Ie.call(r)==Ue}var is=wt?Zt(wt):function(e){return es(e)&&En(e)==R},os=_t?Zt(_t):function(e){return es(e)&&lo(e)==O};function as(e){return"string"==typeof e||!qa(e)&&es(e)&&En(e)==T}function ss(e){return"symbol"==typeof e||es(e)&&En(e)==M}var us=St?Zt(St):function(e){return es(e)&&Xa(e.length)&&!!it[En(e)]},cs=qi(Ln),fs=qi((function(e,t){return e<=t}));function ls(e){if(!e)return[];if(Wa(e))return as(e)?fr(e):Ri(e);if(Ze&&e[Ze])return function(e){for(var t,r=[];!(t=e.next()).done;)r.push(t.value);return r}(e[Ze]());var t=lo(e);return(t==S?ir:t==O?sr:$s)(e)}function ds(e){return e?(e=ys(e))===f||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function hs(e){var t=ds(e),r=t%1;return t==t?r?t-r:t:0}function ps(e){return e?on(hs(e),0,h):0}function ys(e){if("number"==typeof e)return e;if(ss(e))return d;if(Ja(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ja(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=Kt(e);var r=pe.test(e);return r||ge.test(e)?ut(e.slice(2),r?2:8):he.test(e)?d:+e}function gs(e){return Oi(e,ks(e))}function vs(e){return null==e?"":ai(e)}var ms=Mi((function(e,t){if(_o(t)||Wa(t))Oi(t,Ps(t),e);else for(var r in t)Ce.call(t,r)&&Xr(e,r,t[r])})),bs=Mi((function(e,t){Oi(t,ks(t),e)})),ws=Mi((function(e,t,r,n){Oi(t,ks(t),e,n)})),_s=Mi((function(e,t,r,n){Oi(t,Ps(t),e,n)})),Ss=Ji(nn),Es=Gn((function(e,t){e=Ae(e);var r=-1,n=t.length,o=n>2?t[2]:i;for(o&&vo(t[0],t[1],o)&&(n=1);++r<n;)for(var a=t[r],s=ks(a),u=-1,c=s.length;++u<c;){var f=s[u],l=e[f];(l===i||$a(l,Pe[f])&&!Ce.call(e,f))&&(e[f]=a[f])}return e})),As=Gn((function(e){return e.push(i,Yi),Et(Cs,i,e)}));function xs(e,t,r){var n=null==e?i:_n(e,t);return n===i?r:n}function Rs(e,t){return null!=e&&ho(e,t,Rn)}var Os=Ni((function(e,t,r){null!=t&&"function"!=typeof t.toString&&(t=Be.call(t)),e[t]=r}),Js(ru)),Ts=Ni((function(e,t,r){null!=t&&"function"!=typeof t.toString&&(t=Be.call(t)),Ce.call(e,t)?e[t].push(r):e[t]=[r]}),oo),Ms=Gn(Tn);function Ps(e){return Wa(e)?Gr(e):jn(e)}function ks(e){return Wa(e)?Gr(e,!0):function(e){if(!Ja(e))return function(e){var t=[];if(null!=e)for(var r in Ae(e))t.push(r);return t}(e);var t=_o(e),r=[];for(var n in e)("constructor"!=n||!t&&Ce.call(e,n))&&r.push(n);return r}(e)}var Is=Mi((function(e,t,r){$n(e,t,r)})),Cs=Mi((function(e,t,r,n){$n(e,t,r,n)})),js=Ji((function(e,t){var r={};if(null==e)return r;var n=!1;t=kt(t,(function(t){return t=gi(t,e),n||(n=t.length>1),t})),Oi(e,to(e),r),n&&(r=an(r,7,Qi));for(var i=t.length;i--;)ui(r,t[i]);return r})),Ls=Ji((function(e,t){return null==e?{}:function(e,t){return zn(e,t,(function(t,r){return Rs(e,r)}))}(e,t)}));function Bs(e,t){if(null==e)return{};var r=kt(to(e),(function(e){return[e]}));return t=oo(t),zn(e,r,(function(e,r){return t(e,r[0])}))}var Us=Gi(Ps),Ns=Gi(ks);function $s(e){return null==e?[]:Yt(e,Ps(e))}var Ds=Ci((function(e,t,r){return t=t.toLowerCase(),e+(r?Fs(t):t)}));function Fs(e){return Zs(vs(e).toLowerCase())}function zs(e){return(e=vs(e))&&e.replace(me,er).replace(Qe,"")}var qs=Ci((function(e,t,r){return e+(r?"-":"")+t.toLowerCase()})),Hs=Ci((function(e,t,r){return e+(r?" ":"")+t.toLowerCase()})),Ws=Ii("toLowerCase"),Vs=Ci((function(e,t,r){return e+(r?"_":"")+t.toLowerCase()})),Gs=Ci((function(e,t,r){return e+(r?" ":"")+Zs(t)})),Ks=Ci((function(e,t,r){return e+(r?" ":"")+t.toUpperCase()})),Zs=Ii("toUpperCase");function Ys(e,t,r){return e=vs(e),(t=r?i:t)===i?function(e){return tt.test(e)}(e)?function(e){return e.match(Je)||[]}(e):function(e){return e.match(ue)||[]}(e):e.match(t)||[]}var Qs=Gn((function(e,t){try{return Et(e,i,t)}catch(e){return Za(e)?e:new _e(e)}})),Xs=Ji((function(e,t){return xt(t,(function(t){t=Bo(t),rn(e,t,Ta(e[t],e))})),e}));function Js(e){return function(){return e}}var eu=Bi(),tu=Bi(!0);function ru(e){return e}function nu(e){return Cn("function"==typeof e?e:an(e,1))}var iu=Gn((function(e,t){return function(r){return Tn(r,e,t)}})),ou=Gn((function(e,t){return function(r){return Tn(e,r,t)}}));function au(e,t,r){var n=Ps(t),i=wn(t,n);null!=r||Ja(t)&&(i.length||!n.length)||(r=t,t=e,e=this,i=wn(t,Ps(t)));var o=!(Ja(r)&&"chain"in r&&!r.chain),a=Ya(e);return xt(i,(function(r){var n=t[r];e[r]=n,a&&(e.prototype[r]=function(){var t=this.__chain__;if(o||t){var r=e(this.__wrapped__);return(r.__actions__=Ri(this.__actions__)).push({func:n,args:arguments,thisArg:e}),r.__chain__=t,r}return n.apply(e,It([this.value()],arguments))})})),e}function su(){}var uu=Di(kt),cu=Di(Ot),fu=Di(Lt);function lu(e){return mo(e)?qt(Bo(e)):function(e){return function(t){return _n(t,e)}}(e)}var du=zi(),hu=zi(!0);function pu(){return[]}function yu(){return!1}var gu,vu=$i((function(e,t){return e+t}),0),mu=Wi("ceil"),bu=$i((function(e,t){return e/t}),1),wu=Wi("floor"),_u=$i((function(e,t){return e*t}),1),Su=Wi("round"),Eu=$i((function(e,t){return e-t}),0);return Ur.after=function(e,t){if("function"!=typeof t)throw new Oe(o);return e=hs(e),function(){if(--e<1)return t.apply(this,arguments)}},Ur.ary=Ra,Ur.assign=ms,Ur.assignIn=bs,Ur.assignInWith=ws,Ur.assignWith=_s,Ur.at=Ss,Ur.before=Oa,Ur.bind=Ta,Ur.bindAll=Xs,Ur.bindKey=Ma,Ur.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return qa(e)?e:[e]},Ur.chain=la,Ur.chunk=function(e,t,r){t=(r?vo(e,t,r):t===i)?1:yr(hs(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var a=0,s=0,u=n(dt(o/t));a<o;)u[s++]=ei(e,a,a+=t);return u},Ur.compact=function(e){for(var t=-1,r=null==e?0:e.length,n=0,i=[];++t<r;){var o=e[t];o&&(i[n++]=o)}return i},Ur.concat=function(){var e=arguments.length;if(!e)return[];for(var t=n(e-1),r=arguments[0],i=e;i--;)t[i-1]=arguments[i];return It(qa(r)?Ri(r):[r],yn(t,1))},Ur.cond=function(e){var t=null==e?0:e.length,r=oo();return e=t?kt(e,(function(e){if("function"!=typeof e[1])throw new Oe(o);return[r(e[0]),e[1]]})):[],Gn((function(r){for(var n=-1;++n<t;){var i=e[n];if(Et(i[0],this,r))return Et(i[1],this,r)}}))},Ur.conforms=function(e){return function(e){var t=Ps(e);return function(r){return sn(r,e,t)}}(an(e,1))},Ur.constant=Js,Ur.countBy=pa,Ur.create=function(e,t){var r=Nr(e);return null==t?r:tn(r,t)},Ur.curry=function e(t,r,n){var o=Ki(t,8,i,i,i,i,i,r=n?i:r);return o.placeholder=e.placeholder,o},Ur.curryRight=function e(t,r,n){var o=Ki(t,16,i,i,i,i,i,r=n?i:r);return o.placeholder=e.placeholder,o},Ur.debounce=Pa,Ur.defaults=Es,Ur.defaultsDeep=As,Ur.defer=ka,Ur.delay=Ia,Ur.difference=$o,Ur.differenceBy=Do,Ur.differenceWith=Fo,Ur.drop=function(e,t,r){var n=null==e?0:e.length;return n?ei(e,(t=r||t===i?1:hs(t))<0?0:t,n):[]},Ur.dropRight=function(e,t,r){var n=null==e?0:e.length;return n?ei(e,0,(t=n-(t=r||t===i?1:hs(t)))<0?0:t):[]},Ur.dropRightWhile=function(e,t){return e&&e.length?fi(e,oo(t,3),!0,!0):[]},Ur.dropWhile=function(e,t){return e&&e.length?fi(e,oo(t,3),!0):[]},Ur.fill=function(e,t,r,n){var o=null==e?0:e.length;return o?(r&&"number"!=typeof r&&vo(e,t,r)&&(r=0,n=o),function(e,t,r,n){var o=e.length;for((r=hs(r))<0&&(r=-r>o?0:o+r),(n=n===i||n>o?o:hs(n))<0&&(n+=o),n=r>n?0:ps(n);r<n;)e[r++]=t;return e}(e,t,r,n)):[]},Ur.filter=function(e,t){return(qa(e)?Tt:pn)(e,oo(t,3))},Ur.flatMap=function(e,t){return yn(Sa(e,t),1)},Ur.flatMapDeep=function(e,t){return yn(Sa(e,t),f)},Ur.flatMapDepth=function(e,t,r){return r=r===i?1:hs(r),yn(Sa(e,t),r)},Ur.flatten=Ho,Ur.flattenDeep=function(e){return null!=e&&e.length?yn(e,f):[]},Ur.flattenDepth=function(e,t){return null!=e&&e.length?yn(e,t=t===i?1:hs(t)):[]},Ur.flip=function(e){return Ki(e,512)},Ur.flow=eu,Ur.flowRight=tu,Ur.fromPairs=function(e){for(var t=-1,r=null==e?0:e.length,n={};++t<r;){var i=e[t];n[i[0]]=i[1]}return n},Ur.functions=function(e){return null==e?[]:wn(e,Ps(e))},Ur.functionsIn=function(e){return null==e?[]:wn(e,ks(e))},Ur.groupBy=ba,Ur.initial=function(e){return null!=e&&e.length?ei(e,0,-1):[]},Ur.intersection=Vo,Ur.intersectionBy=Go,Ur.intersectionWith=Ko,Ur.invert=Os,Ur.invertBy=Ts,Ur.invokeMap=wa,Ur.iteratee=nu,Ur.keyBy=_a,Ur.keys=Ps,Ur.keysIn=ks,Ur.map=Sa,Ur.mapKeys=function(e,t){var r={};return t=oo(t,3),mn(e,(function(e,n,i){rn(r,t(e,n,i),e)})),r},Ur.mapValues=function(e,t){var r={};return t=oo(t,3),mn(e,(function(e,n,i){rn(r,n,t(e,n,i))})),r},Ur.matches=function(e){return Un(an(e,1))},Ur.matchesProperty=function(e,t){return Nn(e,an(t,1))},Ur.memoize=Ca,Ur.merge=Is,Ur.mergeWith=Cs,Ur.method=iu,Ur.methodOf=ou,Ur.mixin=au,Ur.negate=ja,Ur.nthArg=function(e){return e=hs(e),Gn((function(t){return Dn(t,e)}))},Ur.omit=js,Ur.omitBy=function(e,t){return Bs(e,ja(oo(t)))},Ur.once=function(e){return Oa(2,e)},Ur.orderBy=function(e,t,r,n){return null==e?[]:(qa(t)||(t=null==t?[]:[t]),qa(r=n?i:r)||(r=null==r?[]:[r]),Fn(e,t,r))},Ur.over=uu,Ur.overArgs=La,Ur.overEvery=cu,Ur.overSome=fu,Ur.partial=Ba,Ur.partialRight=Ua,Ur.partition=Ea,Ur.pick=Ls,Ur.pickBy=Bs,Ur.property=lu,Ur.propertyOf=function(e){return function(t){return null==e?i:_n(e,t)}},Ur.pull=Yo,Ur.pullAll=Qo,Ur.pullAllBy=function(e,t,r){return e&&e.length&&t&&t.length?qn(e,t,oo(r,2)):e},Ur.pullAllWith=function(e,t,r){return e&&e.length&&t&&t.length?qn(e,t,i,r):e},Ur.pullAt=Xo,Ur.range=du,Ur.rangeRight=hu,Ur.rearg=Na,Ur.reject=function(e,t){return(qa(e)?Tt:pn)(e,ja(oo(t,3)))},Ur.remove=function(e,t){var r=[];if(!e||!e.length)return r;var n=-1,i=[],o=e.length;for(t=oo(t,3);++n<o;){var a=e[n];t(a,n,e)&&(r.push(a),i.push(n))}return Hn(e,i),r},Ur.rest=function(e,t){if("function"!=typeof e)throw new Oe(o);return Gn(e,t=t===i?t:hs(t))},Ur.reverse=Jo,Ur.sampleSize=function(e,t,r){return t=(r?vo(e,t,r):t===i)?1:hs(t),(qa(e)?Zr:Zn)(e,t)},Ur.set=function(e,t,r){return null==e?e:Yn(e,t,r)},Ur.setWith=function(e,t,r,n){return n="function"==typeof n?n:i,null==e?e:Yn(e,t,r,n)},Ur.shuffle=function(e){return(qa(e)?Yr:Jn)(e)},Ur.slice=function(e,t,r){var n=null==e?0:e.length;return n?(r&&"number"!=typeof r&&vo(e,t,r)?(t=0,r=n):(t=null==t?0:hs(t),r=r===i?n:hs(r)),ei(e,t,r)):[]},Ur.sortBy=Aa,Ur.sortedUniq=function(e){return e&&e.length?ii(e):[]},Ur.sortedUniqBy=function(e,t){return e&&e.length?ii(e,oo(t,2)):[]},Ur.split=function(e,t,r){return r&&"number"!=typeof r&&vo(e,t,r)&&(t=r=i),(r=r===i?h:r>>>0)?(e=vs(e))&&("string"==typeof t||null!=t&&!is(t))&&!(t=ai(t))&&nr(e)?mi(fr(e),0,r):e.split(t,r):[]},Ur.spread=function(e,t){if("function"!=typeof e)throw new Oe(o);return t=null==t?0:yr(hs(t),0),Gn((function(r){var n=r[t],i=mi(r,0,t);return n&&It(i,n),Et(e,this,i)}))},Ur.tail=function(e){var t=null==e?0:e.length;return t?ei(e,1,t):[]},Ur.take=function(e,t,r){return e&&e.length?ei(e,0,(t=r||t===i?1:hs(t))<0?0:t):[]},Ur.takeRight=function(e,t,r){var n=null==e?0:e.length;return n?ei(e,(t=n-(t=r||t===i?1:hs(t)))<0?0:t,n):[]},Ur.takeRightWhile=function(e,t){return e&&e.length?fi(e,oo(t,3),!1,!0):[]},Ur.takeWhile=function(e,t){return e&&e.length?fi(e,oo(t,3)):[]},Ur.tap=function(e,t){return t(e),e},Ur.throttle=function(e,t,r){var n=!0,i=!0;if("function"!=typeof e)throw new Oe(o);return Ja(r)&&(n="leading"in r?!!r.leading:n,i="trailing"in r?!!r.trailing:i),Pa(e,t,{leading:n,maxWait:t,trailing:i})},Ur.thru=da,Ur.toArray=ls,Ur.toPairs=Us,Ur.toPairsIn=Ns,Ur.toPath=function(e){return qa(e)?kt(e,Bo):ss(e)?[e]:Ri(Lo(vs(e)))},Ur.toPlainObject=gs,Ur.transform=function(e,t,r){var n=qa(e),i=n||Ga(e)||us(e);if(t=oo(t,4),null==r){var o=e&&e.constructor;r=i?n?new o:[]:Ja(e)&&Ya(o)?Nr(He(e)):{}}return(i?xt:mn)(e,(function(e,n,i){return t(r,e,n,i)})),r},Ur.unary=function(e){return Ra(e,1)},Ur.union=ea,Ur.unionBy=ta,Ur.unionWith=ra,Ur.uniq=function(e){return e&&e.length?si(e):[]},Ur.uniqBy=function(e,t){return e&&e.length?si(e,oo(t,2)):[]},Ur.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?si(e,i,t):[]},Ur.unset=function(e,t){return null==e||ui(e,t)},Ur.unzip=na,Ur.unzipWith=ia,Ur.update=function(e,t,r){return null==e?e:ci(e,t,yi(r))},Ur.updateWith=function(e,t,r,n){return n="function"==typeof n?n:i,null==e?e:ci(e,t,yi(r),n)},Ur.values=$s,Ur.valuesIn=function(e){return null==e?[]:Yt(e,ks(e))},Ur.without=oa,Ur.words=Ys,Ur.wrap=function(e,t){return Ba(yi(t),e)},Ur.xor=aa,Ur.xorBy=sa,Ur.xorWith=ua,Ur.zip=ca,Ur.zipObject=function(e,t){return hi(e||[],t||[],Xr)},Ur.zipObjectDeep=function(e,t){return hi(e||[],t||[],Yn)},Ur.zipWith=fa,Ur.entries=Us,Ur.entriesIn=Ns,Ur.extend=bs,Ur.extendWith=ws,au(Ur,Ur),Ur.add=vu,Ur.attempt=Qs,Ur.camelCase=Ds,Ur.capitalize=Fs,Ur.ceil=mu,Ur.clamp=function(e,t,r){return r===i&&(r=t,t=i),r!==i&&(r=(r=ys(r))==r?r:0),t!==i&&(t=(t=ys(t))==t?t:0),on(ys(e),t,r)},Ur.clone=function(e){return an(e,4)},Ur.cloneDeep=function(e){return an(e,5)},Ur.cloneDeepWith=function(e,t){return an(e,5,t="function"==typeof t?t:i)},Ur.cloneWith=function(e,t){return an(e,4,t="function"==typeof t?t:i)},Ur.conformsTo=function(e,t){return null==t||sn(e,t,Ps(t))},Ur.deburr=zs,Ur.defaultTo=function(e,t){return null==e||e!=e?t:e},Ur.divide=bu,Ur.endsWith=function(e,t,r){e=vs(e),t=ai(t);var n=e.length,o=r=r===i?n:on(hs(r),0,n);return(r-=t.length)>=0&&e.slice(r,o)==t},Ur.eq=$a,Ur.escape=function(e){return(e=vs(e))&&K.test(e)?e.replace(V,tr):e},Ur.escapeRegExp=function(e){return(e=vs(e))&&re.test(e)?e.replace(te,"\\$&"):e},Ur.every=function(e,t,r){var n=qa(e)?Ot:dn;return r&&vo(e,t,r)&&(t=i),n(e,oo(t,3))},Ur.find=ya,Ur.findIndex=zo,Ur.findKey=function(e,t){return Ut(e,oo(t,3),mn)},Ur.findLast=ga,Ur.findLastIndex=qo,Ur.findLastKey=function(e,t){return Ut(e,oo(t,3),bn)},Ur.floor=wu,Ur.forEach=va,Ur.forEachRight=ma,Ur.forIn=function(e,t){return null==e?e:gn(e,oo(t,3),ks)},Ur.forInRight=function(e,t){return null==e?e:vn(e,oo(t,3),ks)},Ur.forOwn=function(e,t){return e&&mn(e,oo(t,3))},Ur.forOwnRight=function(e,t){return e&&bn(e,oo(t,3))},Ur.get=xs,Ur.gt=Da,Ur.gte=Fa,Ur.has=function(e,t){return null!=e&&ho(e,t,xn)},Ur.hasIn=Rs,Ur.head=Wo,Ur.identity=ru,Ur.includes=function(e,t,r,n){e=Wa(e)?e:$s(e),r=r&&!n?hs(r):0;var i=e.length;return r<0&&(r=yr(i+r,0)),as(e)?r<=i&&e.indexOf(t,r)>-1:!!i&&$t(e,t,r)>-1},Ur.indexOf=function(e,t,r){var n=null==e?0:e.length;if(!n)return-1;var i=null==r?0:hs(r);return i<0&&(i=yr(n+i,0)),$t(e,t,i)},Ur.inRange=function(e,t,r){return t=ds(t),r===i?(r=t,t=0):r=ds(r),function(e,t,r){return e>=gr(t,r)&&e<yr(t,r)}(e=ys(e),t,r)},Ur.invoke=Ms,Ur.isArguments=za,Ur.isArray=qa,Ur.isArrayBuffer=Ha,Ur.isArrayLike=Wa,Ur.isArrayLikeObject=Va,Ur.isBoolean=function(e){return!0===e||!1===e||es(e)&&En(e)==v},Ur.isBuffer=Ga,Ur.isDate=Ka,Ur.isElement=function(e){return es(e)&&1===e.nodeType&&!ns(e)},Ur.isEmpty=function(e){if(null==e)return!0;if(Wa(e)&&(qa(e)||"string"==typeof e||"function"==typeof e.splice||Ga(e)||us(e)||za(e)))return!e.length;var t=lo(e);if(t==S||t==O)return!e.size;if(_o(e))return!jn(e).length;for(var r in e)if(Ce.call(e,r))return!1;return!0},Ur.isEqual=function(e,t){return Pn(e,t)},Ur.isEqualWith=function(e,t,r){var n=(r="function"==typeof r?r:i)?r(e,t):i;return n===i?Pn(e,t,i,r):!!n},Ur.isError=Za,Ur.isFinite=function(e){return"number"==typeof e&&Bt(e)},Ur.isFunction=Ya,Ur.isInteger=Qa,Ur.isLength=Xa,Ur.isMap=ts,Ur.isMatch=function(e,t){return e===t||kn(e,t,so(t))},Ur.isMatchWith=function(e,t,r){return r="function"==typeof r?r:i,kn(e,t,so(t),r)},Ur.isNaN=function(e){return rs(e)&&e!=+e},Ur.isNative=function(e){if(wo(e))throw new _e("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return In(e)},Ur.isNil=function(e){return null==e},Ur.isNull=function(e){return null===e},Ur.isNumber=rs,Ur.isObject=Ja,Ur.isObjectLike=es,Ur.isPlainObject=ns,Ur.isRegExp=is,Ur.isSafeInteger=function(e){return Qa(e)&&e>=-9007199254740991&&e<=l},Ur.isSet=os,Ur.isString=as,Ur.isSymbol=ss,Ur.isTypedArray=us,Ur.isUndefined=function(e){return e===i},Ur.isWeakMap=function(e){return es(e)&&lo(e)==P},Ur.isWeakSet=function(e){return es(e)&&"[object WeakSet]"==En(e)},Ur.join=function(e,t){return null==e?"":Ht.call(e,t)},Ur.kebabCase=qs,Ur.last=Zo,Ur.lastIndexOf=function(e,t,r){var n=null==e?0:e.length;if(!n)return-1;var o=n;return r!==i&&(o=(o=hs(r))<0?yr(n+o,0):gr(o,n-1)),t==t?function(e,t,r){for(var n=r+1;n--;)if(e[n]===t)return n;return n}(e,t,o):Nt(e,Ft,o,!0)},Ur.lowerCase=Hs,Ur.lowerFirst=Ws,Ur.lt=cs,Ur.lte=fs,Ur.max=function(e){return e&&e.length?hn(e,ru,An):i},Ur.maxBy=function(e,t){return e&&e.length?hn(e,oo(t,2),An):i},Ur.mean=function(e){return zt(e,ru)},Ur.meanBy=function(e,t){return zt(e,oo(t,2))},Ur.min=function(e){return e&&e.length?hn(e,ru,Ln):i},Ur.minBy=function(e,t){return e&&e.length?hn(e,oo(t,2),Ln):i},Ur.stubArray=pu,Ur.stubFalse=yu,Ur.stubObject=function(){return{}},Ur.stubString=function(){return""},Ur.stubTrue=function(){return!0},Ur.multiply=_u,Ur.nth=function(e,t){return e&&e.length?Dn(e,hs(t)):i},Ur.noConflict=function(){return lt._===this&&(lt._=Ne),this},Ur.noop=su,Ur.now=xa,Ur.pad=function(e,t,r){e=vs(e);var n=(t=hs(t))?cr(e):0;if(!t||n>=t)return e;var i=(t-n)/2;return Fi(ht(i),r)+e+Fi(dt(i),r)},Ur.padEnd=function(e,t,r){e=vs(e);var n=(t=hs(t))?cr(e):0;return t&&n<t?e+Fi(t-n,r):e},Ur.padStart=function(e,t,r){e=vs(e);var n=(t=hs(t))?cr(e):0;return t&&n<t?Fi(t-n,r)+e:e},Ur.parseInt=function(e,t,r){return r||null==t?t=0:t&&(t=+t),mr(vs(e).replace(ne,""),t||0)},Ur.random=function(e,t,r){if(r&&"boolean"!=typeof r&&vo(e,t,r)&&(t=r=i),r===i&&("boolean"==typeof t?(r=t,t=i):"boolean"==typeof e&&(r=e,e=i)),e===i&&t===i?(e=0,t=1):(e=ds(e),t===i?(t=e,e=0):t=ds(t)),e>t){var n=e;e=t,t=n}if(r||e%1||t%1){var o=br();return gr(e+o*(t-e+st("1e-"+((o+"").length-1))),t)}return Wn(e,t)},Ur.reduce=function(e,t,r){var n=qa(e)?Ct:Wt,i=arguments.length<3;return n(e,oo(t,4),r,i,fn)},Ur.reduceRight=function(e,t,r){var n=qa(e)?jt:Wt,i=arguments.length<3;return n(e,oo(t,4),r,i,ln)},Ur.repeat=function(e,t,r){return t=(r?vo(e,t,r):t===i)?1:hs(t),Vn(vs(e),t)},Ur.replace=function(){var e=arguments,t=vs(e[0]);return e.length<3?t:t.replace(e[1],e[2])},Ur.result=function(e,t,r){var n=-1,o=(t=gi(t,e)).length;for(o||(o=1,e=i);++n<o;){var a=null==e?i:e[Bo(t[n])];a===i&&(n=o,a=r),e=Ya(a)?a.call(e):a}return e},Ur.round=Su,Ur.runInContext=e,Ur.sample=function(e){return(qa(e)?Kr:Kn)(e)},Ur.size=function(e){if(null==e)return 0;if(Wa(e))return as(e)?cr(e):e.length;var t=lo(e);return t==S||t==O?e.size:jn(e).length},Ur.snakeCase=Vs,Ur.some=function(e,t,r){var n=qa(e)?Lt:ti;return r&&vo(e,t,r)&&(t=i),n(e,oo(t,3))},Ur.sortedIndex=function(e,t){return ri(e,t)},Ur.sortedIndexBy=function(e,t,r){return ni(e,t,oo(r,2))},Ur.sortedIndexOf=function(e,t){var r=null==e?0:e.length;if(r){var n=ri(e,t);if(n<r&&$a(e[n],t))return n}return-1},Ur.sortedLastIndex=function(e,t){return ri(e,t,!0)},Ur.sortedLastIndexBy=function(e,t,r){return ni(e,t,oo(r,2),!0)},Ur.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var r=ri(e,t,!0)-1;if($a(e[r],t))return r}return-1},Ur.startCase=Gs,Ur.startsWith=function(e,t,r){return e=vs(e),r=null==r?0:on(hs(r),0,e.length),t=ai(t),e.slice(r,r+t.length)==t},Ur.subtract=Eu,Ur.sum=function(e){return e&&e.length?Vt(e,ru):0},Ur.sumBy=function(e,t){return e&&e.length?Vt(e,oo(t,2)):0},Ur.template=function(e,t,r){var n=Ur.templateSettings;r&&vo(e,t,r)&&(t=i),e=vs(e),t=ws({},t,n,Zi);var o,a,s=ws({},t.imports,n.imports,Zi),u=Ps(s),c=Yt(s,u),f=0,l=t.interpolate||be,d="__p += '",h=xe((t.escape||be).source+"|"+l.source+"|"+(l===Q?le:be).source+"|"+(t.evaluate||be).source+"|$","g"),p="//# sourceURL="+(Ce.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++nt+"]")+"\n";e.replace(h,(function(t,r,n,i,s,u){return n||(n=i),d+=e.slice(f,u).replace(we,rr),r&&(o=!0,d+="' +\n__e("+r+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),n&&(d+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),f=u+t.length,t})),d+="';\n";var y=Ce.call(t,"variable")&&t.variable;if(y){if(ce.test(y))throw new _e("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(z,""):d).replace(q,"$1").replace(H,"$1;"),d="function("+(y||"obj")+") {\n"+(y?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var g=Qs((function(){return Se(u,p+"return "+d).apply(i,c)}));if(g.source=d,Za(g))throw g;return g},Ur.times=function(e,t){if((e=hs(e))<1||e>l)return[];var r=h,n=gr(e,h);t=oo(t),e-=h;for(var i=Gt(n,t);++r<e;)t(r);return i},Ur.toFinite=ds,Ur.toInteger=hs,Ur.toLength=ps,Ur.toLower=function(e){return vs(e).toLowerCase()},Ur.toNumber=ys,Ur.toSafeInteger=function(e){return e?on(hs(e),-9007199254740991,l):0===e?e:0},Ur.toString=vs,Ur.toUpper=function(e){return vs(e).toUpperCase()},Ur.trim=function(e,t,r){if((e=vs(e))&&(r||t===i))return Kt(e);if(!e||!(t=ai(t)))return e;var n=fr(e),o=fr(t);return mi(n,Xt(n,o),Jt(n,o)+1).join("")},Ur.trimEnd=function(e,t,r){if((e=vs(e))&&(r||t===i))return e.slice(0,lr(e)+1);if(!e||!(t=ai(t)))return e;var n=fr(e);return mi(n,0,Jt(n,fr(t))+1).join("")},Ur.trimStart=function(e,t,r){if((e=vs(e))&&(r||t===i))return e.replace(ne,"");if(!e||!(t=ai(t)))return e;var n=fr(e);return mi(n,Xt(n,fr(t))).join("")},Ur.truncate=function(e,t){var r=30,n="...";if(Ja(t)){var o="separator"in t?t.separator:o;r="length"in t?hs(t.length):r,n="omission"in t?ai(t.omission):n}var a=(e=vs(e)).length;if(nr(e)){var s=fr(e);a=s.length}if(r>=a)return e;var u=r-cr(n);if(u<1)return n;var c=s?mi(s,0,u).join(""):e.slice(0,u);if(o===i)return c+n;if(s&&(u+=c.length-u),is(o)){if(e.slice(u).search(o)){var f,l=c;for(o.global||(o=xe(o.source,vs(de.exec(o))+"g")),o.lastIndex=0;f=o.exec(l);)var d=f.index;c=c.slice(0,d===i?u:d)}}else if(e.indexOf(ai(o),u)!=u){var h=c.lastIndexOf(o);h>-1&&(c=c.slice(0,h))}return c+n},Ur.unescape=function(e){return(e=vs(e))&&G.test(e)?e.replace(W,dr):e},Ur.uniqueId=function(e){var t=++je;return vs(e)+t},Ur.upperCase=Ks,Ur.upperFirst=Zs,Ur.each=va,Ur.eachRight=ma,Ur.first=Wo,au(Ur,(gu={},mn(Ur,(function(e,t){Ce.call(Ur.prototype,t)||(gu[t]=e)})),gu),{chain:!1}),Ur.VERSION="4.17.21",xt(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){Ur[e].placeholder=Ur})),xt(["drop","take"],(function(e,t){Fr.prototype[e]=function(r){r=r===i?1:yr(hs(r),0);var n=this.__filtered__&&!t?new Fr(this):this.clone();return n.__filtered__?n.__takeCount__=gr(r,n.__takeCount__):n.__views__.push({size:gr(r,h),type:e+(n.__dir__<0?"Right":"")}),n},Fr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),xt(["filter","map","takeWhile"],(function(e,t){var r=t+1,n=1==r||3==r;Fr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:oo(e,3),type:r}),t.__filtered__=t.__filtered__||n,t}})),xt(["head","last"],(function(e,t){var r="take"+(t?"Right":"");Fr.prototype[e]=function(){return this[r](1).value()[0]}})),xt(["initial","tail"],(function(e,t){var r="drop"+(t?"":"Right");Fr.prototype[e]=function(){return this.__filtered__?new Fr(this):this[r](1)}})),Fr.prototype.compact=function(){return this.filter(ru)},Fr.prototype.find=function(e){return this.filter(e).head()},Fr.prototype.findLast=function(e){return this.reverse().find(e)},Fr.prototype.invokeMap=Gn((function(e,t){return"function"==typeof e?new Fr(this):this.map((function(r){return Tn(r,e,t)}))})),Fr.prototype.reject=function(e){return this.filter(ja(oo(e)))},Fr.prototype.slice=function(e,t){e=hs(e);var r=this;return r.__filtered__&&(e>0||t<0)?new Fr(r):(e<0?r=r.takeRight(-e):e&&(r=r.drop(e)),t!==i&&(r=(t=hs(t))<0?r.dropRight(-t):r.take(t-e)),r)},Fr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Fr.prototype.toArray=function(){return this.take(h)},mn(Fr.prototype,(function(e,t){var r=/^(?:filter|find|map|reject)|While$/.test(t),n=/^(?:head|last)$/.test(t),o=Ur[n?"take"+("last"==t?"Right":""):t],a=n||/^find/.test(t);o&&(Ur.prototype[t]=function(){var t=this.__wrapped__,s=n?[1]:arguments,u=t instanceof Fr,c=s[0],f=u||qa(t),l=function(e){var t=o.apply(Ur,It([e],s));return n&&d?t[0]:t};f&&r&&"function"==typeof c&&1!=c.length&&(u=f=!1);var d=this.__chain__,h=!!this.__actions__.length,p=a&&!d,y=u&&!h;if(!a&&f){t=y?t:new Fr(this);var g=e.apply(t,s);return g.__actions__.push({func:da,args:[l],thisArg:i}),new Dr(g,d)}return p&&y?e.apply(this,s):(g=this.thru(l),p?n?g.value()[0]:g.value():g)})})),xt(["pop","push","shift","sort","splice","unshift"],(function(e){var t=Te[e],r=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",n=/^(?:pop|shift)$/.test(e);Ur.prototype[e]=function(){var e=arguments;if(n&&!this.__chain__){var i=this.value();return t.apply(qa(i)?i:[],e)}return this[r]((function(r){return t.apply(qa(r)?r:[],e)}))}})),mn(Fr.prototype,(function(e,t){var r=Ur[t];if(r){var n=r.name+"";Ce.call(Tr,n)||(Tr[n]=[]),Tr[n].push({name:t,func:r})}})),Tr[Ui(i,2).name]=[{name:"wrapper",func:i}],Fr.prototype.clone=function(){var e=new Fr(this.__wrapped__);return e.__actions__=Ri(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Ri(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Ri(this.__views__),e},Fr.prototype.reverse=function(){if(this.__filtered__){var e=new Fr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Fr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,r=qa(e),n=t<0,i=r?e.length:0,o=function(e,t,r){for(var n=-1,i=r.length;++n<i;){var o=r[n],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=gr(t,e+a);break;case"takeRight":e=yr(e,t-a)}}return{start:e,end:t}}(0,i,this.__views__),a=o.start,s=o.end,u=s-a,c=n?s:a-1,f=this.__iteratees__,l=f.length,d=0,h=gr(u,this.__takeCount__);if(!r||!n&&i==u&&h==u)return li(e,this.__actions__);var p=[];e:for(;u--&&d<h;){for(var y=-1,g=e[c+=t];++y<l;){var v=f[y],m=v.iteratee,b=v.type,w=m(g);if(2==b)g=w;else if(!w){if(1==b)continue e;break e}}p[d++]=g}return p},Ur.prototype.at=ha,Ur.prototype.chain=function(){return la(this)},Ur.prototype.commit=function(){return new Dr(this.value(),this.__chain__)},Ur.prototype.next=function(){this.__values__===i&&(this.__values__=ls(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},Ur.prototype.plant=function(e){for(var t,r=this;r instanceof $r;){var n=No(r);n.__index__=0,n.__values__=i,t?o.__wrapped__=n:t=n;var o=n;r=r.__wrapped__}return o.__wrapped__=e,t},Ur.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Fr){var t=e;return this.__actions__.length&&(t=new Fr(this)),(t=t.reverse()).__actions__.push({func:da,args:[Jo],thisArg:i}),new Dr(t,this.__chain__)}return this.thru(Jo)},Ur.prototype.toJSON=Ur.prototype.valueOf=Ur.prototype.value=function(){return li(this.__wrapped__,this.__actions__)},Ur.prototype.first=Ur.prototype.head,Ze&&(Ur.prototype[Ze]=function(){return this}),Ur}();lt._=hr,(n=function(){return hr}.call(t,r,t,e))===i||(e.exports=n)}.call(this)},3900:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(8473),s=o(r(5420)),u=function(e){function t(t){void 0===t&&(t={objectMode:!1});var r=e.call(this,{objectMode:t.objectMode})||this;r.audioInput=null,r.recording=!0;var n=t.stream,i=t.objectMode,o=t.bufferSize,a=t.context;r.objectMode=i,r.bufferSize=o||void 0===window.AudioContext?4096:null;var s=window.AudioContext||window.webkitAudioContext;return r.context=a||new s,r.recorder=r.context.createScriptProcessor(o,1,1),r.recorder.connect(r.context.destination),n&&r.setStream(n),setTimeout((function(){r.emit("format",{channels:1,bitDepth:32,sampleRate:r.context.sampleRate,signed:!0,float:!0})}),0),r}return i(t,e),t.prototype.setStream=function(e){var t=this;this.stream=e,this.audioInput=this.context.createMediaStreamSource(e),this.audioInput.connect(this.recorder),this.recorder.onaudioprocess=function(e){t.recording&&t.push(t.objectMode?e.inputBuffer:s.default(e.inputBuffer.getChannelData(0).buffer))}},t.prototype.pauseRecording=function(){this.recording=!1},t.prototype.playRecording=function(){this.recording=!0},t.prototype.stop=function(){if("closed"!==this.context.state){try{this.stream.getTracks()[0].stop()}catch(e){}this.recorder.disconnect(),this.audioInput&&this.audioInput.disconnect();try{this.context.close()}catch(e){}this.recording=!1,this.push(null),this.emit("close")}},t.prototype._read=function(){},t.toRaw=function(e){return new Float32Array(e.buffer)},t}(a.Readable);t.default=u},4155:e=>{var t,r,n=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(t===setTimeout)return setTimeout(e,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(e){t=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var s,u=[],c=!1,f=-1;function l(){c&&s&&(c=!1,s.length?u=s.concat(u):f=-1,u.length&&d())}function d(){if(!c){var e=a(l);c=!0;for(var t=u.length;t;){for(s=u,u=[];++f<t;)s&&s[f].run();f=-1,t=u.length}s=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{return r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function p(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new h(e,t)),1!==u.length||c||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=p,n.addListener=p,n.once=p,n.off=p,n.removeListener=p,n.removeAllListeners=p,n.emit=p,n.prependListener=p,n.prependOnceListener=p,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},4281:e=>{"use strict";var t={};function r(e,r,n){n||(n=Error);var i=function(e){var t,n;function i(t,n,i){return e.call(this,function(e,t,n){return"string"==typeof r?r:r(e,t,n)}(t,n,i))||this}return n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i}(n);i.prototype.name=n.name,i.prototype.code=e,t[e]=i}function n(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map((function(e){return String(e)})),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:2===r?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}r("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(e,t,r){var i,o,a,s,u;if("string"==typeof t&&(o="not ",t.substr(0,4)===o)?(i="must not be",t=t.replace(/^not /,"")):i="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-9,r)===t}(e," argument"))a="The ".concat(e," ").concat(i," ").concat(n(t,"type"));else{var c=("number"!=typeof u&&(u=0),u+1>(s=e).length||-1===s.indexOf(".",u)?"argument":"property");a='The "'.concat(e,'" ').concat(c," ").concat(i," ").concat(n(t,"type"))}return a+". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.q=t},6753:(e,t,r)=>{"use strict";var n=r(4155),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=f;var o=r(9481),a=r(4229);r(5717)(f,o);for(var s=i(a.prototype),u=0;u<s.length;u++){var c=s[u];f.prototype[c]||(f.prototype[c]=a.prototype[c])}function f(e){if(!(this instanceof f))return new f(e);o.call(this,e),a.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",l)))}function l(){this._writableState.ended||n.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(f.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(f.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})},2725:(e,t,r)=>{"use strict";e.exports=i;var n=r(4605);function i(e){if(!(this instanceof i))return new i(e);n.call(this,e)}r(5717)(i,n),i.prototype._transform=function(e,t,r){r(null,e)}},9481:(e,t,r)=>{"use strict";var n,i=r(4155);e.exports=x,x.ReadableState=A,r(7187).EventEmitter;var o,a=function(e,t){return e.listeners(t).length},s=r(2503),u=r(8764).Buffer,c=(void 0!==r.g?r.g:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},f=r(4616);o=f&&f.debuglog?f.debuglog("stream"):function(){};var l,d,h,p=r(7327),y=r(1195),g=r(2457).getHighWaterMark,v=r(4281).q,m=v.ERR_INVALID_ARG_TYPE,b=v.ERR_STREAM_PUSH_AFTER_EOF,w=v.ERR_METHOD_NOT_IMPLEMENTED,_=v.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(5717)(x,s);var S=y.errorOrDestroy,E=["error","close","destroy","pause","resume"];function A(e,t,i){n=n||r(6753),e=e||{},"boolean"!=typeof i&&(i=t instanceof n),this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=g(this,e,"readableHighWaterMark",i),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(l||(l=r(2553).s),this.decoder=new l(e.encoding),this.encoding=e.encoding)}function x(e){if(n=n||r(6753),!(this instanceof x))return new x(e);var t=this instanceof n;this._readableState=new A(e,this,t),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),s.call(this)}function R(e,t,r,n,i){o("readableAddChunk",t);var a,s=e._readableState;if(null===t)s.reading=!1,function(e,t){if(o("onEofChunk"),!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,t.sync?P(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,k(e)))}}(e,s);else if(i||(a=function(e,t){var r,n;return n=t,u.isBuffer(n)||n instanceof c||"string"==typeof t||void 0===t||e.objectMode||(r=new m("chunk",["string","Buffer","Uint8Array"],t)),r}(s,t)),a)S(e,a);else if(s.objectMode||t&&t.length>0)if("string"==typeof t||s.objectMode||Object.getPrototypeOf(t)===u.prototype||(t=function(e){return u.from(e)}(t)),n)s.endEmitted?S(e,new _):O(e,s,t,!0);else if(s.ended)S(e,new b);else{if(s.destroyed)return!1;s.reading=!1,s.decoder&&!r?(t=s.decoder.write(t),s.objectMode||0!==t.length?O(e,s,t,!1):I(e,s)):O(e,s,t,!1)}else n||(s.reading=!1,I(e,s));return!s.ended&&(s.length<s.highWaterMark||0===s.length)}function O(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&P(e)),I(e,t)}Object.defineProperty(x.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),x.prototype.destroy=y.destroy,x.prototype._undestroy=y.undestroy,x.prototype._destroy=function(e,t){t(e)},x.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=u.from(e,t),t=""),r=!0),R(this,e,t,!1,r)},x.prototype.unshift=function(e){return R(this,e,null,!0,!1)},x.prototype.isPaused=function(){return!1===this._readableState.flowing},x.prototype.setEncoding=function(e){l||(l=r(2553).s);var t=new l(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=t.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var T=1073741824;function M(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=T?e=T:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function P(e){var t=e._readableState;o("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(o("emitReadable",t.flowing),t.emittedReadable=!0,i.nextTick(k,e))}function k(e){var t=e._readableState;o("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,U(e)}function I(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(C,e,t))}function C(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var r=t.length;if(o("maybeReadMore read 0"),e.read(0),r===t.length)break}t.readingMore=!1}function j(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function L(e){o("readable nexttick read 0"),e.read(0)}function B(e,t){o("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),U(e),t.flowing&&!t.reading&&e.read(0)}function U(e){var t=e._readableState;for(o("flow",t.flowing);t.flowing&&null!==e.read(););}function N(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r);var r}function $(e){var t=e._readableState;o("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,i.nextTick(D,t,e))}function D(e,t){if(o("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var r=t._writableState;(!r||r.autoDestroy&&r.finished)&&t.destroy()}}function F(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}x.prototype.read=function(e){o("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return o("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?$(this):P(this),null;if(0===(e=M(e,t))&&t.ended)return 0===t.length&&$(this),null;var n,i=t.needReadable;return o("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&o("length less than watermark",i=!0),t.ended||t.reading?o("reading or ended",i=!1):i&&(o("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=M(r,t))),null===(n=e>0?N(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&$(this)),null!==n&&this.emit("data",n),n},x.prototype._read=function(e){S(this,new w("_read()"))},x.prototype.pipe=function(e,t){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,o("pipe count=%d opts=%j",n.pipesCount,t);var s=t&&!1===t.end||e===i.stdout||e===i.stderr?y:u;function u(){o("onend"),e.end()}n.endEmitted?i.nextTick(s):r.once("end",s),e.on("unpipe",(function t(i,a){o("onunpipe"),i===r&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,o("cleanup"),e.removeListener("close",h),e.removeListener("finish",p),e.removeListener("drain",c),e.removeListener("error",d),e.removeListener("unpipe",t),r.removeListener("end",u),r.removeListener("end",y),r.removeListener("data",l),f=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||c())}));var c=function(e){return function(){var t=e._readableState;o("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,U(e))}}(r);e.on("drain",c);var f=!1;function l(t){o("ondata");var i=e.write(t);o("dest.write",i),!1===i&&((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==F(n.pipes,e))&&!f&&(o("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function d(t){o("onerror",t),y(),e.removeListener("error",d),0===a(e,"error")&&S(e,t)}function h(){e.removeListener("finish",p),y()}function p(){o("onfinish"),e.removeListener("close",h),y()}function y(){o("unpipe"),r.unpipe(e)}return r.on("data",l),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",d),e.once("close",h),e.once("finish",p),e.emit("pipe",r),n.flowing||(o("pipe resume"),r.resume()),e},x.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var a=F(t.pipes,e);return-1===a||(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},x.prototype.on=function(e,t){var r=s.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,o("on readable",n.length,n.reading),n.length?P(this):n.reading||i.nextTick(L,this))),r},x.prototype.addListener=x.prototype.on,x.prototype.removeListener=function(e,t){var r=s.prototype.removeListener.call(this,e,t);return"readable"===e&&i.nextTick(j,this),r},x.prototype.removeAllListeners=function(e){var t=s.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||i.nextTick(j,this),t},x.prototype.resume=function(){var e=this._readableState;return e.flowing||(o("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(B,e,t))}(this,e)),e.paused=!1,this},x.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},x.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var a=0;a<E.length;a++)e.on(E[a],this.emit.bind(this,E[a]));return this._read=function(t){o("wrapped _read",t),n&&(n=!1,e.resume())},this},"function"==typeof Symbol&&(x.prototype[Symbol.asyncIterator]=function(){return void 0===d&&(d=r(5850)),d(this)}),Object.defineProperty(x.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(x.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(x.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),x._fromList=N,Object.defineProperty(x.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(x.from=function(e,t){return void 0===h&&(h=r(5167)),h(x,e,t)})},4605:(e,t,r)=>{"use strict";e.exports=f;var n=r(4281).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,a=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0,u=r(6753);function c(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function f(e){if(!(this instanceof f))return new f(e);u.call(this,e),this._transformState={afterTransform:c.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",l)}function l(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?d(this,null,null):this._flush((function(t,r){d(e,t,r)}))}function d(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new s;if(e._transformState.transforming)throw new a;return e.push(null)}r(5717)(f,u),f.prototype.push=function(e,t){return this._transformState.needTransform=!1,u.prototype.push.call(this,e,t)},f.prototype._transform=function(e,t,r){r(new i("_transform()"))},f.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},f.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},f.prototype._destroy=function(e,t){u.prototype._destroy.call(this,e,(function(e){t(e)}))}},4229:(e,t,r)=>{"use strict";var n,i=r(4155);function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;for(e.entry=null;n;){var i=n.callback;t.pendingcb--,i(undefined),n=n.next}t.corkedRequestsFree.next=e}(t,e)}}e.exports=x,x.WritableState=A;var a,s={deprecate:r(4927)},u=r(2503),c=r(8764).Buffer,f=(void 0!==r.g?r.g:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},l=r(1195),d=r(2457).getHighWaterMark,h=r(4281).q,p=h.ERR_INVALID_ARG_TYPE,y=h.ERR_METHOD_NOT_IMPLEMENTED,g=h.ERR_MULTIPLE_CALLBACK,v=h.ERR_STREAM_CANNOT_PIPE,m=h.ERR_STREAM_DESTROYED,b=h.ERR_STREAM_NULL_VALUES,w=h.ERR_STREAM_WRITE_AFTER_END,_=h.ERR_UNKNOWN_ENCODING,S=l.errorOrDestroy;function E(){}function A(e,t,a){n=n||r(6753),e=e||{},"boolean"!=typeof a&&(a=t instanceof n),this.objectMode=!!e.objectMode,a&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=d(this,e,"writableHighWaterMark",a),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===e.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new g;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,o){--t.pendingcb,r?(i.nextTick(o,n),i.nextTick(k,e,t),e._writableState.errorEmitted=!0,S(e,n)):(o(n),e._writableState.errorEmitted=!0,S(e,n),k(e,t))}(e,r,n,t,o);else{var a=M(r)||e.destroyed;a||r.corked||r.bufferProcessing||!r.bufferedRequest||T(e,r),n?i.nextTick(O,e,r,a,o):O(e,r,a,o)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function x(e){var t=this instanceof(n=n||r(6753));if(!t&&!a.call(x,this))return new x(e);this._writableState=new A(e,this,t),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),u.call(this)}function R(e,t,r,n,i,o,a){t.writelen=n,t.writecb=a,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new m("write")):r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function O(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),k(e,t)}function T(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),a=t.corkedRequestsFree;a.entry=r;for(var s=0,u=!0;r;)i[s]=r,r.isBuf||(u=!1),r=r.next,s+=1;i.allBuffers=u,R(e,t,!0,t.length,i,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,f=r.encoding,l=r.callback;if(R(e,t,!1,t.objectMode?1:c.length,c,f,l),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function M(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function P(e,t){e._final((function(r){t.pendingcb--,r&&S(e,r),t.prefinished=!0,e.emit("prefinish"),k(e,t)}))}function k(e,t){var r=M(t);if(r&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,i.nextTick(P,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var n=e._readableState;(!n||n.autoDestroy&&n.endEmitted)&&e.destroy()}return r}r(5717)(x,u),A.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(A.prototype,"buffer",{get:s.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(a=Function.prototype[Symbol.hasInstance],Object.defineProperty(x,Symbol.hasInstance,{value:function(e){return!!a.call(this,e)||this===x&&e&&e._writableState instanceof A}})):a=function(e){return e instanceof this},x.prototype.pipe=function(){S(this,new v)},x.prototype.write=function(e,t,r){var n,o=this._writableState,a=!1,s=!o.objectMode&&(n=e,c.isBuffer(n)||n instanceof f);return s&&!c.isBuffer(e)&&(e=function(e){return c.from(e)}(e)),"function"==typeof t&&(r=t,t=null),s?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof r&&(r=E),o.ending?function(e,t){var r=new w;S(e,r),i.nextTick(t,r)}(this,r):(s||function(e,t,r,n){var o;return null===r?o=new b:"string"==typeof r||t.objectMode||(o=new p("chunk",["string","Buffer"],r)),!o||(S(e,o),i.nextTick(n,o),!1)}(this,o,e,r))&&(o.pendingcb++,a=function(e,t,r,n,i,o){if(!r){var a=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=c.from(t,r)),t}(t,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=t.objectMode?1:n.length;t.length+=s;var u=t.length<t.highWaterMark;if(u||(t.needDrain=!0),t.writing||t.corked){var f=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},f?f.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else R(e,t,!1,s,n,i,o);return u}(this,o,s,e,t,r)),a},x.prototype.cork=function(){this._writableState.corked++},x.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||T(this,e))},x.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new _(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(x.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(x.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),x.prototype._write=function(e,t,r){r(new y("_write()"))},x.prototype._writev=null,x.prototype.end=function(e,t,r){var n=this._writableState;return"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||function(e,t,r){t.ending=!0,k(e,t),r&&(t.finished?i.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r),this},Object.defineProperty(x.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(x.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),x.prototype.destroy=l.destroy,x.prototype._undestroy=l.undestroy,x.prototype._destroy=function(e,t){t(e)}},5850:(e,t,r)=>{"use strict";var n,i=r(4155);function o(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var a=r(8610),s=Symbol("lastResolve"),u=Symbol("lastReject"),c=Symbol("error"),f=Symbol("ended"),l=Symbol("lastPromise"),d=Symbol("handlePromise"),h=Symbol("stream");function p(e,t){return{value:e,done:t}}function y(e){var t=e[s];if(null!==t){var r=e[h].read();null!==r&&(e[l]=null,e[s]=null,e[u]=null,t(p(r,!1)))}}function g(e){i.nextTick(y,e)}var v=Object.getPrototypeOf((function(){})),m=Object.setPrototypeOf((o(n={get stream(){return this[h]},next:function(){var e=this,t=this[c];if(null!==t)return Promise.reject(t);if(this[f])return Promise.resolve(p(void 0,!0));if(this[h].destroyed)return new Promise((function(t,r){i.nextTick((function(){e[c]?r(e[c]):t(p(void 0,!0))}))}));var r,n=this[l];if(n)r=new Promise(function(e,t){return function(r,n){e.then((function(){t[f]?r(p(void 0,!0)):t[d](r,n)}),n)}}(n,this));else{var o=this[h].read();if(null!==o)return Promise.resolve(p(o,!1));r=new Promise(this[d])}return this[l]=r,r}},Symbol.asyncIterator,(function(){return this})),o(n,"return",(function(){var e=this;return new Promise((function(t,r){e[h].destroy(null,(function(e){e?r(e):t(p(void 0,!0))}))}))})),n),v);e.exports=function(e){var t,r=Object.create(m,(o(t={},h,{value:e,writable:!0}),o(t,s,{value:null,writable:!0}),o(t,u,{value:null,writable:!0}),o(t,c,{value:null,writable:!0}),o(t,f,{value:e._readableState.endEmitted,writable:!0}),o(t,d,{value:function(e,t){var n=r[h].read();n?(r[l]=null,r[s]=null,r[u]=null,e(p(n,!1))):(r[s]=e,r[u]=t)},writable:!0}),t));return r[l]=null,a(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=r[u];return null!==t&&(r[l]=null,r[s]=null,r[u]=null,t(e)),void(r[c]=e)}var n=r[s];null!==n&&(r[l]=null,r[s]=null,r[u]=null,n(p(void 0,!0))),r[f]=!0})),e.on("readable",g.bind(null,r)),r}},7327:(e,t,r)=>{"use strict";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t,r){return(t=s(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,s(n.key),n)}}function s(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}var u=r(8764).Buffer,c=r(2361).inspect,f=c&&c.custom||"inspect";e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}var t,r;return t=e,(r=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r}},{key:"concat",value:function(e){if(0===this.length)return u.alloc(0);for(var t,r,n,i=u.allocUnsafe(e>>>0),o=this.head,a=0;o;)t=o.data,r=i,n=a,u.prototype.copy.call(t,r,n),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(e,t){var r;return e<this.head.data.length?(r=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):r=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,r=1,n=t.data;for(e-=n.length;t=t.next;){var i=t.data,o=e>i.length?i.length:e;if(o===i.length?n+=i:n+=i.slice(0,e),0==(e-=o)){o===i.length?(++r,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(e){var t=u.allocUnsafe(e),r=this.head,n=1;for(r.data.copy(t),e-=r.data.length;r=r.next;){var i=r.data,o=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,o),0==(e-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,t}},{key:f,value:function(e,t){return c(this,i(i({},t),{},{depth:0,customInspect:!1}))}}])&&a(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}()},1195:(e,t,r)=>{"use strict";var n=r(4155);function i(e,t){a(e,t),o(e)}function o(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function a(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,s=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return s||u?(t?t(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(a,this,e)):n.nextTick(a,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?r._writableState?r._writableState.errorEmitted?n.nextTick(o,r):(r._writableState.errorEmitted=!0,n.nextTick(i,r,e)):n.nextTick(i,r,e):t?(n.nextTick(o,r),t(e)):n.nextTick(o,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var r=e._readableState,n=e._writableState;r&&r.autoDestroy||n&&n.autoDestroy?e.destroy(t):e.emit("error",t)}}},8610:(e,t,r)=>{"use strict";var n=r(4281).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}e.exports=function e(t,r,o){if("function"==typeof r)return e(t,null,r);r||(r={}),o=function(e){var t=!1;return function(){if(!t){t=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];e.apply(this,n)}}}(o||i);var a=r.readable||!1!==r.readable&&t.readable,s=r.writable||!1!==r.writable&&t.writable,u=function(){t.writable||f()},c=t._writableState&&t._writableState.finished,f=function(){s=!1,c=!0,a||o.call(t)},l=t._readableState&&t._readableState.endEmitted,d=function(){a=!1,l=!0,s||o.call(t)},h=function(e){o.call(t,e)},p=function(){var e;return a&&!l?(t._readableState&&t._readableState.ended||(e=new n),o.call(t,e)):s&&!c?(t._writableState&&t._writableState.ended||(e=new n),o.call(t,e)):void 0},y=function(){t.req.on("finish",f)};return function(e){return e.setHeader&&"function"==typeof e.abort}(t)?(t.on("complete",f),t.on("abort",p),t.req?y():t.on("request",y)):s&&!t._writableState&&(t.on("end",u),t.on("close",u)),t.on("end",d),t.on("finish",f),!1!==r.error&&t.on("error",h),t.on("close",p),function(){t.removeListener("complete",f),t.removeListener("abort",p),t.removeListener("request",y),t.req&&t.req.removeListener("finish",f),t.removeListener("end",u),t.removeListener("close",u),t.removeListener("finish",f),t.removeListener("end",d),t.removeListener("error",h),t.removeListener("close",p)}}},5167:e=>{e.exports=function(){throw new Error("Readable.from is not available in the browser")}},9946:(e,t,r)=>{"use strict";var n,i=r(4281).q,o=i.ERR_MISSING_ARGS,a=i.ERR_STREAM_DESTROYED;function s(e){if(e)throw e}function u(e){e()}function c(e,t){return e.pipe(t)}e.exports=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var f,l=function(e){return e.length?"function"!=typeof e[e.length-1]?s:e.pop():s}(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new o("streams");var d=t.map((function(e,i){var o=i<t.length-1;return function(e,t,i,o){o=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(o);var s=!1;e.on("close",(function(){s=!0})),void 0===n&&(n=r(8610)),n(e,{readable:t,writable:i},(function(e){if(e)return o(e);s=!0,o()}));var u=!1;return function(t){if(!s&&!u)return u=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void o(t||new a("pipe"))}}(e,o,i>0,(function(e){f||(f=e),e&&d.forEach(u),o||(d.forEach(u),l(f))}))}));return t.reduce(c)}},2457:(e,t,r)=>{"use strict";var n=r(4281).q.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(e,t,r,i){var o=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(t,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return e.objectMode?16:16384}}},2503:(e,t,r)=>{e.exports=r(7187).EventEmitter},8473:(e,t,r)=>{(t=e.exports=r(9481)).Stream=t,t.Readable=t,t.Writable=r(4229),t.Duplex=r(6753),t.Transform=r(4605),t.PassThrough=r(2725),t.finished=r(8610),t.pipeline=r(9946)},2553:(e,t,r)=>{"use strict";var n=r(396).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=c,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=f,this.end=l,t=3;break;default:return this.write=d,void(this.end=h)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function f(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function l(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function h(e){return e&&e.length?this.write(e):""}t.s=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=a(t[n]);return i>=0?(i>0&&(e.lastNeed=i-1),i):--n<r||-2===i?0:(i=a(t[n]))>=0?(i>0&&(e.lastNeed=i-2),i):--n<r||-2===i?0:(i=a(t[n]))>=0?(i>0&&(2===i?i=0:e.lastNeed=i-3),i):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},396:(e,t,r)=>{var n=r(8764),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function a(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=a),o(i,a),a.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},4927:(e,t,r)=>{function n(e){try{if(!r.g.localStorage)return!1}catch(e){return!1}var t=r.g.localStorage[e];return null!=t&&"true"===String(t).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),r=!0}return e.apply(this,arguments)}}},2361:()=>{},4616:()=>{}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e={};r.r(e),r.d(e,{getUserAgentPrefix:()=>gt,isVirtualHostableS3Bucket:()=>At,parseArn:()=>xt,partition:()=>ht,setPartitionInfo:()=>pt,useDefaultPartitionInfo:()=>yt});var t,n={};r.r(n),r.d(n,{aws:()=>e,booleanEquals:()=>Rt,getAttr:()=>Ot,isSet:()=>Tt,isValidHostLabel:()=>Et,not:()=>Mt,parseURL:()=>Lt,stringEquals:()=>Bt,substring:()=>Ut,uriEncode:()=>Nt}),r(6486),function(e){e.ENV="env",e.CONFIG="shared config entry"}(t||(t={}));const i=e=>"string"==typeof e&&(e.startsWith("fips-")||e.endsWith("-fips")),o=e=>i(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e;var a,s;(s=a||(a={}))[s.HEADER=0]="HEADER",s[s.TRAILER=1]="TRAILER";class u{constructor(e){this.method=e.method||"GET",this.hostname=e.hostname||"localhost",this.port=e.port,this.query=e.query||{},this.headers=e.headers||{},this.body=e.body,this.protocol=e.protocol?":"!==e.protocol.slice(-1)?`${e.protocol}:`:e.protocol:"https:",this.path=e.path?"/"!==e.path.charAt(0)?`/${e.path}`:e.path:"/",this.username=e.username,this.password=e.password,this.fragment=e.fragment}static isInstance(e){if(!e)return!1;const t=e;return"method"in t&&"protocol"in t&&"hostname"in t&&"path"in t&&"object"==typeof t.query&&"object"==typeof t.headers}clone(){const e=new u({...this,headers:{...this.headers}});var t;return e.query&&(e.query=(t=e.query,Object.keys(t).reduce(((e,r)=>{const n=t[r];return{...e,[r]:Array.isArray(n)?[...n]:n}}),{}))),e}}class c{constructor(e){this.statusCode=e.statusCode,this.reason=e.reason,this.headers=e.headers||{},this.body=e.body}static isInstance(e){if(!e)return!1;const t=e;return"number"==typeof t.statusCode&&"object"==typeof t.headers}}const f="content-length",l={step:"build",tags:["SET_CONTENT_LENGTH","CONTENT_LENGTH"],name:"contentLengthMiddleware",override:!0},d={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},h={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};const p=/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/,y=/(\d+\.){3}\d+/,g=/\.\./,v=(e,t,r)=>{const n=async()=>{const n=r[e]??r[t];return"function"==typeof n?n():n};return"endpoint"===e||"endpoint"===t?async()=>{const e=await n();if(e&&"object"==typeof e){if("url"in e)return e.url.href;if("hostname"in e){const{protocol:t,hostname:r,port:n,path:i}=e;return`${t}//${r}${n?":"+n:""}${i}`}}return e}:n},m=async(e,t,r)=>{const n={},i=t?.getEndpointParameterInstructions?.()||{};for(const[t,o]of Object.entries(i))switch(o.type){case"staticContextParams":n[t]=o.value;break;case"contextParams":n[t]=e[o.name];break;case"clientContextParams":case"builtInParams":n[t]=await v(o.name,t,r)();break;default:throw new Error("Unrecognized endpoint parameter instruction: "+JSON.stringify(o))}return 0===Object.keys(i).length&&Object.assign(n,r),"s3"===String(r.serviceId).toLowerCase()&&await(async e=>{const t=e?.Bucket||"";if("string"==typeof e.Bucket&&(e.Bucket=t.replace(/#/g,encodeURIComponent("#")).replace(/\?/g,encodeURIComponent("?"))),(e=>{const[t,r,n,i,o,a]=e.split(":"),s="arn"===t&&e.split(":").length>=6,u=5===[t,r,n,o,a].filter(Boolean).length;if(s&&!u)throw new Error(`Invalid ARN: ${e} was an invalid ARN.`);return!!("arn"===t&&r&&n&&o&&a)})(t)){if(!0===e.ForcePathStyle)throw new Error("Path-style addressing cannot be used with ARN buckets")}else r=t,(!p.test(r)||y.test(r)||g.test(r)||-1!==t.indexOf(".")&&!String(e.Endpoint).startsWith("http:")||t.toLowerCase()!==t||t.length<3)&&(e.ForcePathStyle=!0);var r;return e.DisableMultiRegionAccessPoints&&(e.disableMultiRegionAccessPoints=!0,e.DisableMRAP=!0),e})(n),n},b={step:"serialize",tags:["ENDPOINT_PARAMETERS","ENDPOINT_V2","ENDPOINT"],name:"endpointV2Middleware",override:!0,relation:"before",toMiddleware:h.name},w=e=>{if("function"==typeof e)return e;const t=Promise.resolve(e);return()=>t},_=e=>{if("string"==typeof e)return _(new URL(e));const{hostname:t,pathname:r,port:n,protocol:i,search:o}=e;let a;return o&&(a=function(e){const t={};if(e=e.replace(/^\?/,""))for(const r of e.split("&")){let[e,n=null]=r.split("=");e=decodeURIComponent(e),n&&(n=decodeURIComponent(n)),e in t?Array.isArray(t[e])?t[e].push(n):t[e]=[t[e],n]:t[e]=n}return t}(o)),{hostname:t,port:n?parseInt(n):void 0,protocol:i,path:r,query:a}},S={tags:["EVENT_STREAM","SIGNATURE","HANDLE"],name:"eventStreamHandlingMiddleware",relation:"after",toMiddleware:"awsAuthMiddleware",override:!0},E=e=>async t=>{const{request:r}=t;return u.isInstance(r)?(r.headers={...r.headers,"Content-Type":"application/vnd.amazon.eventstream","x-amz-content-sha256":"STREAMING-AWS4-HMAC-SHA256-EVENTS"},e({...t,request:r})):e(t)},A={step:"build",tags:["EVENT_STREAM","HEADER","CONTENT_TYPE","CONTENT_SHA256"],name:"eventStreamHeaderMiddleware",override:!0},x={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},R={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0};var O=r(4155);const T="X-Amzn-Trace-Id",M={step:"build",tags:["RECURSION_DETECTION"],name:"recursionDetectionMiddleware",override:!0,priority:"low"};var P,k;(k=P||(P={})).STANDARD="standard",k.ADAPTIVE="adaptive";const I=P.STANDARD,C=["BandwidthLimitExceeded","EC2ThrottledException","LimitExceededException","PriorRequestNotComplete","ProvisionedThroughputExceededException","RequestLimitExceeded","RequestThrottled","RequestThrottledException","SlowDown","ThrottledException","Throttling","ThrottlingException","TooManyRequestsException","TransactionInProgressException"],j=["AbortError","TimeoutError","RequestTimeout","RequestTimeoutException"],L=[500,502,503,504],B=["ECONNRESET","ECONNREFUSED","EPIPE","ETIMEDOUT"],U=e=>429===e.$metadata?.httpStatusCode||C.includes(e.name)||1==e.$retryable?.throttling,N=e=>j.includes(e.name)||B.includes(e?.code||"")||L.includes(e.$metadata?.httpStatusCode||0);class ${constructor(e){this.currentCapacity=0,this.enabled=!1,this.lastMaxRate=0,this.measuredTxRate=0,this.requestCount=0,this.lastTimestamp=0,this.timeWindow=0,this.beta=e?.beta??.7,this.minCapacity=e?.minCapacity??1,this.minFillRate=e?.minFillRate??.5,this.scaleConstant=e?.scaleConstant??.4,this.smooth=e?.smooth??.8;const t=this.getCurrentTimeInSeconds();this.lastThrottleTime=t,this.lastTxRateBucket=Math.floor(this.getCurrentTimeInSeconds()),this.fillRate=this.minFillRate,this.maxCapacity=this.minCapacity}getCurrentTimeInSeconds(){return Date.now()/1e3}async getSendToken(){return this.acquireTokenBucket(1)}async acquireTokenBucket(e){if(this.enabled){if(this.refillTokenBucket(),e>this.currentCapacity){const t=(e-this.currentCapacity)/this.fillRate*1e3;await new Promise((e=>setTimeout(e,t)))}this.currentCapacity=this.currentCapacity-e}}refillTokenBucket(){const e=this.getCurrentTimeInSeconds();if(!this.lastTimestamp)return void(this.lastTimestamp=e);const t=(e-this.lastTimestamp)*this.fillRate;this.currentCapacity=Math.min(this.maxCapacity,this.currentCapacity+t),this.lastTimestamp=e}updateClientSendingRate(e){let t;if(this.updateMeasuredRate(),U(e)){const e=this.enabled?Math.min(this.measuredTxRate,this.fillRate):this.measuredTxRate;this.lastMaxRate=e,this.calculateTimeWindow(),this.lastThrottleTime=this.getCurrentTimeInSeconds(),t=this.cubicThrottle(e),this.enableTokenBucket()}else this.calculateTimeWindow(),t=this.cubicSuccess(this.getCurrentTimeInSeconds());const r=Math.min(t,2*this.measuredTxRate);this.updateTokenBucketRate(r)}calculateTimeWindow(){this.timeWindow=this.getPrecise(Math.pow(this.lastMaxRate*(1-this.beta)/this.scaleConstant,1/3))}cubicThrottle(e){return this.getPrecise(e*this.beta)}cubicSuccess(e){return this.getPrecise(this.scaleConstant*Math.pow(e-this.lastThrottleTime-this.timeWindow,3)+this.lastMaxRate)}enableTokenBucket(){this.enabled=!0}updateTokenBucketRate(e){this.refillTokenBucket(),this.fillRate=Math.max(e,this.minFillRate),this.maxCapacity=Math.max(e,this.minCapacity),this.currentCapacity=Math.min(this.currentCapacity,this.maxCapacity)}updateMeasuredRate(){const e=this.getCurrentTimeInSeconds(),t=Math.floor(2*e)/2;if(this.requestCount++,t>this.lastTxRateBucket){const e=this.requestCount/(t-this.lastTxRateBucket);this.measuredTxRate=this.getPrecise(e*this.smooth+this.measuredTxRate*(1-this.smooth)),this.requestCount=0,this.lastTxRateBucket=t}}getPrecise(e){return parseFloat(e.toFixed(8))}}const D=({retryDelay:e,retryCount:t,retryCost:r})=>({getRetryCount:()=>t,getRetryDelay:()=>Math.min(2e4,e),getRetryCost:()=>r});class F{constructor(e){this.maxAttempts=e,this.mode=P.STANDARD,this.capacity=500,this.retryBackoffStrategy=(()=>{let e=100;return{computeNextBackoffDelay:t=>Math.floor(Math.min(2e4,Math.random()*2**t*e)),setDelayBase:t=>{e=t}}})(),this.maxAttemptsProvider="function"==typeof e?e:async()=>e}async acquireInitialRetryToken(e){return D({retryDelay:100,retryCount:0})}async refreshRetryTokenForRetry(e,t){const r=await this.getMaxAttempts();if(this.shouldRetry(e,t,r)){const r=t.errorType;this.retryBackoffStrategy.setDelayBase("THROTTLING"===r?500:100);const n=this.retryBackoffStrategy.computeNextBackoffDelay(e.getRetryCount()),i=t.retryAfterHint?Math.max(t.retryAfterHint.getTime()-Date.now()||0,n):n,o=this.getCapacityCost(r);return this.capacity-=o,D({retryDelay:i,retryCount:e.getRetryCount()+1,retryCost:o})}throw new Error("No retry token available")}recordSuccess(e){this.capacity=Math.max(500,this.capacity+(e.getRetryCost()??1))}getCapacity(){return this.capacity}async getMaxAttempts(){try{return await this.maxAttemptsProvider()}catch(e){return console.warn("Max attempts provider could not resolve. Using default of 3"),3}}shouldRetry(e,t,r){return e.getRetryCount()<r&&this.capacity>=this.getCapacityCost(t.errorType)&&this.isRetryableError(t.errorType)}getCapacityCost(e){return"TRANSIENT"===e?10:5}isRetryableError(e){return"THROTTLING"===e||"TRANSIENT"===e}}class z{constructor(e,t){this.maxAttemptsProvider=e,this.mode=P.ADAPTIVE;const{rateLimiter:r}=t??{};this.rateLimiter=r??new $,this.standardRetryStrategy=new F(e)}async acquireInitialRetryToken(e){return await this.rateLimiter.getSendToken(),this.standardRetryStrategy.acquireInitialRetryToken(e)}async refreshRetryTokenForRetry(e,t){return this.rateLimiter.updateClientSendingRate(t),this.standardRetryStrategy.refreshRetryTokenForRetry(e,t)}recordSuccess(e){this.rateLimiter.updateClientSendingRate({}),this.standardRetryStrategy.recordSuccess(e)}}var q,H=new Uint8Array(16);function W(){if(!q&&!(q="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return q(H)}const V=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var G=[],K=0;K<256;++K)G.push((K+256).toString(16).substr(1));const Z=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(G[e[t+0]]+G[e[t+1]]+G[e[t+2]]+G[e[t+3]]+"-"+G[e[t+4]]+G[e[t+5]]+"-"+G[e[t+6]]+G[e[t+7]]+"-"+G[e[t+8]]+G[e[t+9]]+"-"+G[e[t+10]]+G[e[t+11]]+G[e[t+12]]+G[e[t+13]]+G[e[t+14]]+G[e[t+15]]).toLowerCase();if(!function(e){return"string"==typeof e&&V.test(e)}(r))throw TypeError("Stringified UUID is invalid");return r},Y=function(e,t,r){var n=(e=e||{}).random||(e.rng||W)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(var i=0;i<16;++i)t[r+i]=n[i];return t}return Z(n)},Q=e=>{const t={errorType:X(e)},r=ee(e.$response);return r&&(t.retryAfterHint=r),t},X=e=>U(e)?"THROTTLING":N(e)?"TRANSIENT":(e=>{if(void 0!==e.$metadata?.httpStatusCode){const t=e.$metadata.httpStatusCode;return 500<=t&&t<=599&&!N(e)}return!1})(e)?"SERVER_ERROR":"CLIENT_ERROR",J={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},ee=e=>{if(!c.isInstance(e))return;const t=Object.keys(e.headers).find((e=>"retry-after"===e.toLowerCase()));if(!t)return;const r=e.headers[t],n=Number(r);return Number.isNaN(n)?new Date(r):new Date(1e3*n)},te={handle:(e,t)=>e(t)},re={step:"initialize",name:"injectResponseValuesMiddleware",tags:["WEBSOCKET","EVENT_STREAM"],override:!0},ne={name:"websocketPortMiddleware",tags:["WEBSOCKET","EVENT_STREAM","PORT"],relation:"after",toMiddleware:"eventStreamHeaderMiddleware",override:!0},ie=(e,t,r)=>{let n,i,o,a=!1;const s=async()=>{i||(i=e());try{n=await i,o=!0,a=!1}finally{i=void 0}return n};return void 0===t?async e=>(o&&!e?.forceRefresh||(n=await s()),n):async e=>(o&&!e?.forceRefresh||(n=await s()),a?n:r&&!r(n)?(a=!0,n):t(n)?(await s(),n):n)};var oe=r(4079);const ae={},se={};for(let e=0;e<256;e++){let t=e.toString(16).toLowerCase();1===t.length&&(t=`0${t}`),ae[e]=t,se[t]=e}function ue(e){let t="";for(let r=0;r<e.byteLength;r++)t+=ae[e[r]];return t}class ce{constructor(e){if(this.bytes=e,8!==e.byteLength)throw new Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(e){if(e>0x8000000000000000||e<-0x8000000000000000)throw new Error(`${e} is too large (or, if negative, too small) to represent as an Int64`);const t=new Uint8Array(8);for(let r=7,n=Math.abs(Math.round(e));r>-1&&n>0;r--,n/=256)t[r]=n;return e<0&&fe(t),new ce(t)}valueOf(){const e=this.bytes.slice(0),t=128&e[0];return t&&fe(e),parseInt(ue(e),16)*(t?-1:1)}toString(){return String(this.valueOf())}}function fe(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,0===e[t]);t--);}class le{constructor(e,t){this.toUtf8=e,this.fromUtf8=t}format(e){const t=[];for(const r of Object.keys(e)){const n=this.fromUtf8(r);t.push(Uint8Array.from([n.byteLength]),n,this.formatHeaderValue(e[r]))}const r=new Uint8Array(t.reduce(((e,t)=>e+t.byteLength),0));let n=0;for(const e of t)r.set(e,n),n+=e.byteLength;return r}formatHeaderValue(e){switch(e.type){case"boolean":return Uint8Array.from([e.value?0:1]);case"byte":return Uint8Array.from([2,e.value]);case"short":const t=new DataView(new ArrayBuffer(3));return t.setUint8(0,3),t.setInt16(1,e.value,!1),new Uint8Array(t.buffer);case"integer":const r=new DataView(new ArrayBuffer(5));return r.setUint8(0,4),r.setInt32(1,e.value,!1),new Uint8Array(r.buffer);case"long":const n=new Uint8Array(9);return n[0]=5,n.set(e.value.bytes,1),n;case"binary":const i=new DataView(new ArrayBuffer(3+e.value.byteLength));i.setUint8(0,6),i.setUint16(1,e.value.byteLength,!1);const o=new Uint8Array(i.buffer);return o.set(e.value,3),o;case"string":const a=this.fromUtf8(e.value),s=new DataView(new ArrayBuffer(3+a.byteLength));s.setUint8(0,7),s.setUint16(1,a.byteLength,!1);const u=new Uint8Array(s.buffer);return u.set(a,3),u;case"timestamp":const c=new Uint8Array(9);return c[0]=8,c.set(ce.fromNumber(e.value.valueOf()).bytes,1),c;case"uuid":if(!Se.test(e.value))throw new Error(`Invalid UUID received: ${e.value}`);const f=new Uint8Array(17);return f[0]=9,f.set(function(e){if(e.length%2!=0)throw new Error("Hex encoded strings must have an even number length");const t=new Uint8Array(e.length/2);for(let r=0;r<e.length;r+=2){const n=e.slice(r,r+2).toLowerCase();if(!(n in se))throw new Error(`Cannot decode unrecognized sequence ${n} as hexadecimal`);t[r/2]=se[n]}return t}(e.value.replace(/\-/g,"")),1),f}}parse(e){const t={};let r=0;for(;r<e.byteLength;){const n=e.getUint8(r++),i=this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+r,n));switch(r+=n,e.getUint8(r++)){case 0:t[i]={type:he,value:!0};break;case 1:t[i]={type:he,value:!1};break;case 2:t[i]={type:pe,value:e.getInt8(r++)};break;case 3:t[i]={type:ye,value:e.getInt16(r,!1)},r+=2;break;case 4:t[i]={type:ge,value:e.getInt32(r,!1)},r+=4;break;case 5:t[i]={type:ve,value:new ce(new Uint8Array(e.buffer,e.byteOffset+r,8))},r+=8;break;case 6:const n=e.getUint16(r,!1);r+=2,t[i]={type:me,value:new Uint8Array(e.buffer,e.byteOffset+r,n)},r+=n;break;case 7:const o=e.getUint16(r,!1);r+=2,t[i]={type:be,value:this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+r,o))},r+=o;break;case 8:t[i]={type:we,value:new Date(new ce(new Uint8Array(e.buffer,e.byteOffset+r,8)).valueOf())},r+=8;break;case 9:const a=new Uint8Array(e.buffer,e.byteOffset+r,16);r+=16,t[i]={type:_e,value:`${ue(a.subarray(0,4))}-${ue(a.subarray(4,6))}-${ue(a.subarray(6,8))}-${ue(a.subarray(8,10))}-${ue(a.subarray(10))}`};break;default:throw new Error("Unrecognized header type tag")}}return t}}var de;!function(e){e[e.boolTrue=0]="boolTrue",e[e.boolFalse=1]="boolFalse",e[e.byte=2]="byte",e[e.short=3]="short",e[e.integer=4]="integer",e[e.long=5]="long",e[e.byteArray=6]="byteArray",e[e.string=7]="string",e[e.timestamp=8]="timestamp",e[e.uuid=9]="uuid"}(de||(de={}));const he="boolean",pe="byte",ye="short",ge="integer",ve="long",me="binary",be="string",we="timestamp",_e="uuid",Se=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;class Ee{constructor(e,t){this.headerMarshaller=new le(e,t),this.messageBuffer=[],this.isEndOfStream=!1}feed(e){this.messageBuffer.push(this.decode(e))}endOfStream(){this.isEndOfStream=!0}getMessage(){const e=this.messageBuffer.pop(),t=this.isEndOfStream;return{getMessage:()=>e,isEndOfStream:()=>t}}getAvailableMessages(){const e=this.messageBuffer;this.messageBuffer=[];const t=this.isEndOfStream;return{getMessages:()=>e,isEndOfStream:()=>t}}encode({headers:e,body:t}){const r=this.headerMarshaller.format(e),n=r.byteLength+t.byteLength+16,i=new Uint8Array(n),o=new DataView(i.buffer,i.byteOffset,i.byteLength),a=new oe.Crc32;return o.setUint32(0,n,!1),o.setUint32(4,r.byteLength,!1),o.setUint32(8,a.update(i.subarray(0,8)).digest(),!1),i.set(r,12),i.set(t,r.byteLength+12),o.setUint32(n-4,a.update(i.subarray(8,n-4)).digest(),!1),i}decode(e){const{headers:t,body:r}=function({byteLength:e,byteOffset:t,buffer:r}){if(e<16)throw new Error("Provided message too short to accommodate event stream message overhead");const n=new DataView(r,t,e),i=n.getUint32(0,!1);if(e!==i)throw new Error("Reported message length does not match received message length");const o=n.getUint32(4,!1),a=n.getUint32(8,!1),s=n.getUint32(e-4,!1),u=(new oe.Crc32).update(new Uint8Array(r,t,8));if(a!==u.digest())throw new Error(`The prelude checksum specified in the message (${a}) does not match the calculated CRC32 checksum (${u.digest()})`);if(u.update(new Uint8Array(r,t+8,e-12)),s!==u.digest())throw new Error(`The message checksum (${u.digest()}) did not match the expected value of ${s}`);return{headers:new DataView(r,t+8+4,o),body:new Uint8Array(r,t+8+4+o,i-o-16)}}(e);return{headers:this.headerMarshaller.parse(t),body:r}}formatHeaders(e){return this.headerMarshaller.format(e)}}class Ae{constructor(e){this.options=e}[Symbol.asyncIterator](){return this.asyncIterator()}async*asyncIterator(){for await(const e of this.options.inputStream){const t=this.options.decoder.decode(e);yield t}}}class xe{constructor(e){this.options=e}[Symbol.asyncIterator](){return this.asyncIterator()}async*asyncIterator(){for await(const e of this.options.messageStream){const t=this.options.encoder.encode(e);yield t}this.options.includeEndFrame&&(yield new Uint8Array(0))}}class Re{constructor(e){this.options=e}[Symbol.asyncIterator](){return this.asyncIterator()}async*asyncIterator(){for await(const e of this.options.messageStream){const t=await this.options.deserializer(e);void 0!==t&&(yield t)}}}class Oe{constructor(e){this.options=e}[Symbol.asyncIterator](){return this.asyncIterator()}async*asyncIterator(){for await(const e of this.options.inputStream){const t=this.options.serializer(e);yield t}}}const Te=e=>new TextDecoder("utf-8").decode(e),Me=e=>(new TextEncoder).encode(e),Pe=e=>"string"==typeof e?Me(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e),ke="X-Amz-Date",Ie="X-Amz-Signature",Ce="X-Amz-Security-Token",je="authorization",Le=ke.toLowerCase(),Be=[je,Le,"date"],Ue=Ie.toLowerCase(),Ne="x-amz-content-sha256",$e=Ce.toLowerCase(),De={authorization:!0,"cache-control":!0,connection:!0,expect:!0,from:!0,"keep-alive":!0,"max-forwards":!0,pragma:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,"x-amzn-trace-id":!0},Fe=/^proxy-/,ze=/^sec-/,qe="AWS4-HMAC-SHA256",He="AWS4-HMAC-SHA256-PAYLOAD",We="aws4_request",Ve={},Ge=[],Ke=(e,t,r)=>`${e}/${t}/${r}/${We}`,Ze=(e,t,r)=>{const n=new e(t);return n.update(Pe(r)),n.digest()},Ye=({headers:e},t,r)=>{const n={};for(const i of Object.keys(e).sort()){if(null==e[i])continue;const o=i.toLowerCase();(o in De||t?.has(o)||Fe.test(o)||ze.test(o))&&(!r||r&&!r.has(o))||(n[o]=e[i].trim().replace(/\s+/g," "))}return n},Qe=e=>encodeURIComponent(e).replace(/[!'()*]/g,Xe),Xe=e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`,Je=async({headers:e,body:t},r)=>{for(const t of Object.keys(e))if(t.toLowerCase()===Ne)return e[t];if(null==t)return"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";if("string"==typeof t||ArrayBuffer.isView(t)||(n=t,"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||"[object ArrayBuffer]"===Object.prototype.toString.call(n))){const e=new r;return e.update(Pe(t)),ue(await e.digest())}var n;return"UNSIGNED-PAYLOAD"},et=({headers:e,query:t,...r})=>({...r,headers:{...e},query:t?tt(t):void 0}),tt=e=>Object.keys(e).reduce(((t,r)=>{const n=e[r];return{...t,[r]:Array.isArray(n)?[...n]:n}}),{}),rt=e=>{e="function"==typeof e.clone?e.clone():et(e);for(const t of Object.keys(e.headers))Be.indexOf(t.toLowerCase())>-1&&delete e.headers[t];return e};class nt{constructor({applyChecksum:e,credentials:t,region:r,service:n,sha256:i,uriEscapePath:o=!0}){this.headerMarshaller=new le(Te,Me),this.service=n,this.sha256=i,this.uriEscapePath=o,this.applyChecksum="boolean"!=typeof e||e,this.regionProvider=w(r),this.credentialProvider=w(t)}async presign(e,t={}){const{signingDate:r=new Date,expiresIn:n=3600,unsignableHeaders:i,unhoistableHeaders:o,signableHeaders:a,signingRegion:s,signingService:u}=t,c=await this.credentialProvider();this.validateResolvedCredentials(c);const f=s??await this.regionProvider(),{longDate:l,shortDate:d}=it(r);if(n>604800)return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");const h=Ke(d,f,u??this.service),p=((e,t={})=>{const{headers:r,query:n={}}="function"==typeof e.clone?e.clone():et(e);for(const e of Object.keys(r)){const i=e.toLowerCase();"x-amz-"!==i.slice(0,6)||t.unhoistableHeaders?.has(i)||(n[e]=r[e],delete r[e])}return{...e,headers:r,query:n}})(rt(e),{unhoistableHeaders:o});c.sessionToken&&(p.query[Ce]=c.sessionToken),p.query["X-Amz-Algorithm"]=qe,p.query["X-Amz-Credential"]=`${c.accessKeyId}/${h}`,p.query[ke]=l,p.query["X-Amz-Expires"]=n.toString(10);const y=Ye(p,i,a);return p.query["X-Amz-SignedHeaders"]=ot(y),p.query[Ie]=await this.getSignature(l,h,this.getSigningKey(c,f,d,u),this.createCanonicalRequest(p,y,await Je(e,this.sha256))),p}async sign(e,t){return"string"==typeof e?this.signString(e,t):e.headers&&e.payload?this.signEvent(e,t):e.message?this.signMessage(e,t):this.signRequest(e,t)}async signEvent({headers:e,payload:t},{signingDate:r=new Date,priorSignature:n,signingRegion:i,signingService:o}){const a=i??await this.regionProvider(),{shortDate:s,longDate:u}=it(r),c=Ke(s,a,o??this.service),f=await Je({headers:{},body:t},this.sha256),l=new this.sha256;l.update(e);const d=ue(await l.digest()),h=[He,u,c,n,d,f].join("\n");return this.signString(h,{signingDate:r,signingRegion:a,signingService:o})}async signMessage(e,{signingDate:t=new Date,signingRegion:r,signingService:n}){return this.signEvent({headers:this.headerMarshaller.format(e.message.headers),payload:e.message.body},{signingDate:t,signingRegion:r,signingService:n,priorSignature:e.priorSignature}).then((t=>({message:e.message,signature:t})))}async signString(e,{signingDate:t=new Date,signingRegion:r,signingService:n}={}){const i=await this.credentialProvider();this.validateResolvedCredentials(i);const o=r??await this.regionProvider(),{shortDate:a}=it(t),s=new this.sha256(await this.getSigningKey(i,o,a,n));return s.update(Pe(e)),ue(await s.digest())}async signRequest(e,{signingDate:t=new Date,signableHeaders:r,unsignableHeaders:n,signingRegion:i,signingService:o}={}){const a=await this.credentialProvider();this.validateResolvedCredentials(a);const s=i??await this.regionProvider(),u=rt(e),{longDate:c,shortDate:f}=it(t),l=Ke(f,s,o??this.service);u.headers[Le]=c,a.sessionToken&&(u.headers[$e]=a.sessionToken);const d=await Je(u,this.sha256);!((e,t)=>{e=e.toLowerCase();for(const r of Object.keys(t))if(e===r.toLowerCase())return!0;return!1})(Ne,u.headers)&&this.applyChecksum&&(u.headers[Ne]=d);const h=Ye(u,n,r),p=await this.getSignature(c,l,this.getSigningKey(a,s,f,o),this.createCanonicalRequest(u,h,d));return u.headers[je]=`${qe} Credential=${a.accessKeyId}/${l}, SignedHeaders=${ot(h)}, Signature=${p}`,u}createCanonicalRequest(e,t,r){const n=Object.keys(t).sort();return`${e.method}\n${this.getCanonicalPath(e)}\n${(({query:e={}})=>{const t=[],r={};for(const n of Object.keys(e).sort()){if(n.toLowerCase()===Ue)continue;t.push(n);const i=e[n];"string"==typeof i?r[n]=`${Qe(n)}=${Qe(i)}`:Array.isArray(i)&&(r[n]=i.slice(0).sort().reduce(((e,t)=>e.concat([`${Qe(n)}=${Qe(t)}`])),[]).join("&"))}return t.map((e=>r[e])).filter((e=>e)).join("&")})(e)}\n${n.map((e=>`${e}:${t[e]}`)).join("\n")}\n\n${n.join(";")}\n${r}`}async createStringToSign(e,t,r){const n=new this.sha256;n.update(Pe(r));const i=await n.digest();return`${qe}\n${e}\n${t}\n${ue(i)}`}getCanonicalPath({path:e}){if(this.uriEscapePath){const t=[];for(const r of e.split("/"))0!==r?.length&&"."!==r&&(".."===r?t.pop():t.push(r));const r=`${e?.startsWith("/")?"/":""}${t.join("/")}${t.length>0&&e?.endsWith("/")?"/":""}`;return encodeURIComponent(r).replace(/%2F/g,"/")}return e}async getSignature(e,t,r,n){const i=await this.createStringToSign(e,t,n),o=new this.sha256(await r);return o.update(Pe(i)),ue(await o.digest())}getSigningKey(e,t,r,n){return(async(e,t,r,n,i)=>{const o=`${r}:${n}:${i}:${ue(await Ze(e,t.secretAccessKey,t.accessKeyId))}:${t.sessionToken}`;if(o in Ve)return Ve[o];for(Ge.push(o);Ge.length>50;)delete Ve[Ge.shift()];let a=`AWS4${t.secretAccessKey}`;for(const t of[r,n,i,We])a=await Ze(e,a,t);return Ve[o]=a})(this.sha256,e,r,t,n||this.service)}validateResolvedCredentials(e){if("object"!=typeof e||"string"!=typeof e.accessKeyId||"string"!=typeof e.secretAccessKey)throw new Error("Resolved credential object is not valid")}}const it=e=>{const t=(r=e,(e=>"number"==typeof e?new Date(1e3*e):"string"==typeof e?Number(e)?new Date(1e3*Number(e)):new Date(e):e)(r).toISOString().replace(/\.\d{3}Z$/,"Z")).replace(/[\-:]/g,"");var r;return{longDate:t,shortDate:t.slice(0,8)}},ot=e=>Object.keys(e).sort().join(";"),at=e=>new Date(Date.now()+e),st=(e,t)=>{const r=Date.parse(e);return((e,t)=>Math.abs(at(t).getTime()-e)>=3e5)(r,t)?r-Date.now():t},ut=e=>c.isInstance(e)?e.headers?.date??e.headers?.Date:void 0,ct={name:"awsAuthMiddleware",tags:["SIGNATURE","AWSAUTH"],relation:"after",toMiddleware:"retryMiddleware",override:!0},ft=JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}');let lt=ft,dt="";const ht=e=>{const{partitions:t}=lt;for(const r of t){const{regions:t,outputs:n}=r;for(const[r,i]of Object.entries(t))if(r===e)return{...n,...i}}for(const r of t){const{regionRegex:t,outputs:n}=r;if(new RegExp(t).test(e))return{...n}}const r=t.find((e=>"aws"===e.id));if(!r)throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...r.outputs}},pt=(e,t="")=>{lt=e,dt=t},yt=()=>{pt(ft,"")},gt=()=>dt,vt="endpoints";function mt(e){return"object"!=typeof e||null==e?e:"ref"in e?`$${mt(e.ref)}`:"fn"in e?`${e.fn}(${(e.argv||[]).map(mt).join(", ")})`:JSON.stringify(e,null,2)}class bt extends Error{constructor(e){super(e),this.name="EndpointError"}}const wt=new RegExp("^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$"),_t=e=>wt.test(e)||e.startsWith("[")&&e.endsWith("]"),St=new RegExp("^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$"),Et=(e,t=!1)=>{if(!t)return St.test(e);const r=e.split(".");for(const e of r)if(!Et(e))return!1;return!0},At=(e,t=!1)=>{if(t){for(const t of e.split("."))if(!At(t))return!1;return!0}return!(!Et(e)||e.length<3||e.length>63||e!==e.toLowerCase()||_t(e))},xt=e=>{const t=e.split(":");if(t.length<6)return null;const[r,n,i,o,a,...s]=t;return"arn"!==r||""===n||""===i||""===s[0]?null:{partition:n,service:i,region:o,accountId:a,resourceId:s[0].includes("/")?s[0].split("/"):s}},Rt=(e,t)=>e===t,Ot=(e,t)=>(e=>{const t=e.split("."),r=[];for(const n of t){const t=n.indexOf("[");if(-1!==t){if(n.indexOf("]")!==n.length-1)throw new bt(`Path: '${e}' does not end with ']'`);const i=n.slice(t+1,-1);if(Number.isNaN(parseInt(i)))throw new bt(`Invalid array index: '${i}' in path: '${e}'`);0!==t&&r.push(n.slice(0,t)),r.push(i)}else r.push(n)}return r})(t).reduce(((r,n)=>{if("object"!=typeof r)throw new bt(`Index '${n}' in '${t}' not found in '${JSON.stringify(e)}'`);return Array.isArray(r)?r[parseInt(n)]:r[n]}),e),Tt=e=>null!=e,Mt=e=>!e;var Pt,kt,It,Ct;!function(e){e.HEADER="header",e.QUERY="query"}(Pt||(Pt={})),function(e){e.AAAA="AAAA",e.A="A"}(kt||(kt={})),function(e){e.HTTP="http",e.HTTPS="https"}(It||(It={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(Ct||(Ct={}));const jt={[It.HTTP]:80,[It.HTTPS]:443},Lt=e=>{const t=(()=>{try{if(e instanceof URL)return e;if("object"==typeof e&&"hostname"in e){const{hostname:t,port:r,protocol:n="",path:i="",query:o={}}=e,a=new URL(`${n}//${t}${r?`:${r}`:""}${i}`);return a.search=Object.entries(o).map((([e,t])=>`${e}=${t}`)).join("&"),a}return new URL(e)}catch(e){return null}})();if(!t)return console.error(`Unable to parse ${JSON.stringify(e)} as a whatwg URL.`),null;const r=t.href,{host:n,hostname:i,pathname:o,protocol:a,search:s}=t;if(s)return null;const u=a.slice(0,-1);if(!Object.values(It).includes(u))return null;const c=_t(i);return{scheme:u,authority:`${n}${r.includes(`${n}:${jt[u]}`)||"string"==typeof e&&e.includes(`${n}:${jt[u]}`)?`:${jt[u]}`:""}`,path:o,normalizedPath:o.endsWith("/")?o:`${o}/`,isIp:c}},Bt=(e,t)=>e===t,Ut=(e,t,r,n)=>t>=r||e.length<r?null:n?e.substring(e.length-r,e.length-t):e.substring(t,r),Nt=e=>encodeURIComponent(e).replace(/[!*'()]/g,(e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`)),$t=(e,t)=>{const r=[],n={...t.endpointParams,...t.referenceRecord};let i=0;for(;i<e.length;){const t=e.indexOf("{",i);if(-1===t){r.push(e.slice(i));break}r.push(e.slice(i,t));const o=e.indexOf("}",t);if(-1===o){r.push(e.slice(t));break}"{"===e[t+1]&&"}"===e[o+1]&&(r.push(e.slice(t+1,o)),i=o+2);const a=e.substring(t+1,o);if(a.includes("#")){const[e,t]=a.split("#");r.push(Ot(n[e],t))}else r.push(n[a]);i=o+1}return r.join("")},Dt=(e,t,r)=>{if("string"==typeof e)return $t(e,r);if(e.fn)return Ft(e,r);if(e.ref)return(({ref:e},t)=>({...t.endpointParams,...t.referenceRecord}[e]))(e,r);throw new bt(`'${t}': ${String(e)} is not a string, function or reference.`)},Ft=({fn:e,argv:t},r)=>{const i=t.map((e=>["boolean","number"].includes(typeof e)?e:Dt(e,"arg",r)));return e.split(".").reduce(((e,t)=>e[t]),n)(...i)},zt=({assign:e,...t},r)=>{if(e&&e in r.referenceRecord)throw new bt(`'${e}' is already defined in Reference Record.`);const n=Ft(t,r);return r.logger?.debug?.(vt,`evaluateCondition: ${mt(t)} = ${mt(n)}`),{result:""===n||!!n,...null!=e&&{toAssign:{name:e,value:n}}}},qt=(e=[],t)=>{const r={};for(const n of e){const{result:e,toAssign:i}=zt(n,{...t,referenceRecord:{...t.referenceRecord,...r}});if(!e)return{result:e};i&&(r[i.name]=i.value,t.logger?.debug?.(vt,`assign: ${i.name} := ${mt(i.value)}`))}return{result:!0,referenceRecord:r}},Ht=(e,t)=>Object.entries(e).reduce(((e,[r,n])=>({...e,[r]:n.map((e=>{const n=Dt(e,"Header value entry",t);if("string"!=typeof n)throw new bt(`Header '${r}' value '${n}' is not a string`);return n}))})),{}),Wt=(e,t)=>{if(Array.isArray(e))return e.map((e=>Wt(e,t)));switch(typeof e){case"string":return $t(e,t);case"object":if(null===e)throw new bt(`Unexpected endpoint property: ${e}`);return Vt(e,t);case"boolean":return e;default:throw new bt("Unexpected endpoint property type: "+typeof e)}},Vt=(e,t)=>Object.entries(e).reduce(((e,[r,n])=>({...e,[r]:Wt(n,t)})),{}),Gt=(e,t)=>{const r=Dt(e,"Endpoint URL",t);if("string"==typeof r)try{return new URL(r)}catch(e){throw console.error(`Failed to construct URL with ${r}`,e),e}throw new bt("Endpoint URL must be a string, got "+typeof r)},Kt=(e,t)=>{const{conditions:r,endpoint:n}=e,{result:i,referenceRecord:o}=qt(r,t);if(!i)return;const a={...t,referenceRecord:{...t.referenceRecord,...o}},{url:s,properties:u,headers:c}=n;return t.logger?.debug?.(vt,`Resolving endpoint from template: ${mt(n)}`),{...null!=c&&{headers:Ht(c,a)},...null!=u&&{properties:Vt(u,a)},url:Gt(s,a)}},Zt=(e,t)=>{const{conditions:r,error:n}=e,{result:i,referenceRecord:o}=qt(r,t);if(i)throw new bt(Dt(n,"Error",{...t,referenceRecord:{...t.referenceRecord,...o}}))},Yt=(e,t)=>{const{conditions:r,rules:n}=e,{result:i,referenceRecord:o}=qt(r,t);if(i)return Qt(n,{...t,referenceRecord:{...t.referenceRecord,...o}})},Qt=(e,t)=>{for(const r of e)if("endpoint"===r.type){const e=Kt(r,t);if(e)return e}else if("error"===r.type)Zt(r,t);else{if("tree"!==r.type)throw new bt(`Unknown endpoint rule: ${r}`);{const e=Yt(r,t);if(e)return e}}throw new bt("Rules evaluation failed")},Xt="user-agent",Jt="x-amz-user-agent",er=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,tr=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g,rr=e=>{const t=e[0].split("/").map((e=>e.replace(er,"-"))).join("/"),r=e[1]?.replace(tr,"-"),n=t.indexOf("/"),i=t.substring(0,n);let o=t.substring(n+1);return"api"===i&&(o=o.toLowerCase()),[i,o,r].filter((e=>e&&e.length>0)).reduce(((e,t,r)=>{switch(r){case 0:return t;case 1:return`${e}/${t}`;default:return`${e}#${t}`}}),"")},nr={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},ir={step:"initialize",name:"injectSessionIdMiddleware",tags:["WEBSOCKET","EVENT_STREAM"],override:!0},or={name:"websocketEndpointMiddleware",tags:["WEBSOCKET","EVENT_STREAM"],relation:"after",toMiddleware:"eventStreamHeaderMiddleware",override:!0},ar=e=>"ws:"===e.protocol||"wss:"===e.protocol;class sr{constructor(e){this.signer=e.signer}presign(e,t={}){return this.signer.presign(e,t)}async sign(e,t){return u.isInstance(e)&&ar(e)?{...await this.signer.presign({...e,body:""},{expiresIn:60,unsignableHeaders:new Set(Object.keys(e.headers).filter((e=>"host"!==e)))}),body:e.body}:this.signer.sign(e,t)}}function ur(e,t){return async function(r){const{value:n}=r.headers[":message-type"];if("error"===n){const e=new Error(r.headers[":error-message"].value||"UnknownError");throw e.name=r.headers[":error-code"].value,e}if("exception"===n){const n=r.headers[":exception-type"].value,i={[n]:r},o=await e(i);if(o.$unknown){const e=new Error(t(r.body));throw e.name=n,e}throw o[n]}if("event"===n){const t={[r.headers[":event-type"].value]:r},n=await e(t);if(n.$unknown)return;return n}throw Error(`Unrecognizable event type: ${r.headers[":event-type"].value}`)}}class cr{constructor({utf8Encoder:e,utf8Decoder:t}){this.eventStreamCodec=new Ee(e,t),this.utfEncoder=e}deserialize(e,t){const r=function(e){let t=0,r=0,n=null,i=null;const o=e=>{if("number"!=typeof e)throw new Error("Attempted to allocate an event message where size was not a number: "+e);t=e,r=4,n=new Uint8Array(e),new DataView(n.buffer).setUint32(0,e,!1)};return{[Symbol.asyncIterator]:async function*(){const a=e[Symbol.asyncIterator]();for(;;){const{value:e,done:s}=await a.next();if(s){if(!t)return;if(t!==r)throw new Error("Truncated event message received.");return void(yield n)}const u=e.length;let c=0;for(;c<u;){if(!n){const t=u-c;i||(i=new Uint8Array(4));const n=Math.min(4-r,t);if(i.set(e.slice(c,c+n),r),r+=n,c+=n,r<4)break;o(new DataView(i.buffer).getUint32(0,!1)),i=null}const a=Math.min(t-r,u-c);n.set(e.slice(c,c+a),r),r+=a,c+=a,t&&t===r&&(yield n,n=null,t=0,r=0)}}}}}(e);return new Re({messageStream:new Ae({inputStream:r,decoder:this.eventStreamCodec}),deserializer:ur(t,this.utfEncoder)})}serialize(e,t){return new xe({messageStream:new Oe({inputStream:e,serializer:t}),encoder:this.eventStreamCodec,includeEndFrame:!0})}}const fr=e=>({[Symbol.asyncIterator]:async function*(){const t=e.getReader();try{for(;;){const{done:e,value:r}=await t.read();if(e)return;yield r}}finally{t.releaseLock()}}}),lr=e=>{const t=e[Symbol.asyncIterator]();return new ReadableStream({async pull(e){const{done:r,value:n}=await t.next();if(r)return e.close();e.enqueue(n)}})};class dr{constructor({utf8Encoder:e,utf8Decoder:t}){this.universalMarshaller=new cr({utf8Decoder:t,utf8Encoder:e})}deserialize(e,t){const r=hr(e)?fr(e):e;return this.universalMarshaller.deserialize(r,t)}serialize(e,t){const r=this.universalMarshaller.serialize(e,t);return"function"==typeof ReadableStream?lr(r):r}}const hr=e=>"function"==typeof ReadableStream&&e instanceof ReadableStream,pr=e=>new dr(e);function yr(e){const t=[];for(let r of Object.keys(e).sort()){const n=e[r];if(r=Qe(r),Array.isArray(n))for(let e=0,i=n.length;e<i;e++)t.push(`${r}=${Qe(n[e])}`);else{let e=r;(n||"string"==typeof n)&&(e+=`=${Qe(n)}`),t.push(e)}}return t.join("&")}function gr(e=0){return new Promise(((t,r)=>{e&&setTimeout((()=>{const t=new Error(`Request did not complete within ${e} ms`);t.name="TimeoutError",r(t)}),e)}))}class vr{constructor(e){"function"==typeof e?this.configProvider=e().then((e=>e||{})):(this.config=e??{},this.configProvider=Promise.resolve(this.config))}destroy(){}async handle(e,{abortSignal:t}={}){this.config||(this.config=await this.configProvider);const r=this.config.requestTimeout;if(t?.aborted){const e=new Error("Request aborted");return e.name="AbortError",Promise.reject(e)}let n=e.path;const i=yr(e.query||{});i&&(n+=`?${i}`),e.fragment&&(n+=`#${e.fragment}`);let o="";null==e.username&&null==e.password||(o=`${e.username??""}:${e.password??""}@`);const{port:a,method:s}=e,u=`${e.protocol}//${o}${e.hostname}${a?`:${a}`:""}${n}`,f={body:"GET"===s||"HEAD"===s?void 0:e.body,headers:new Headers(e.headers),method:s};"undefined"!=typeof AbortController&&(f.signal=t);const l=new Request(u,f),d=[fetch(l).then((e=>{const t=e.headers,r={};for(const e of t.entries())r[e[0]]=e[1];return null!=e.body?{response:new c({headers:r,reason:e.statusText,statusCode:e.status,body:e.body})}:e.blob().then((t=>({response:new c({headers:r,reason:e.statusText,statusCode:e.status,body:t})})))})),gr(r)];return t&&d.push(new Promise(((e,r)=>{t.onabort=()=>{const e=new Error("Request aborted");e.name="AbortError",r(e)}}))),Promise.race(d)}}const mr={},br=new Array(64);for(let e=0,t="A".charCodeAt(0),r="Z".charCodeAt(0);e+t<=r;e++){const r=String.fromCharCode(e+t);mr[r]=e,br[e]=r}for(let e=0,t="a".charCodeAt(0),r="z".charCodeAt(0);e+t<=r;e++){const r=String.fromCharCode(e+t),n=e+26;mr[r]=n,br[n]=r}for(let e=0;e<10;e++){mr[e.toString(10)]=e+52;const t=e.toString(10),r=e+52;mr[t]=r,br[r]=t}mr["+"]=62,br[62]="+",mr["/"]=63,br[63]="/";const wr=e=>{let t=e.length/4*3;"=="===e.slice(-2)?t-=2:"="===e.slice(-1)&&t--;const r=new ArrayBuffer(t),n=new DataView(r);for(let t=0;t<e.length;t+=4){let r=0,i=0;for(let n=t,o=t+3;n<=o;n++)if("="!==e[n]){if(!(e[n]in mr))throw new TypeError(`Invalid character ${e[n]} in base64 string.`);r|=mr[e[n]]<<6*(o-n),i+=6}else r>>=6;const o=t/4*3;r>>=i%8;const a=Math.floor(i/8);for(let e=0;e<a;e++){const t=8*(a-e-1);n.setUint8(o+e,(r&255<<t)>>t)}}return new Uint8Array(r)};function _r(e){let t="";for(let r=0;r<e.length;r+=3){let n=0,i=0;for(let t=r,o=Math.min(r+3,e.length);t<o;t++)n|=e[t]<<8*(o-t-1),i+=8;const o=Math.ceil(i/6);n<<=6*o-i;for(let e=1;e<=o;e++){const r=6*(o-e);t+=br[(n&63<<r)>>r]}t+="==".slice(0,4-o)}return t}const Sr=e=>"function"==typeof Blob&&e instanceof Blob?async function(e){const t=await function(e){return new Promise(((t,r)=>{const n=new FileReader;n.onloadend=()=>{if(2!==n.readyState)return r(new Error("Reader aborted too early"));const e=n.result??"",i=e.indexOf(","),o=i>-1?i+1:e.length;t(e.substring(o))},n.onabort=()=>r(new Error("Read aborted")),n.onerror=()=>r(n.error),n.readAsDataURL(e)}))}(e),r=wr(t);return new Uint8Array(r)}(e):async function(e){let t=new Uint8Array(0);const r=e.getReader();let n=!1;for(;!n;){const{done:e,value:i}=await r.read();if(i){const e=t;t=new Uint8Array(e.length+i.length),t.set(e),t.set(i,e.length)}n=e}return t}(e),Er=2e3;class Ar{constructor(e,t=new vr){this.metadata={handlerProtocol:"websocket/h1.1"},this.sockets={},this.httpHandler=t,this.configPromise="function"==typeof e?e().then((e=>e??{})):Promise.resolve(e??{})}destroy(){for(const[e,t]of Object.entries(this.sockets)){for(const e of t)e.close(1e3,"Socket closed through destroy() call");delete this.sockets[e]}}async handle(e){if(!ar(e))return this.httpHandler.handle(e);const t=function(e){const{port:t,query:r}=e;let{protocol:n,path:i,hostname:o}=e;n&&":"!==n.slice(-1)&&(n+=":"),t&&(o+=`:${t}`),i&&"/"!==i.charAt(0)&&(i=`/${i}`);let a=r?yr(r):"";a&&"?"!==a[0]&&(a=`?${a}`);let s="";null==e.username&&null==e.password||(s=`${e.username??""}:${e.password??""}@`);let u="";return e.fragment&&(u=`#${e.fragment}`),`${n}//${s}${o}${i}${a}${u}`}(e),r=new WebSocket(t);this.sockets[t]||(this.sockets[t]=[]),this.sockets[t].push(r),r.binaryType="arraybuffer";const{connectionTimeout:n=Er}=await this.configPromise;await this.waitForReady(r,n);const{body:i}=e,o=xr(i),a=this.connect(r,o),s=Rr(a);return{response:new c({statusCode:200,body:s})}}removeNotUsableSockets(e){this.sockets[e]=(this.sockets[e]??[]).filter((e=>![WebSocket.CLOSING,WebSocket.CLOSED].includes(e.readyState)))}waitForReady(e,t){return new Promise(((r,n)=>{const i=setTimeout((()=>{this.removeNotUsableSockets(e.url),n({$metadata:{httpStatusCode:500}})}),t);e.onopen=()=>{clearTimeout(i),r()}}))}connect(e,t){let r,n=!1,i=()=>{},o=()=>{};e.onmessage=e=>{o({done:!1,value:new Uint8Array(e.data)})},e.onerror=t=>{n=!0,e.close(),i(t)},e.onclose=()=>{this.removeNotUsableSockets(e.url),n||(r?i(r):o({done:!0,value:void 0}))};const a={[Symbol.asyncIterator]:()=>({next:()=>new Promise(((e,t)=>{o=e,i=t}))})};return(async()=>{try{for await(const r of t)e.send(r)}catch(e){r=e}finally{e.close(1e3)}})(),a}}const xr=e=>e[Symbol.asyncIterator]?e:Or(e)?fr(e):{[Symbol.asyncIterator]:async function*(){yield e}},Rr=e=>"function"==typeof ReadableStream?lr(e):e,Or=e=>"function"==typeof ReadableStream&&e instanceof ReadableStream;class Tr{trace(){}debug(){}info(){}warn(){}error(){}}const Mr=()=>{let e=[],t=[];const r=new Set,n=r=>(e.forEach((e=>{r.add(e.middleware,{...e})})),t.forEach((e=>{r.addRelativeTo(e.middleware,{...e})})),r),i=e=>{const t=[];return e.before.forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...i(e))})),t.push(e),e.after.reverse().forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...i(e))})),t},o=(r=!1)=>{const n=[],o=[],a={};e.forEach((e=>{const t={...e,before:[],after:[]};t.name&&(a[t.name]=t),n.push(t)})),t.forEach((e=>{const t={...e,before:[],after:[]};t.name&&(a[t.name]=t),o.push(t)})),o.forEach((e=>{if(e.toMiddleware){const t=a[e.toMiddleware];if(void 0===t){if(r)return;throw new Error(`${e.toMiddleware} is not found when adding ${e.name||"anonymous"} middleware ${e.relation} ${e.toMiddleware}`)}"after"===e.relation&&t.after.push(e),"before"===e.relation&&t.before.push(e)}}));const s=(u=n,u.sort(((e,t)=>Pr[t.step]-Pr[e.step]||kr[t.priority||"normal"]-kr[e.priority||"normal"]))).map(i).reduce(((e,t)=>(e.push(...t),e)),[]);var u;return s},a={add:(t,n={})=>{const{name:i,override:o}=n,a={step:"initialize",priority:"normal",middleware:t,...n};if(i){if(r.has(i)){if(!o)throw new Error(`Duplicate middleware name '${i}'`);const t=e.findIndex((e=>e.name===i)),r=e[t];if(r.step!==a.step||r.priority!==a.priority)throw new Error(`"${i}" middleware with ${r.priority} priority in ${r.step} step cannot be overridden by same-name middleware with ${a.priority} priority in ${a.step} step.`);e.splice(t,1)}r.add(i)}e.push(a)},addRelativeTo:(e,n)=>{const{name:i,override:o}=n,a={middleware:e,...n};if(i){if(r.has(i)){if(!o)throw new Error(`Duplicate middleware name '${i}'`);const e=t.findIndex((e=>e.name===i)),r=t[e];if(r.toMiddleware!==a.toMiddleware||r.relation!==a.relation)throw new Error(`"${i}" middleware ${r.relation} "${r.toMiddleware}" middleware cannot be overridden by same-name middleware ${a.relation} "${a.toMiddleware}" middleware.`);t.splice(e,1)}r.add(i)}t.push(a)},clone:()=>n(Mr()),use:e=>{e.applyToStack(a)},remove:n=>"string"==typeof n?(n=>{let i=!1;const o=e=>!e.name||e.name!==n||(i=!0,r.delete(n),!1);return e=e.filter(o),t=t.filter(o),i})(n):(n=>{let i=!1;const o=e=>e.middleware!==n||(i=!0,e.name&&r.delete(e.name),!1);return e=e.filter(o),t=t.filter(o),i})(n),removeByTag:n=>{let i=!1;const o=e=>{const{tags:t,name:o}=e;return!t||!t.includes(n)||(o&&r.delete(o),i=!0,!1)};return e=e.filter(o),t=t.filter(o),i},concat:e=>{const t=n(Mr());return t.use(e),t},applyToStack:n,identify:()=>o(!0).map((e=>e.name+": "+(e.tags||[]).join(","))),resolve:(e,t)=>{for(const r of o().map((e=>e.middleware)).reverse())e=r(e,t);return e}};return a},Pr={initialize:5,serialize:4,build:3,finalizeRequest:2,deserialize:1},kr={high:3,normal:2,low:1};class Ir{constructor(e){this.middlewareStack=Mr(),this.config=e}send(e,t,r){const n="function"!=typeof t?t:void 0,i="function"==typeof t?t:r,o=e.resolveMiddleware(this.middlewareStack,this.config,n);if(!i)return o(e).then((e=>e.output));o(e).then((e=>i(null,e.output)),(e=>i(e))).catch((()=>{}))}destroy(){this.config.requestHandler.destroy&&this.config.requestHandler.destroy()}}class Cr extends Uint8Array{static fromString(e,t="utf-8"){if("string"==typeof e)return function(e,t){return"base64"===t?Cr.mutate(wr(e)):Cr.mutate(Me(e))}(e,t);throw new Error(`Unsupported conversion from ${typeof e} to Uint8ArrayBlobAdapter.`)}static mutate(e){return Object.setPrototypeOf(e,Cr.prototype),e}transformToString(e="utf-8"){return function(e,t="utf-8"){return"base64"===t?_r(e):Te(e)}(this,e)}}class jr{constructor(){this.middlewareStack=Mr()}}const Lr=e=>{switch(e){case"true":return!0;case"false":return!1;default:throw new Error(`Unable to parse boolean value "${e}"`)}},Br=e=>{if(null!=e){if("number"==typeof e){if(0!==e&&1!==e||Vr.warn(Wr(`Expected boolean, got ${typeof e}: ${e}`)),0===e)return!1;if(1===e)return!0}if("string"==typeof e){const t=e.toLowerCase();if("false"!==t&&"true"!==t||Vr.warn(Wr(`Expected boolean, got ${typeof e}: ${e}`)),"false"===t)return!1;if("true"===t)return!0}if("boolean"==typeof e)return e;throw new TypeError(`Expected boolean, got ${typeof e}: ${e}`)}},Ur=(Math.ceil(2**127*(2-2**-23)),e=>{if(null!=e){if(Number.isInteger(e)&&!Number.isNaN(e))return e;throw new TypeError(`Expected integer, got ${typeof e}: ${e}`)}}),Nr=(e,t)=>{const r=Ur(e);if(void 0!==r&&$r(r,t)!==r)throw new TypeError(`Expected ${t}-bit integer, got ${e}`);return r},$r=(e,t)=>{switch(t){case 32:return Int32Array.of(e)[0];case 16:return Int16Array.of(e)[0];case 8:return Int8Array.of(e)[0]}},Dr=e=>{if(null!=e){if("string"==typeof e)return e;if(["boolean","number","bigint"].includes(typeof e))return Vr.warn(Wr(`Expected string, got ${typeof e}: ${e}`)),String(e);throw new TypeError(`Expected string, got ${typeof e}: ${e}`)}},Fr=/(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g,zr=e=>"string"==typeof e?qr(e):(e=>{if(null!=e){if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return String(t)!==String(e)&&Vr.warn(Wr(`Expected number but observed string: ${e}`)),t}if("number"==typeof e)return e;throw new TypeError(`Expected number, got ${typeof e}: ${e}`)}})(e),qr=e=>{switch(e){case"NaN":return NaN;case"Infinity":return 1/0;case"-Infinity":return-1/0;default:throw new Error(`Unable to parse float value: ${e}`)}},Hr=e=>(e=>Nr(e,32))("string"==typeof e?(e=>{const t=e.match(Fr);if(null===t||t[0].length!==e.length)throw new TypeError("Expected real number, got implicit NaN");return parseFloat(e)})(e):e),Wr=e=>String(new TypeError(e).stack||e).split("\n").slice(0,5).filter((e=>!e.includes("stackTraceWarning"))).join("\n"),Vr={warn:console.warn};class Gr extends Error{constructor(e){super(e.message),Object.setPrototypeOf(this,Gr.prototype),this.name=e.name,this.$fault=e.$fault,this.$metadata=e.$metadata}}const Kr=(e,t={})=>{Object.entries(t).filter((([,e])=>void 0!==e)).forEach((([t,r])=>{null!=e[t]&&""!==e[t]||(e[t]=r)}));const r=e.message||e.Message||"UnknownError";return e.message=r,delete e.Message,e},Zr=e=>{switch(e){case"standard":case"cross-region":return{retryMode:"standard",connectionTimeout:3100};case"in-region":return{retryMode:"standard",connectionTimeout:1100};case"mobile":return{retryMode:"standard",connectionTimeout:3e4};default:return{}}},Yr=function(){const e=Object.getPrototypeOf(this).constructor,t=new(Function.bind.apply(String,[null,...arguments]));return Object.setPrototypeOf(t,e.prototype),t};function Qr(e,t,r){let n,i,o;if(void 0===t&&void 0===r)n={},o=e;else{if(n=e,"function"==typeof t)return i=t,o=r,Jr(n,i,o);o=t}for(const e of Object.keys(o))Array.isArray(o[e])?en(n,null,o,e):n[e]=o[e];return n}Yr.prototype=Object.create(String.prototype,{constructor:{value:Yr,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf(Yr,String);const Xr=(e,t)=>{const r={};for(const n in t)en(r,e,t,n);return r},Jr=(e,t,r)=>Qr(e,Object.entries(r).reduce(((e,[r,n])=>(Array.isArray(n)?e[r]=n:e[r]="function"==typeof n?[t,n()]:[t,n],e)),{})),en=(e,t,r,n)=>{if(null!==t){let i=r[n];"function"==typeof i&&(i=[,i]);const[o=tn,a=rn,s=n]=i;return void(("function"==typeof o&&o(t[s])||"function"!=typeof o&&o)&&(e[n]=a(t[s])))}let[i,o]=r[n];if("function"==typeof o){let t;const r=void 0===i&&null!=(t=o()),a="function"==typeof i&&!!i(void 0)||"function"!=typeof i&&!!i;r?e[n]=t:a&&(e[n]=o())}else{const t=void 0===i&&null!=o,r="function"==typeof i&&!!i(o)||"function"!=typeof i&&!!i;(t||r)&&(e[n]=o)}},tn=e=>null!=e,rn=e=>e,nn=e=>{if(null==e)return{};if(Array.isArray(e))return e.filter((e=>null!=e));if("object"==typeof e){const t={};for(const r of Object.keys(e))null!=e[r]&&(t[r]=nn(e[r]));return t}return e};var on=r(7643);const an=e=>{if("string"==typeof e){let t=e.length;for(let r=t-1;r>=0;r--){const n=e.charCodeAt(r);n>127&&n<=2047?t++:n>2047&&n<=65535&&(t+=2),n>=56320&&n<=57343&&r--}return t}if("number"==typeof e.byteLength)return e.byteLength;if("number"==typeof e.size)return e.size;throw new Error(`Body Length computation failed for ${e}`)};var sn=r(1206),un=r.n(sn);const cn=({serviceId:e,clientVersion:t})=>async()=>{const r="undefined"!=typeof window&&window?.navigator?.userAgent?un().parse(window.navigator.userAgent):void 0,n=[["aws-sdk-js",t],["ua","2.0"],[`os/${r?.os?.name||"other"}`,r?.os?.version],["lang/js"],["md/browser",`${r?.browser?.name??"unknown"}_${r?.browser?.version??"unknown"}`]];return e&&n.push([`api/${e}`,t]),n},fn="required",ln="fn",dn="argv",hn="ref",pn="PartitionResult",yn="tree",gn="error",vn="endpoint",mn="stringEquals",bn={[fn]:!1,type:"String"},wn={[fn]:!0,default:!1,type:"Boolean"},_n={[hn]:"Region"},Sn={[hn]:"Endpoint"},En={[ln]:"booleanEquals",[dn]:[{[hn]:"UseFIPS"},!0]},An={[ln]:"booleanEquals",[dn]:[{[hn]:"UseDualStack"},!0]},xn={},Rn={[ln]:"booleanEquals",[dn]:[!0,{[ln]:"getAttr",[dn]:[{[hn]:pn},"supportsFIPS"]}]},On={[ln]:"booleanEquals",[dn]:[!0,{[ln]:"getAttr",[dn]:[{[hn]:pn},"supportsDualStack"]}]},Tn=[Sn],Mn=[En],Pn=[An],kn={version:"1.0",parameters:{Region:bn,UseDualStack:wn,UseFIPS:wn,Endpoint:bn},rules:[{conditions:[{[ln]:"aws.partition",[dn]:[_n],assign:pn}],type:yn,rules:[{conditions:[{[ln]:"isSet",[dn]:Tn},{[ln]:"parseURL",[dn]:Tn,assign:"url"}],type:yn,rules:[{conditions:Mn,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:gn},{type:yn,rules:[{conditions:Pn,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:gn},{endpoint:{url:Sn,properties:xn,headers:xn},type:vn}]}]},{conditions:[En,An],type:yn,rules:[{conditions:[Rn,On],type:yn,rules:[{endpoint:{url:"https://transcribestreaming-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:xn,headers:xn},type:vn}]},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:gn}]},{conditions:Mn,type:yn,rules:[{conditions:[Rn],type:yn,rules:[{type:yn,rules:[{conditions:[{[ln]:mn,[dn]:[_n,"transcribestreaming-ca-central-1"]}],endpoint:{url:"https://transcribestreaming-fips.ca-central-1.amazonaws.com",properties:xn,headers:xn},type:vn},{conditions:[{[ln]:mn,[dn]:[_n,"transcribestreaming-us-east-1"]}],endpoint:{url:"https://transcribestreaming-fips.us-east-1.amazonaws.com",properties:xn,headers:xn},type:vn},{conditions:[{[ln]:mn,[dn]:[_n,"transcribestreaming-us-east-2"]}],endpoint:{url:"https://transcribestreaming-fips.us-east-2.amazonaws.com",properties:xn,headers:xn},type:vn},{conditions:[{[ln]:mn,[dn]:[_n,"transcribestreaming-us-west-2"]}],endpoint:{url:"https://transcribestreaming-fips.us-west-2.amazonaws.com",properties:xn,headers:xn},type:vn},{endpoint:{url:"https://transcribestreaming-fips.{Region}.{PartitionResult#dnsSuffix}",properties:xn,headers:xn},type:vn}]}]},{error:"FIPS is enabled but this partition does not support FIPS",type:gn}]},{conditions:Pn,type:yn,rules:[{conditions:[On],type:yn,rules:[{endpoint:{url:"https://transcribestreaming.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:xn,headers:xn},type:vn}]},{error:"DualStack is enabled but this partition does not support DualStack",type:gn}]},{endpoint:{url:"https://transcribestreaming.{Region}.{PartitionResult#dnsSuffix}",properties:xn,headers:xn},type:vn}]}]},In=(e,t={})=>((e,t)=>{const{endpointParams:r,logger:n}=t,{parameters:i,rules:o}=e;t.logger?.debug?.(`${vt} Initial EndpointParams: ${mt(r)}`);const a=Object.entries(i).filter((([,e])=>null!=e.default)).map((([e,t])=>[e,t.default]));if(a.length>0)for(const[e,t]of a)r[e]=r[e]??t;const s=Object.entries(i).filter((([,e])=>e.required)).map((([e])=>e));for(const e of s)if(null==r[e])throw new bt(`Missing required parameter: '${e}'`);const u=Qt(o,{endpointParams:r,logger:n,referenceRecord:{}});if(t.endpointParams?.Endpoint)try{const e=new URL(t.endpointParams.Endpoint),{protocol:r,port:n}=e;u.url.protocol=r,u.url.port=n}catch(e){}return t.logger?.debug?.(`${vt} Resolved endpoint: ${mt(u)}`),u})(kn,{endpointParams:e,logger:t.logger}),Cn=["in-region","cross-region","mobile","standard","legacy"],jn=e=>{const t=(({defaultsMode:e}={})=>ie((async()=>{const t="function"==typeof e?await e():e;switch(t?.toLowerCase()){case"auto":return Promise.resolve((()=>{const e="undefined"!=typeof window&&window?.navigator?.userAgent?un().parse(window.navigator.userAgent):void 0,t=e?.platform?.type;return"tablet"===t||"mobile"===t})()?"mobile":"standard");case"mobile":case"in-region":case"cross-region":case"standard":case"legacy":return Promise.resolve(t?.toLocaleLowerCase());case void 0:return Promise.resolve("legacy");default:throw new Error(`Invalid parameter for "defaultsMode", expect ${Cn.join(", ")}, got ${t}`)}})))(e),r=()=>t().then(Zr),n=(e=>({apiVersion:"2017-10-26",base64Decoder:e?.base64Decoder??wr,base64Encoder:e?.base64Encoder??_r,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??In,logger:e?.logger??new Tr,serviceId:e?.serviceId??"Transcribe Streaming",urlParser:e?.urlParser??_,utf8Decoder:e?.utf8Decoder??Me,utf8Encoder:e?.utf8Encoder??Te}))(e);return{...n,...e,runtime:"browser",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??an,credentialDefaultProvider:e?.credentialDefaultProvider??(e=>()=>Promise.reject(new Error("Credential is missing"))),defaultUserAgentProvider:e?.defaultUserAgentProvider??cn({serviceId:n.serviceId,clientVersion:"3.359.0"}),eventStreamPayloadHandlerProvider:e?.eventStreamPayloadHandlerProvider??(()=>te),eventStreamSerdeProvider:e?.eventStreamSerdeProvider??pr,maxAttempts:e?.maxAttempts??3,region:e?.region??("Region is missing",()=>Promise.reject("Region is missing")),requestHandler:e?.requestHandler??new Ar(r,new vr(r)),retryMode:e?.retryMode??(async()=>(await r()).retryMode||I),sha256:e?.sha256??on.Sha256,streamCollector:e?.streamCollector??Sr,useDualstackEndpoint:e?.useDualstackEndpoint??(()=>Promise.resolve(!1)),useFipsEndpoint:e?.useFipsEndpoint??(()=>Promise.resolve(!1))}};class Ln extends Gr{constructor(e){super(e),Object.setPrototypeOf(this,Ln.prototype)}}var Bn,Un,Nn,$n;!function(e){e.visit=(e,t)=>void 0!==e.AudioEvent?t.AudioEvent(e.AudioEvent):void 0!==e.ConfigurationEvent?t.ConfigurationEvent(e.ConfigurationEvent):t._(e.$unknown[0],e.$unknown[1])}(Bn||(Bn={}));class Dn extends Ln{constructor(e){super({name:"BadRequestException",$fault:"client",...e}),this.name="BadRequestException",this.$fault="client",Object.setPrototypeOf(this,Dn.prototype),this.Message=e.Message}}class Fn extends Ln{constructor(e){super({name:"ConflictException",$fault:"client",...e}),this.name="ConflictException",this.$fault="client",Object.setPrototypeOf(this,Fn.prototype),this.Message=e.Message}}class zn extends Ln{constructor(e){super({name:"InternalFailureException",$fault:"server",...e}),this.name="InternalFailureException",this.$fault="server",Object.setPrototypeOf(this,zn.prototype),this.Message=e.Message}}class qn extends Ln{constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),this.name="LimitExceededException",this.$fault="client",Object.setPrototypeOf(this,qn.prototype),this.Message=e.Message}}class Hn extends Ln{constructor(e){super({name:"ServiceUnavailableException",$fault:"server",...e}),this.name="ServiceUnavailableException",this.$fault="server",Object.setPrototypeOf(this,Hn.prototype),this.Message=e.Message}}!function(e){e.visit=(e,t)=>void 0!==e.UtteranceEvent?t.UtteranceEvent(e.UtteranceEvent):void 0!==e.CategoryEvent?t.CategoryEvent(e.CategoryEvent):void 0!==e.BadRequestException?t.BadRequestException(e.BadRequestException):void 0!==e.LimitExceededException?t.LimitExceededException(e.LimitExceededException):void 0!==e.InternalFailureException?t.InternalFailureException(e.InternalFailureException):void 0!==e.ConflictException?t.ConflictException(e.ConflictException):void 0!==e.ServiceUnavailableException?t.ServiceUnavailableException(e.ServiceUnavailableException):t._(e.$unknown[0],e.$unknown[1])}(Un||(Un={})),function(e){e.visit=(e,t)=>void 0!==e.TranscriptEvent?t.TranscriptEvent(e.TranscriptEvent):void 0!==e.BadRequestException?t.BadRequestException(e.BadRequestException):void 0!==e.LimitExceededException?t.LimitExceededException(e.LimitExceededException):void 0!==e.InternalFailureException?t.InternalFailureException(e.InternalFailureException):void 0!==e.ConflictException?t.ConflictException(e.ConflictException):void 0!==e.ServiceUnavailableException?t.ServiceUnavailableException(e.ServiceUnavailableException):t._(e.$unknown[0],e.$unknown[1])}(Nn||(Nn={})),function(e){e.visit=(e,t)=>void 0!==e.TranscriptEvent?t.TranscriptEvent(e.TranscriptEvent):void 0!==e.BadRequestException?t.BadRequestException(e.BadRequestException):void 0!==e.LimitExceededException?t.LimitExceededException(e.LimitExceededException):void 0!==e.InternalFailureException?t.InternalFailureException(e.InternalFailureException):void 0!==e.ConflictException?t.ConflictException(e.ConflictException):void 0!==e.ServiceUnavailableException?t.ServiceUnavailableException(e.ServiceUnavailableException):t._(e.$unknown[0],e.$unknown[1])}($n||($n={}));const Wn=e=>({...e,...e.AudioStream&&{AudioStream:"STREAMING_CONTENT"}}),Vn=e=>({...e,...e.TranscriptResultStream&&{TranscriptResultStream:"STREAMING_CONTENT"}});var Gn,Kn,Zn,Yn;!function(e){e.HEADER="header",e.QUERY="query"}(Gn||(Gn={})),function(e){e.HTTP="http",e.HTTPS="https"}(Kn||(Kn={})),function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"}(Zn||(Zn={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(Yn||(Yn={}));class Qn{constructor(e){this.method=e.method||"GET",this.hostname=e.hostname||"localhost",this.port=e.port,this.query=e.query||{},this.headers=e.headers||{},this.body=e.body,this.protocol=e.protocol?":"!==e.protocol.slice(-1)?`${e.protocol}:`:e.protocol:"https:",this.path=e.path?"/"!==e.path.charAt(0)?`/${e.path}`:e.path:"/",this.username=e.username,this.password=e.password,this.fragment=e.fragment}static isInstance(e){if(!e)return!1;const t=e;return"method"in t&&"protocol"in t&&"hostname"in t&&"path"in t&&"object"==typeof t.query&&"object"==typeof t.headers}clone(){const e=new Qn({...this,headers:{...this.headers}});var t;return e.query&&(e.query=(t=e.query,Object.keys(t).reduce(((e,r)=>{const n=t[r];return{...e,[r]:Array.isArray(n)?[...n]:n}}),{}))),e}}const Xn=(Jn=Ln,({output:e,parsedBody:t,errorCode:r})=>{(({output:e,parsedBody:t,exceptionCtor:r,errorCode:n})=>{const i=(e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}))(e),o=i.httpStatusCode?i.httpStatusCode+"":void 0,a=new r({name:t?.code||t?.Code||n||o||"UnknownError",$fault:"client",$metadata:i});throw Kr(a,t)})({output:e,parsedBody:t,exceptionCtor:Jn,errorCode:r})});var Jn;const ei=async(e,t)=>{const r=Qr({}),n=e.body,i=Xr(n,{Message:Dr});Object.assign(r,i);const o=new Dn({$metadata:vi(e),...r});return Kr(o,e.body)},ti=async(e,t)=>{const r=Qr({}),n=e.body,i=Xr(n,{Message:Dr});Object.assign(r,i);const o=new Fn({$metadata:vi(e),...r});return Kr(o,e.body)},ri=async(e,t)=>{const r=Qr({}),n=e.body,i=Xr(n,{Message:Dr});Object.assign(r,i);const o=new zn({$metadata:vi(e),...r});return Kr(o,e.body)},ni=async(e,t)=>{const r=Qr({}),n=e.body,i=Xr(n,{Message:Dr});Object.assign(r,i);const o=new qn({$metadata:vi(e),...r});return Kr(o,e.body)},ii=async(e,t)=>{const r=Qr({}),n=e.body,i=Xr(n,{Message:Dr});Object.assign(r,i);const o=new Hn({$metadata:vi(e),...r});return Kr(o,e.body)},oi=(e,t)=>{let r=new Uint8Array;return null!=e.AudioChunk&&(r=e.AudioChunk),{headers:{":event-type":{type:"string",value:"AudioEvent"},":message-type":{type:"string",value:"event"},":content-type":{type:"string",value:"application/octet-stream"}},body:r}},ai=(e,t)=>{let r=new Uint8Array;return r=nn(e),r=t.utf8Decoder(JSON.stringify(r)),{headers:{":event-type":{type:"string",value:"ConfigurationEvent"},":message-type":{type:"string",value:"event"},":content-type":{type:"string",value:"application/json"}},body:r}},si=async(e,t)=>{const r={...e,body:await bi(e.body,t)};return ei(r,t)},ui=async(e,t)=>{const r={...e,body:await bi(e.body,t)};return ti(r,t)},ci=async(e,t)=>{const r={...e,body:await bi(e.body,t)};return ri(r,t)},fi=async(e,t)=>{const r={...e,body:await bi(e.body,t)};return ni(r,t)},li=async(e,t)=>{const r={...e,body:await bi(e.body,t)};return ii(r,t)},di=async(e,t)=>{const r={},n=await bi(e.body,t);return Object.assign(r,gi(n,t)),r},hi=(e,t)=>{const r=(e||[]).filter((e=>null!=e)).map((e=>((e,t)=>Xr(e,{Category:Dr,Confidence:zr,Content:Dr,EndTime:zr,StartTime:zr,Type:Dr}))(e)));return r},pi=(e,t)=>{const r=(e||[]).filter((e=>null!=e)).map((e=>((e,t)=>Xr(e,{Confidence:zr,Content:Dr,EndTime:zr,Speaker:Dr,Stable:Br,StartTime:zr,Type:Dr,VocabularyFilterMatch:Br}))(e)));return r},yi=(e,t)=>Xr(e,{Alternatives:e=>((e,t)=>{const r=(e||[]).filter((e=>null!=e)).map((e=>((e,t)=>Xr(e,{Entities:e=>hi(e,t),Items:e=>pi(e,t),Transcript:Dr}))(e,t)));return r})(e,t),ChannelId:Dr,EndTime:zr,IsPartial:Br,LanguageCode:Dr,LanguageIdentification:e=>((e,t)=>{const r=(e||[]).filter((e=>null!=e)).map((e=>((e,t)=>Xr(e,{LanguageCode:Dr,Score:zr}))(e)));return r})(e),ResultId:Dr,StartTime:zr}),gi=(e,t)=>Xr(e,{Transcript:e=>((e,t)=>Xr(e,{Results:e=>((e,t)=>{const r=(e||[]).filter((e=>null!=e)).map((e=>yi(e,t)));return r})(e,t)}))(e,t)}),vi=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),mi=e=>!(null==e||""===e||Object.getOwnPropertyNames(e).includes("length")&&0==e.length||Object.getOwnPropertyNames(e).includes("size")&&0==e.size),bi=(e,t)=>((e,t)=>(async(e=new Uint8Array,t)=>{if(e instanceof Uint8Array)return Cr.mutate(e);if(!e)return Cr.mutate(new Uint8Array);const r=t.streamCollector(e);return Cr.mutate(await r)})(e,t).then((e=>t.utf8Encoder(e))))(e,t).then((e=>e.length?JSON.parse(e):{})),wi=async(e,t)=>{const r=await bi(e,t);return r.message=r.message??r.Message,r},_i=(e,t)=>{const r=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},n=(i=e.headers,"x-amzn-errortype",Object.keys(i).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var i;return void 0!==n?r(e.headers[n]):void 0!==t.code?r(t.code):void 0!==t.__type?r(t.__type):void 0};class Si extends jr{static getEndpointParameterInstructions(){return{UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}constructor(e){super(),this.input=e}resolveMiddleware(e,t,r){var n,i;this.middlewareStack.use(function(e,t,r){return{applyToStack:n=>{n.add(((e,t)=>(r,n)=>async n=>{const{response:i}=await r(n);try{return{response:i,output:await t(i,e)}}catch(e){if(Object.defineProperty(e,"$response",{value:i}),!("$metadata"in e)){const t="Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.";e.message+="\n  "+t}throw e}})(e,r),d),n.add(((e,t)=>(r,n)=>async i=>{const o=n.endpointV2?.url&&e.urlParser?async()=>e.urlParser(n.endpointV2.url):e.endpoint;if(!o)throw new Error("No valid endpoint provider available.");const a=await t(i.input,{...e,endpoint:o});return r({...i,request:a})})(e,t),h)}}}(t,this.serialize,this.deserialize)),this.middlewareStack.use((n=t,i=Si.getEndpointParameterInstructions(),{applyToStack:e=>{e.addRelativeTo((({config:e,instructions:t})=>(r,n)=>async i=>{const o=await(async(e,t,r,n)=>{const i=await m(e,t,r);if("function"!=typeof r.endpointProvider)throw new Error("config.endpointProvider is not set.");return r.endpointProvider(i,n)})(i.input,{getEndpointParameterInstructions:()=>t},{...e},n);n.endpointV2=o,n.authSchemes=o.properties?.authSchemes;const a=n.authSchemes?.[0];return a&&(n.signing_region=a.signingRegion,n.signing_service=a.signingName),r({...i})})({config:n,instructions:i}),b)}})),this.middlewareStack.use((e=>({applyToStack:t=>{t.addRelativeTo((e=>(t,r)=>async n=>{const{request:i}=n;return u.isInstance(i)?e.eventStreamPayloadHandler.handle(t,n,r):t(n)})(e),S),t.add(E,A)}}))(t)),this.middlewareStack.use(((e,t)=>({applyToStack:r=>{r.addRelativeTo(((e,t)=>r=>n=>{const{request:i}=n;if(u.isInstance(i)&&e.requestHandler.metadata?.handlerProtocol?.toLowerCase().includes("websocket")){i.protocol="wss:",i.method="GET",i.path=`${i.path}-websocket`;const{headers:e}=i;delete e["Content-Type"],delete e["x-amz-content-sha256"];for(const r of Object.keys(e))if(0===r.indexOf(t.headerPrefix)){const n=r.replace(t.headerPrefix,"");i.query[n]=e[r]}e["x-amz-user-agent"]&&(i.query["user-agent"]=e["x-amz-user-agent"]),i.headers={host:e.host??i.hostname}}return r(n)})(e,t),or),r.add((e=>async t=>{const r={...t.input},n=await e(t),i=n.output;return r.SessionId&&null==i.SessionId&&(i.SessionId=r.SessionId),n}),ir)}}))(t,{headerPrefix:"x-amzn-transcribe-"}));const o=e.concat(this.middlewareStack),{logger:a}=t,s={logger:a,clientName:"TranscribeStreamingClient",commandName:"StartStreamTranscriptionCommand",inputFilterSensitiveLog:Wn,outputFilterSensitiveLog:Vn},{requestHandler:c}=t;return o.resolve((e=>c.handle(e.request,r||{})),s)}serialize(e,t){return(async(e,t)=>{const{hostname:r,protocol:n="https",port:i,path:o}=await t.endpoint(),a=Qr({},mi,{"x-amzn-transcribe-language-code":e.LanguageCode,"x-amzn-transcribe-sample-rate":[()=>mi(e.MediaSampleRateHertz),()=>e.MediaSampleRateHertz.toString()],"x-amzn-transcribe-media-encoding":e.MediaEncoding,"x-amzn-transcribe-vocabulary-name":e.VocabularyName,"x-amzn-transcribe-session-id":e.SessionId,"x-amzn-transcribe-vocabulary-filter-name":e.VocabularyFilterName,"x-amzn-transcribe-vocabulary-filter-method":e.VocabularyFilterMethod,"x-amzn-transcribe-show-speaker-label":[()=>mi(e.ShowSpeakerLabel),()=>e.ShowSpeakerLabel.toString()],"x-amzn-transcribe-enable-channel-identification":[()=>mi(e.EnableChannelIdentification),()=>e.EnableChannelIdentification.toString()],"x-amzn-transcribe-number-of-channels":[()=>mi(e.NumberOfChannels),()=>e.NumberOfChannels.toString()],"x-amzn-transcribe-enable-partial-results-stabilization":[()=>mi(e.EnablePartialResultsStabilization),()=>e.EnablePartialResultsStabilization.toString()],"x-amzn-transcribe-partial-results-stability":e.PartialResultsStability,"x-amzn-transcribe-content-identification-type":e.ContentIdentificationType,"x-amzn-transcribe-content-redaction-type":e.ContentRedactionType,"x-amzn-transcribe-pii-entity-types":e.PiiEntityTypes,"x-amzn-transcribe-language-model-name":e.LanguageModelName,"x-amzn-transcribe-identify-language":[()=>mi(e.IdentifyLanguage),()=>e.IdentifyLanguage.toString()],"x-amzn-transcribe-language-options":e.LanguageOptions,"x-amzn-transcribe-preferred-language":e.PreferredLanguage,"x-amzn-transcribe-vocabulary-names":e.VocabularyNames,"x-amzn-transcribe-vocabulary-filter-names":e.VocabularyFilterNames}),s=`${o?.endsWith("/")?o.slice(0,-1):o||""}/stream-transcription`;let u;return void 0!==e.AudioStream&&(u=((e,t)=>t.eventStreamMarshaller.serialize(e,(e=>Bn.visit(e,{AudioEvent:e=>oi(e,t),ConfigurationEvent:e=>ai(e,t),_:e=>e}))))(e.AudioStream,t)),new Qn({protocol:n,hostname:r,port:i,method:"POST",headers:a,path:s,body:u})})(e,t)}deserialize(e,t){return(async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return(async(e,t)=>{const r={...e,body:await wi(e.body,t)},n=_i(e,r.body);switch(n){case"BadRequestException":case"com.amazonaws.transcribestreaming#BadRequestException":throw await ei(r,t);case"ConflictException":case"com.amazonaws.transcribestreaming#ConflictException":throw await ti(r,t);case"InternalFailureException":case"com.amazonaws.transcribestreaming#InternalFailureException":throw await ri(r,t);case"LimitExceededException":case"com.amazonaws.transcribestreaming#LimitExceededException":throw await ni(r,t);case"ServiceUnavailableException":case"com.amazonaws.transcribestreaming#ServiceUnavailableException":throw await ii(r,t);default:const i=r.body;return Xn({output:e,parsedBody:i,errorCode:n})}})(e,t);const r=Qr({$metadata:vi(e),RequestId:[,e.headers["x-amzn-request-id"]],LanguageCode:[,e.headers["x-amzn-transcribe-language-code"]],MediaSampleRateHertz:[()=>void 0!==e.headers["x-amzn-transcribe-sample-rate"],()=>Hr(e.headers["x-amzn-transcribe-sample-rate"])],MediaEncoding:[,e.headers["x-amzn-transcribe-media-encoding"]],VocabularyName:[,e.headers["x-amzn-transcribe-vocabulary-name"]],SessionId:[,e.headers["x-amzn-transcribe-session-id"]],VocabularyFilterName:[,e.headers["x-amzn-transcribe-vocabulary-filter-name"]],VocabularyFilterMethod:[,e.headers["x-amzn-transcribe-vocabulary-filter-method"]],ShowSpeakerLabel:[()=>void 0!==e.headers["x-amzn-transcribe-show-speaker-label"],()=>Lr(e.headers["x-amzn-transcribe-show-speaker-label"])],EnableChannelIdentification:[()=>void 0!==e.headers["x-amzn-transcribe-enable-channel-identification"],()=>Lr(e.headers["x-amzn-transcribe-enable-channel-identification"])],NumberOfChannels:[()=>void 0!==e.headers["x-amzn-transcribe-number-of-channels"],()=>Hr(e.headers["x-amzn-transcribe-number-of-channels"])],EnablePartialResultsStabilization:[()=>void 0!==e.headers["x-amzn-transcribe-enable-partial-results-stabilization"],()=>Lr(e.headers["x-amzn-transcribe-enable-partial-results-stabilization"])],PartialResultsStability:[,e.headers["x-amzn-transcribe-partial-results-stability"]],ContentIdentificationType:[,e.headers["x-amzn-transcribe-content-identification-type"]],ContentRedactionType:[,e.headers["x-amzn-transcribe-content-redaction-type"]],PiiEntityTypes:[,e.headers["x-amzn-transcribe-pii-entity-types"]],LanguageModelName:[,e.headers["x-amzn-transcribe-language-model-name"]],IdentifyLanguage:[()=>void 0!==e.headers["x-amzn-transcribe-identify-language"],()=>Lr(e.headers["x-amzn-transcribe-identify-language"])],LanguageOptions:[,e.headers["x-amzn-transcribe-language-options"]],PreferredLanguage:[,e.headers["x-amzn-transcribe-preferred-language"]],VocabularyNames:[,e.headers["x-amzn-transcribe-vocabulary-names"]],VocabularyFilterNames:[,e.headers["x-amzn-transcribe-vocabulary-filter-names"]]}),n=e.body;return r.TranscriptResultStream=((e,t)=>t.eventStreamMarshaller.deserialize(e,(async r=>null!=r.TranscriptEvent?{TranscriptEvent:await di(r.TranscriptEvent,t)}:null!=r.BadRequestException?{BadRequestException:await si(r.BadRequestException,t)}:null!=r.LimitExceededException?{LimitExceededException:await fi(r.LimitExceededException,t)}:null!=r.InternalFailureException?{InternalFailureException:await ci(r.InternalFailureException,t)}:null!=r.ConflictException?{ConflictException:await ui(r.ConflictException,t)}:null!=r.ServiceUnavailableException?{ServiceUnavailableException:await li(r.ServiceUnavailableException,t)}:{$unknown:e})))(n,t),r})(e,t)}}var Ei=r(8764).Buffer;const Ai=r(3900).default,xi=new class extends Ir{constructor(e){var t;const r=(e=>{const{region:t,useFipsEndpoint:r}=e;if(!t)throw new Error("Region is missing");return{...e,region:async()=>{if("string"==typeof t)return o(t);const e=await t();return o(e)},useFipsEndpoint:async()=>{const e="string"==typeof t?t:await t();return!!i(e)||("function"!=typeof r?Promise.resolve(!!r):r())}}})((t=jn(e),{...t,useDualstackEndpoint:t.useDualstackEndpoint??!1,useFipsEndpoint:t.useFipsEndpoint??!1,defaultSigningName:"transcribe"})),n=(e=>{const{retryStrategy:t}=e,r=w(e.maxAttempts??3);return{...e,maxAttempts:r,retryStrategy:async()=>t||(await w(e.retryMode)()===P.ADAPTIVE?new z(r):new F(r))}})((e=>{const t=e.tls??!0,{endpoint:r}=e,n=null!=r?async()=>(e=>"object"==typeof e?"url"in e?_(e.url):e:_(e))(await w(r)()):void 0,i=!!r;return{...e,endpoint:n,tls:t,isCustomEndpoint:i,useDualstackEndpoint:w(e.useDualstackEndpoint??!1),useFipsEndpoint:w(e.useFipsEndpoint??!1)}})(r)),a=(e=>{const t=e.credentials?"function"==typeof(o=e.credentials)?ie(o,(e=>void 0!==e.expiration&&e.expiration.getTime()-Date.now()<3e5),(e=>void 0!==e.expiration)):w(o):e.credentialDefaultProvider(e),{signingEscapePath:r=!0,systemClockOffset:n=e.systemClockOffset||0,sha256:i}=e;var o;let a;return a=e.signer?w(e.signer):e.regionInfoProvider?()=>w(e.region)().then((async t=>[await e.regionInfoProvider(t,{useFipsEndpoint:await e.useFipsEndpoint(),useDualstackEndpoint:await e.useDualstackEndpoint()})||{},t])).then((([n,o])=>{const{signingRegion:a,signingService:s}=n;e.signingRegion=e.signingRegion||a||o,e.signingName=e.signingName||s||e.serviceId;const u={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:i,uriEscapePath:r};return new(e.signerConstructor||nt)(u)})):async n=>{const o=(n=Object.assign({},{name:"sigv4",signingName:e.signingName||e.defaultSigningName,signingRegion:await w(e.region)(),properties:{}},n)).signingRegion,a=n.signingName;e.signingRegion=e.signingRegion||o,e.signingName=e.signingName||a||e.serviceId;const s={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:i,uriEscapePath:r};return new(e.signerConstructor||nt)(s)},{...e,systemClockOffset:n,signingEscapePath:r,credentials:t,signer:a}})(n),s=function(e){const t=e.signer,r=e.signer,n=e.eventStreamPayloadHandlerProvider({...e,messageSigner:r});return{...e,eventSigner:t,eventStreamPayloadHandler:n}}(a);var c;const d=(e=>({...e,eventStreamMarshaller:e.eventStreamSerdeProvider(e)}))(function(e){return{...e,customUserAgent:"string"==typeof e.customUserAgent?[[e.customUserAgent]]:e.customUserAgent}}((c=s,{...c,signer:async e=>{const t=await c.signer(e);if(t)return new sr({signer:t});throw new Error("Expected WebsocketSignatureV4 signer, please check the client constructor.")}})));var h;super(d),this.config=d,this.middlewareStack.use((e=>({applyToStack:t=>{t.add((e=>(t,r)=>async n=>{let i=await e.retryStrategy();const o=await e.maxAttempts();if(!(e=>void 0!==e.acquireInitialRetryToken&&void 0!==e.refreshRetryTokenForRetry&&void 0!==e.recordSuccess)(i))return i?.mode&&(r.userAgent=[...r.userAgent||[],["cfg/retry-mode",i.mode]]),i.retry(t,n);{let e=await i.acquireInitialRetryToken(r.partition_id),s=new Error,c=0,f=0;const{request:l}=n;for(u.isInstance(l)&&(l.headers["amz-sdk-invocation-id"]=Y());;)try{u.isInstance(l)&&(l.headers["amz-sdk-request"]=`attempt=${c+1}; max=${o}`);const{response:r,output:a}=await t(n);return i.recordSuccess(e),a.$metadata.attempts=c+1,a.$metadata.totalRetryDelay=f,{response:r,output:a}}catch(t){const r=Q(t);s=(a=t)instanceof Error?a:a instanceof Object?Object.assign(new Error,a):"string"==typeof a?new Error(a):new Error(`AWS SDK error wrapper for ${a}`);try{e=await i.refreshRetryTokenForRetry(e,r)}catch(e){throw s.$metadata||(s.$metadata={}),s.$metadata.attempts=c+1,s.$metadata.totalRetryDelay=f,s}c=e.getRetryCount();const n=e.getRetryDelay();f+=n,await new Promise((e=>setTimeout(e,n)))}}var a})(e),J)}}))(this.config)),this.middlewareStack.use((e=>({applyToStack:t=>{var r;t.add((r=e.bodyLengthChecker,e=>async t=>{const n=t.request;if(u.isInstance(n)){const{body:e,headers:t}=n;if(e&&-1===Object.keys(t).map((e=>e.toLowerCase())).indexOf(f))try{const t=r(e);n.headers={...n.headers,[f]:String(t)}}catch(e){}}return e({...t,request:n})}),l)}}))(this.config)),this.middlewareStack.use((e=>({applyToStack:t=>{t.add((e=>t=>async r=>{if(!u.isInstance(r.request))return t(r);const{request:n}=r,{handlerProtocol:i=""}=e.requestHandler.metadata||{};if(i.indexOf("h2")>=0&&!n.headers[":authority"])delete n.headers.host,n.headers[":authority"]="";else if(!n.headers.host){let e=n.hostname;null!=n.port&&(e+=`:${n.port}`),n.headers.host=e}return t(r)})(e),x)}}))(this.config)),this.middlewareStack.use((this.config,{applyToStack:e=>{e.add(((e,t)=>async r=>{try{const n=await e(r),{clientName:i,commandName:o,logger:a,dynamoDbDocumentClientOptions:s={}}=t,{overrideInputFilterSensitiveLog:u,overrideOutputFilterSensitiveLog:c}=s,f=u??t.inputFilterSensitiveLog,l=c??t.outputFilterSensitiveLog,{$metadata:d,...h}=n.output;return a?.info?.({clientName:i,commandName:o,input:f(r.input),output:l(h),metadata:d}),n}catch(e){const{clientName:n,commandName:i,logger:o,dynamoDbDocumentClientOptions:a={}}=t,{overrideInputFilterSensitiveLog:s}=a,u=s??t.inputFilterSensitiveLog;throw o?.error?.({clientName:n,commandName:i,input:u(r.input),error:e,metadata:e.$metadata}),e}}),R)}})),this.middlewareStack.use((e=>({applyToStack:t=>{t.add((e=>t=>async r=>{const{request:n}=r;if(!u.isInstance(n)||"node"!==e.runtime||n.headers.hasOwnProperty(T))return t(r);const i=O.env.AWS_LAMBDA_FUNCTION_NAME,o=O.env._X_AMZN_TRACE_ID,a=e=>"string"==typeof e&&e.length>0;return a(i)&&a(o)&&(n.headers[T]=o),t({...r,request:n})})(e),M)}}))(this.config)),this.middlewareStack.use((e=>({applyToStack:t=>{t.addRelativeTo((e=>(t,r)=>async function(n){if(!u.isInstance(n.request))return t(n);const i=r.endpointV2?.properties?.authSchemes?.[0],o="sigv4a"===i?.name?i?.signingRegionSet?.join(","):void 0,a=await e.signer(i),s=await t({...n,request:await a.sign(n.request,{signingDate:at(e.systemClockOffset),signingRegion:o||r.signing_region,signingService:r.signing_service})}).catch((t=>{const r=t.ServerTime??ut(t.$response);throw r&&(e.systemClockOffset=st(r,e.systemClockOffset)),t})),c=ut(s.response);return c&&(e.systemClockOffset=st(c,e.systemClockOffset)),s})(e),ct)}}))(this.config)),this.middlewareStack.use((h=this.config,{applyToStack:e=>{var t;e.addRelativeTo((t=h,e=>r=>{const{request:n}=r;return u.isInstance(n)&&t.requestHandler.metadata?.handlerProtocol?.includes("websocket")&&(n.hostname=`${n.hostname}:8443`,n.headers.host=n.hostname),e(r)}),ne),e.add((e=>t=>async r=>{void 0===r.input.SessionId&&(e=>e.requestHandler.metadata?.handlerProtocol?.includes("websocket"))(e)&&(r.input.SessionId=Y());const n={...r.input},i=await t(r),o=i.output;for(const e of Object.keys(o))void 0===o[e]&&n[e]&&(o[e]=n[e]);return i})(h),re)}})),this.middlewareStack.use((e=>({applyToStack:t=>{var r;t.add((r=e,(e,t)=>async n=>{const{request:i}=n;if(!u.isInstance(i))return e(n);const{headers:o}=i,a=t?.userAgent?.map(rr)||[],s=(await r.defaultUserAgentProvider()).map(rr),c=r?.customUserAgent?.map(rr)||[],f=gt(),l=(f?[f]:[]).concat([...s,...a,...c]).join(" "),d=[...s.filter((e=>e.startsWith("aws-sdk-"))),...c].join(" ");return"browser"!==r.runtime?(d&&(o[Jt]=o[Jt]?`${o[Xt]} ${d}`:d),o[Xt]=l):o[Jt]=l,e({...n,request:i})}),nr)}}))(this.config))}destroy(){super.destroy()}}({region:"us-west-2",credentials:{accessKeyId:"AKIAUQEVMB47ZVBXAYGZ",secretAccessKey:"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"}});let Ri,Oi,Ti,Mi,Pi="";const ki="almond";localStorage.setItem(ki,"");const Ii="almond_question";localStorage.setItem(ki,""),document.getElementById("start-button").onclick=function(){console.log("click on start button"),window.navigator.mediaDevices.getUserMedia({video:!1,audio:!0}).then(Ci).catch((function(e){console.error(e)}))},document.getElementById("stop-button").onclick=function(){Oi.stop(),xi.destroy()},document.getElementById("resume-button").onclick=function(){console.log("click on start button"),window.navigator.mediaDevices.getUserMedia({video:!1,audio:!0}).then(ji).catch((function(e){console.error(e)}))};let Ci=async function(e){Oi=new Ai,Oi.setStream(e),Ri=async function*(){for await(const e of Oi)yield{AudioEvent:{AudioChunk:Bi(e)}}},await Li(),await Ui(isQuestion)},ji=async function(e){Oi=new Ai,Oi.setStream(e),Ri=async function*(){for await(const e of Oi)yield{AudioEvent:{AudioChunk:Bi(e)}}},await Li(),await Ui()};async function Li(){const e=new Si({LanguageCode:"en-US",MediaEncoding:"pcm",MediaSampleRateHertz:44100,AudioStream:Ri()});Ti=await xi.send(e)}const Bi=e=>{const t=Ai.toRaw(e);let r=0;const n=new ArrayBuffer(2*t.length),i=new DataView(n);for(var o=0;o<t.length;o++,r+=2){var a=Math.max(-1,Math.min(1,t[o]));i.setInt16(r,a<0?32768*a:32767*a,!0)}return Ei.from(n)};async function Ui(){for await(const e of Ti.TranscriptResultStream)e.TranscriptEvent&&(e.TranscriptEvent,e.TranscriptEvent.Transcript.Results.filter((e=>e.ResultId)).map((e=>{if(console.log(`prevId: ${Pi}`),console.log(`result.ResultId: ${e.ResultId}`),e.ResultId!==Pi){Mi=document.createTextNode("..."),Pi=e.ResultId;const t=document.getElementById("text-results");Mi.id=Pi,t.appendChild(Mi)}(e.Alternatives||[]).map((t=>{const r=t.Items.map((e=>e.Content)).join(" ");if(Mi.textContent=r,!e.IsPartial)if(isQuestion){const e=localStorage.getItem(Ii);localStorage.setItem(Ii,e+r)}else{const e=localStorage.getItem(ki);localStorage.setItem(ki,e+r)}}))})))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,